<?php
/**
 * CampaignManagementServiceApi
 * CampaignManagementService
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  Microsoft\MsAds\Rest\Api
 * @author   Microsoft Advertising
 */

namespace Microsoft\MsAds\Rest\Api;

use GuzzleHttp\ClientInterface;
use GuzzleHttp\Exception\ConnectException;
use GuzzleHttp\Exception\RequestException;
use Microsoft\MsAds\Rest\ApiException;
use Microsoft\MsAds\Rest\Auth\ApiEnvironment;
use Microsoft\MsAds\Rest\Configuration;
use Microsoft\MsAds\Rest\HeaderSelector;
use Microsoft\MsAds\Rest\ObjectSerializer;

class CampaignManagementServiceApi extends AbstractServiceApi
{
    /** @var string[] $contentTypes **/
    public const contentTypes = [
        'addAdExtensions' => [
            'application/json',
        ],
        'addAdGroupCriterions' => [
            'application/json',
        ],
        'addAdGroups' => [
            'application/json',
        ],
        'addAds' => [
            'application/json',
        ],
        'addAssetGroups' => [
            'application/json',
        ],
        'addAudienceGroups' => [
            'application/json',
        ],
        'addAudiences' => [
            'application/json',
        ],
        'addBidStrategies' => [
            'application/json',
        ],
        'addBrandKits' => [
            'application/json',
        ],
        'addBudgets' => [
            'application/json',
        ],
        'addCampaignConversionGoals' => [
            'application/json',
        ],
        'addCampaignCriterions' => [
            'application/json',
        ],
        'addCampaigns' => [
            'application/json',
        ],
        'addConversionGoals' => [
            'application/json',
        ],
        'addConversionValueRules' => [
            'application/json',
        ],
        'addDataExclusions' => [
            'application/json',
        ],
        'addExperiments' => [
            'application/json',
        ],
        'addImportJobs' => [
            'application/json',
        ],
        'addKeywords' => [
            'application/json',
        ],
        'addLabels' => [
            'application/json',
        ],
        'addListItemsToSharedList' => [
            'application/json',
        ],
        'addMedia' => [
            'application/json',
        ],
        'addNegativeKeywordsToEntities' => [
            'application/json',
        ],
        'addNewCustomerAcquisitionGoals' => [
            'application/json',
        ],
        'addSeasonalityAdjustments' => [
            'application/json',
        ],
        'addSharedEntity' => [
            'application/json',
        ],
        'addUetTags' => [
            'application/json',
        ],
        'addVideos' => [
            'application/json',
        ],
        'appealEditorialRejections' => [
            'application/json',
        ],
        'applyAssetGroupListingGroupActions' => [
            'application/json',
        ],
        'applyCustomerListItems' => [
            'application/json',
        ],
        'applyCustomerListUserData' => [
            'application/json',
        ],
        'applyHotelGroupActions' => [
            'application/json',
        ],
        'applyOfflineConversionAdjustments' => [
            'application/json',
        ],
        'applyOfflineConversions' => [
            'application/json',
        ],
        'applyOnlineConversionAdjustments' => [
            'application/json',
        ],
        'applyProductPartitionActions' => [
            'application/json',
        ],
        'createAssetGroupRecommendation' => [
            'application/json',
        ],
        'createResponsiveAdRecommendation' => [
            'application/json',
        ],
        'createResponsiveSearchAdRecommendation' => [
            'application/json',
        ],
        'deleteAdExtensions' => [
            'application/json',
        ],
        'deleteAdExtensionsAssociations' => [
            'application/json',
        ],
        'deleteAdGroupCriterions' => [
            'application/json',
        ],
        'deleteAdGroups' => [
            'application/json',
        ],
        'deleteAds' => [
            'application/json',
        ],
        'deleteAssetGroups' => [
            'application/json',
        ],
        'deleteAudienceGroupAssetGroupAssociations' => [
            'application/json',
        ],
        'deleteAudienceGroups' => [
            'application/json',
        ],
        'deleteAudiences' => [
            'application/json',
        ],
        'deleteBidStrategies' => [
            'application/json',
        ],
        'deleteBrandKits' => [
            'application/json',
        ],
        'deleteBudgets' => [
            'application/json',
        ],
        'deleteCampaignConversionGoals' => [
            'application/json',
        ],
        'deleteCampaignCriterions' => [
            'application/json',
        ],
        'deleteCampaigns' => [
            'application/json',
        ],
        'deleteDataExclusions' => [
            'application/json',
        ],
        'deleteExperiments' => [
            'application/json',
        ],
        'deleteImportJobs' => [
            'application/json',
        ],
        'deleteKeywords' => [
            'application/json',
        ],
        'deleteLabelAssociations' => [
            'application/json',
        ],
        'deleteLabels' => [
            'application/json',
        ],
        'deleteListItemsFromSharedList' => [
            'application/json',
        ],
        'deleteMedia' => [
            'application/json',
        ],
        'deleteNegativeKeywordsFromEntities' => [
            'application/json',
        ],
        'deleteSeasonalityAdjustments' => [
            'application/json',
        ],
        'deleteSharedEntities' => [
            'application/json',
        ],
        'deleteSharedEntityAssociations' => [
            'application/json',
        ],
        'deleteVideos' => [
            'application/json',
        ],
        'getAccountMigrationStatuses' => [
            'application/json',
        ],
        'getAccountProperties' => [
            'application/json',
        ],
        'getAdExtensionIdsByAccountId' => [
            'application/json',
        ],
        'getAdExtensionsAssociations' => [
            'application/json',
        ],
        'getAdExtensionsByIds' => [
            'application/json',
        ],
        'getAdExtensionsEditorialReasons' => [
            'application/json',
        ],
        'getAdGroupCriterionsByIds' => [
            'application/json',
        ],
        'getAdGroupsByCampaignId' => [
            'application/json',
        ],
        'getAdGroupsByIds' => [
            'application/json',
        ],
        'getAdsByAdGroupId' => [
            'application/json',
        ],
        'getAdsByEditorialStatus' => [
            'application/json',
        ],
        'getAdsByIds' => [
            'application/json',
        ],
        'getAssetGroupListingGroupsByIds' => [
            'application/json',
        ],
        'getAssetGroupsByCampaignId' => [
            'application/json',
        ],
        'getAssetGroupsByIds' => [
            'application/json',
        ],
        'getAssetGroupsEditorialReasons' => [
            'application/json',
        ],
        'getAudienceGroupAssetGroupAssociationsByAssetGroupIds' => [
            'application/json',
        ],
        'getAudienceGroupAssetGroupAssociationsByAudienceGroupIds' => [
            'application/json',
        ],
        'getAudienceGroupsByIds' => [
            'application/json',
        ],
        'getAudiencesByIds' => [
            'application/json',
        ],
        'getBMCStoresByCustomerId' => [
            'application/json',
        ],
        'getBSCCountries' => [
            'application/json',
        ],
        'getBidStrategiesByIds' => [
            'application/json',
        ],
        'getBrandKitsByAccountId' => [
            'application/json',
        ],
        'getBrandKitsByIds' => [
            'application/json',
        ],
        'getBudgetsByIds' => [
            'application/json',
        ],
        'getCampaignCriterionsByIds' => [
            'application/json',
        ],
        'getCampaignIdsByBidStrategyIds' => [
            'application/json',
        ],
        'getCampaignIdsByBudgetIds' => [
            'application/json',
        ],
        'getCampaignSizesByAccountId' => [
            'application/json',
        ],
        'getCampaignsByAccountId' => [
            'application/json',
        ],
        'getCampaignsByIds' => [
            'application/json',
        ],
        'getClipchampTemplates' => [
            'application/json',
        ],
        'getConfigValue' => [
            'application/json',
        ],
        'getConversionGoalsByIds' => [
            'application/json',
        ],
        'getConversionGoalsByTagIds' => [
            'application/json',
        ],
        'getConversionValueRulesByAccountId' => [
            'application/json',
        ],
        'getConversionValueRulesByIds' => [
            'application/json',
        ],
        'getDataExclusionsByAccountId' => [
            'application/json',
        ],
        'getDataExclusionsByIds' => [
            'application/json',
        ],
        'getEditorialReasonsByIds' => [
            'application/json',
        ],
        'getExperimentsByIds' => [
            'application/json',
        ],
        'getFileImportUploadUrl' => [
            'application/json',
        ],
        'getGeoLocationsFileUrl' => [
            'application/json',
        ],
        'getHealthCheck' => [
            'application/json',
        ],
        'getImportEntityIdsMapping' => [
            'application/json',
        ],
        'getImportJobsByIds' => [
            'application/json',
        ],
        'getImportResults' => [
            'application/json',
        ],
        'getKeywordsByAdGroupId' => [
            'application/json',
        ],
        'getKeywordsByEditorialStatus' => [
            'application/json',
        ],
        'getKeywordsByIds' => [
            'application/json',
        ],
        'getLabelAssociationsByEntityIds' => [
            'application/json',
        ],
        'getLabelAssociationsByLabelIds' => [
            'application/json',
        ],
        'getLabelsByIds' => [
            'application/json',
        ],
        'getListItemsBySharedList' => [
            'application/json',
        ],
        'getMediaAssociations' => [
            'application/json',
        ],
        'getMediaMetaDataByAccountId' => [
            'application/json',
        ],
        'getMediaMetaDataByIds' => [
            'application/json',
        ],
        'getNegativeKeywordsByEntityIds' => [
            'application/json',
        ],
        'getNegativeSitesByAdGroupIds' => [
            'application/json',
        ],
        'getNegativeSitesByCampaignIds' => [
            'application/json',
        ],
        'getNewCustomerAcquisitionGoalsByAccountId' => [
            'application/json',
        ],
        'getOfflineConversionReports' => [
            'application/json',
        ],
        'getProfileDataFileUrl' => [
            'application/json',
        ],
        'getSeasonalityAdjustmentsByAccountId' => [
            'application/json',
        ],
        'getSeasonalityAdjustmentsByIds' => [
            'application/json',
        ],
        'getSharedEntities' => [
            'application/json',
        ],
        'getSharedEntitiesByAccountId' => [
            'application/json',
        ],
        'getSharedEntityAssociationsByEntityIds' => [
            'application/json',
        ],
        'getSharedEntityAssociationsBySharedEntityIds' => [
            'application/json',
        ],
        'getSupportedClipchampAudio' => [
            'application/json',
        ],
        'getSupportedFonts' => [
            'application/json',
        ],
        'getUetTagsByIds' => [
            'application/json',
        ],
        'getVideosByIds' => [
            'application/json',
        ],
        'refineAssetGroupRecommendation' => [
            'application/json',
        ],
        'refineResponsiveAdRecommendation' => [
            'application/json',
        ],
        'refineResponsiveSearchAdRecommendation' => [
            'application/json',
        ],
        'searchCompanies' => [
            'application/json',
        ],
        'setAccountProperties' => [
            'application/json',
        ],
        'setAdExtensionsAssociations' => [
            'application/json',
        ],
        'setAudienceGroupAssetGroupAssociations' => [
            'application/json',
        ],
        'setLabelAssociations' => [
            'application/json',
        ],
        'setNegativeSitesToAdGroups' => [
            'application/json',
        ],
        'setNegativeSitesToCampaigns' => [
            'application/json',
        ],
        'setSharedEntityAssociations' => [
            'application/json',
        ],
        'updateAdExtensions' => [
            'application/json',
        ],
        'updateAdGroupCriterions' => [
            'application/json',
        ],
        'updateAdGroups' => [
            'application/json',
        ],
        'updateAds' => [
            'application/json',
        ],
        'updateAssetGroups' => [
            'application/json',
        ],
        'updateAudienceGroups' => [
            'application/json',
        ],
        'updateAudiences' => [
            'application/json',
        ],
        'updateBidStrategies' => [
            'application/json',
        ],
        'updateBrandKits' => [
            'application/json',
        ],
        'updateBudgets' => [
            'application/json',
        ],
        'updateCampaignCriterions' => [
            'application/json',
        ],
        'updateCampaigns' => [
            'application/json',
        ],
        'updateConversionGoals' => [
            'application/json',
        ],
        'updateConversionValueRules' => [
            'application/json',
        ],
        'updateConversionValueRulesStatus' => [
            'application/json',
        ],
        'updateDataExclusions' => [
            'application/json',
        ],
        'updateExperiments' => [
            'application/json',
        ],
        'updateImportJobs' => [
            'application/json',
        ],
        'updateKeywords' => [
            'application/json',
        ],
        'updateLabels' => [
            'application/json',
        ],
        'updateNewCustomerAcquisitionGoals' => [
            'application/json',
        ],
        'updateSeasonalityAdjustments' => [
            'application/json',
        ],
        'updateSharedEntities' => [
            'application/json',
        ],
        'updateUetTags' => [
            'application/json',
        ],
        'updateVideos' => [
            'application/json',
        ],
    ];

    /**
     * @param  ClientInterface|null  $client
     * @param  Configuration|null  $config
     * @param  HeaderSelector|null  $selector
     * @param  string  $hostEnv  host environment, default is ApiEnvironment::SANDBOX
     */
    public function __construct(
        ?ClientInterface $client = null,
        ?Configuration $config = null,
        ?HeaderSelector $selector = null,
        string $hostEnv = ApiEnvironment::SANDBOX
    ) {
        parent::__construct($client, $config, $selector, $hostEnv);
        $this->hostIndex = 'CampaignManagementService';
    }

    /**
     * Operation addAdExtensions
     *
     * @param  \Microsoft\MsAds\Rest\Model\CampaignManagementService\AddAdExtensionsRequest $AddAdExtensionsRequest AddAdExtensionsRequest (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['addAdExtensions'] to see the possible values for this operation
     *
     * @throws \Microsoft\MsAds\Rest\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \Microsoft\MsAds\Rest\Model\CampaignManagementService\AddAdExtensionsResponse|\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault|\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault|\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault|\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault
     */
    public function addAdExtensions($AddAdExtensionsRequest, string $contentType = self::contentTypes['addAdExtensions'][0])
    {
        list($response) = $this->addAdExtensionsWithHttpInfo($AddAdExtensionsRequest, $contentType);
        return $response;
    }

    /**
     * Operation addAdExtensionsWithHttpInfo
     *
     * @param  \Microsoft\MsAds\Rest\Model\CampaignManagementService\AddAdExtensionsRequest $AddAdExtensionsRequest (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['addAdExtensions'] to see the possible values for this operation
     *
     * @throws \Microsoft\MsAds\Rest\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \Microsoft\MsAds\Rest\Model\CampaignManagementService\AddAdExtensionsResponse|\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault|\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault|\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault|\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault, HTTP status code, HTTP response headers (array of strings)
     */
    public function addAdExtensionsWithHttpInfo($AddAdExtensionsRequest, string $contentType = self::contentTypes['addAdExtensions'][0])
    {
        $request = $this->addAdExtensionsRequest($AddAdExtensionsRequest, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                $response = $e->getResponse();
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            switch($statusCode) {
                case 200:
                    return $this->getResponseContent($request, $response, '\Microsoft\MsAds\Rest\Model\CampaignManagementService\AddAdExtensionsResponse');
                case 400:
                    return $this->getResponseContent($request, $response, '\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault');
                case 500:
                    return $this->getResponseContent($request, $response, '\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault');
                case 401:
                    return $this->getResponseContent($request, $response, '\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault');
                case 403:
                    return $this->getResponseContent($request, $response, '\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault');
            }

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            $returnType = '\Microsoft\MsAds\Rest\Model\CampaignManagementService\AddAdExtensionsResponse';
            return $this->getResponseContent($request, $response, $returnType);

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Microsoft\MsAds\Rest\Model\CampaignManagementService\AddAdExtensionsResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 500:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 403:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation addAdExtensionsAsync
     *
     * @param  \Microsoft\MsAds\Rest\Model\CampaignManagementService\AddAdExtensionsRequest $AddAdExtensionsRequest (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['addAdExtensions'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function addAdExtensionsAsync($AddAdExtensionsRequest, string $contentType = self::contentTypes['addAdExtensions'][0])
    {
        return $this->addAdExtensionsAsyncWithHttpInfo($AddAdExtensionsRequest, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation addAdExtensionsAsyncWithHttpInfo
     *
     * @param  \Microsoft\MsAds\Rest\Model\CampaignManagementService\AddAdExtensionsRequest $AddAdExtensionsRequest (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['addAdExtensions'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function addAdExtensionsAsyncWithHttpInfo($AddAdExtensionsRequest, string $contentType = self::contentTypes['addAdExtensions'][0])
    {
        $returnType = '\Microsoft\MsAds\Rest\Model\CampaignManagementService\AddAdExtensionsResponse';
        $request = $this->addAdExtensionsRequest($AddAdExtensionsRequest, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return $this->onFulfilledResponse($response, $returnType);
                },
                function ($exception) {
                    $this->onRejectedResponse($exception);
                }
            );
    }

    /**
     * Create request for operation 'addAdExtensions'
     *
     * @param  \Microsoft\MsAds\Rest\Model\CampaignManagementService\AddAdExtensionsRequest $AddAdExtensionsRequest (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['addAdExtensions'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function addAdExtensionsRequest($AddAdExtensionsRequest, string $contentType = self::contentTypes['addAdExtensions'][0])
    {

        // verify the required parameter 'AddAdExtensionsRequest' is set
        if ($AddAdExtensionsRequest === null || (is_array($AddAdExtensionsRequest) && count($AddAdExtensionsRequest) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $AddAdExtensionsRequest when calling addAdExtensions'
            );
        }


        $resourcePath = '/CampaignManagement/v13/AdExtensions';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $multipart = false;

        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        return $this->setupAndSendRequest(
            'POST',
            $resourcePath,
            $headers,
            $headerParams,
            $AddAdExtensionsRequest,
            $formParams,
            $multipart,
            true,
            true,
            false,
            'getHostSettingsForaddAdExtensions',
            null,
            [],
            $queryParams
        );
    }

    /**
     * Operation addAdGroupCriterions
     *
     * @param  \Microsoft\MsAds\Rest\Model\CampaignManagementService\AddAdGroupCriterionsRequest $AddAdGroupCriterionsRequest AddAdGroupCriterionsRequest (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['addAdGroupCriterions'] to see the possible values for this operation
     *
     * @throws \Microsoft\MsAds\Rest\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \Microsoft\MsAds\Rest\Model\CampaignManagementService\AddAdGroupCriterionsResponse|\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault|\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault|\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault|\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault
     */
    public function addAdGroupCriterions($AddAdGroupCriterionsRequest, string $contentType = self::contentTypes['addAdGroupCriterions'][0])
    {
        list($response) = $this->addAdGroupCriterionsWithHttpInfo($AddAdGroupCriterionsRequest, $contentType);
        return $response;
    }

    /**
     * Operation addAdGroupCriterionsWithHttpInfo
     *
     * @param  \Microsoft\MsAds\Rest\Model\CampaignManagementService\AddAdGroupCriterionsRequest $AddAdGroupCriterionsRequest (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['addAdGroupCriterions'] to see the possible values for this operation
     *
     * @throws \Microsoft\MsAds\Rest\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \Microsoft\MsAds\Rest\Model\CampaignManagementService\AddAdGroupCriterionsResponse|\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault|\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault|\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault|\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault, HTTP status code, HTTP response headers (array of strings)
     */
    public function addAdGroupCriterionsWithHttpInfo($AddAdGroupCriterionsRequest, string $contentType = self::contentTypes['addAdGroupCriterions'][0])
    {
        $request = $this->addAdGroupCriterionsRequest($AddAdGroupCriterionsRequest, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                $response = $e->getResponse();
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            switch($statusCode) {
                case 200:
                    return $this->getResponseContent($request, $response, '\Microsoft\MsAds\Rest\Model\CampaignManagementService\AddAdGroupCriterionsResponse');
                case 400:
                    return $this->getResponseContent($request, $response, '\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault');
                case 500:
                    return $this->getResponseContent($request, $response, '\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault');
                case 401:
                    return $this->getResponseContent($request, $response, '\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault');
                case 403:
                    return $this->getResponseContent($request, $response, '\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault');
            }

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            $returnType = '\Microsoft\MsAds\Rest\Model\CampaignManagementService\AddAdGroupCriterionsResponse';
            return $this->getResponseContent($request, $response, $returnType);

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Microsoft\MsAds\Rest\Model\CampaignManagementService\AddAdGroupCriterionsResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 500:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 403:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation addAdGroupCriterionsAsync
     *
     * @param  \Microsoft\MsAds\Rest\Model\CampaignManagementService\AddAdGroupCriterionsRequest $AddAdGroupCriterionsRequest (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['addAdGroupCriterions'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function addAdGroupCriterionsAsync($AddAdGroupCriterionsRequest, string $contentType = self::contentTypes['addAdGroupCriterions'][0])
    {
        return $this->addAdGroupCriterionsAsyncWithHttpInfo($AddAdGroupCriterionsRequest, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation addAdGroupCriterionsAsyncWithHttpInfo
     *
     * @param  \Microsoft\MsAds\Rest\Model\CampaignManagementService\AddAdGroupCriterionsRequest $AddAdGroupCriterionsRequest (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['addAdGroupCriterions'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function addAdGroupCriterionsAsyncWithHttpInfo($AddAdGroupCriterionsRequest, string $contentType = self::contentTypes['addAdGroupCriterions'][0])
    {
        $returnType = '\Microsoft\MsAds\Rest\Model\CampaignManagementService\AddAdGroupCriterionsResponse';
        $request = $this->addAdGroupCriterionsRequest($AddAdGroupCriterionsRequest, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return $this->onFulfilledResponse($response, $returnType);
                },
                function ($exception) {
                    $this->onRejectedResponse($exception);
                }
            );
    }

    /**
     * Create request for operation 'addAdGroupCriterions'
     *
     * @param  \Microsoft\MsAds\Rest\Model\CampaignManagementService\AddAdGroupCriterionsRequest $AddAdGroupCriterionsRequest (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['addAdGroupCriterions'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function addAdGroupCriterionsRequest($AddAdGroupCriterionsRequest, string $contentType = self::contentTypes['addAdGroupCriterions'][0])
    {

        // verify the required parameter 'AddAdGroupCriterionsRequest' is set
        if ($AddAdGroupCriterionsRequest === null || (is_array($AddAdGroupCriterionsRequest) && count($AddAdGroupCriterionsRequest) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $AddAdGroupCriterionsRequest when calling addAdGroupCriterions'
            );
        }


        $resourcePath = '/CampaignManagement/v13/AdGroupCriterions';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $multipart = false;

        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        return $this->setupAndSendRequest(
            'POST',
            $resourcePath,
            $headers,
            $headerParams,
            $AddAdGroupCriterionsRequest,
            $formParams,
            $multipart,
            true,
            true,
            false,
            'getHostSettingsForaddAdGroupCriterions',
            null,
            [],
            $queryParams
        );
    }

    /**
     * Operation addAdGroups
     *
     * @param  \Microsoft\MsAds\Rest\Model\CampaignManagementService\AddAdGroupsRequest $AddAdGroupsRequest AddAdGroupsRequest (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['addAdGroups'] to see the possible values for this operation
     *
     * @throws \Microsoft\MsAds\Rest\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \Microsoft\MsAds\Rest\Model\CampaignManagementService\AddAdGroupsResponse|\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault|\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault|\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault|\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault
     */
    public function addAdGroups($AddAdGroupsRequest, string $contentType = self::contentTypes['addAdGroups'][0])
    {
        list($response) = $this->addAdGroupsWithHttpInfo($AddAdGroupsRequest, $contentType);
        return $response;
    }

    /**
     * Operation addAdGroupsWithHttpInfo
     *
     * @param  \Microsoft\MsAds\Rest\Model\CampaignManagementService\AddAdGroupsRequest $AddAdGroupsRequest (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['addAdGroups'] to see the possible values for this operation
     *
     * @throws \Microsoft\MsAds\Rest\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \Microsoft\MsAds\Rest\Model\CampaignManagementService\AddAdGroupsResponse|\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault|\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault|\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault|\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault, HTTP status code, HTTP response headers (array of strings)
     */
    public function addAdGroupsWithHttpInfo($AddAdGroupsRequest, string $contentType = self::contentTypes['addAdGroups'][0])
    {
        $request = $this->addAdGroupsRequest($AddAdGroupsRequest, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                $response = $e->getResponse();
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            switch($statusCode) {
                case 200:
                    return $this->getResponseContent($request, $response, '\Microsoft\MsAds\Rest\Model\CampaignManagementService\AddAdGroupsResponse');
                case 400:
                    return $this->getResponseContent($request, $response, '\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault');
                case 500:
                    return $this->getResponseContent($request, $response, '\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault');
                case 401:
                    return $this->getResponseContent($request, $response, '\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault');
                case 403:
                    return $this->getResponseContent($request, $response, '\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault');
            }

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            $returnType = '\Microsoft\MsAds\Rest\Model\CampaignManagementService\AddAdGroupsResponse';
            return $this->getResponseContent($request, $response, $returnType);

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Microsoft\MsAds\Rest\Model\CampaignManagementService\AddAdGroupsResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 500:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 403:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation addAdGroupsAsync
     *
     * @param  \Microsoft\MsAds\Rest\Model\CampaignManagementService\AddAdGroupsRequest $AddAdGroupsRequest (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['addAdGroups'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function addAdGroupsAsync($AddAdGroupsRequest, string $contentType = self::contentTypes['addAdGroups'][0])
    {
        return $this->addAdGroupsAsyncWithHttpInfo($AddAdGroupsRequest, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation addAdGroupsAsyncWithHttpInfo
     *
     * @param  \Microsoft\MsAds\Rest\Model\CampaignManagementService\AddAdGroupsRequest $AddAdGroupsRequest (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['addAdGroups'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function addAdGroupsAsyncWithHttpInfo($AddAdGroupsRequest, string $contentType = self::contentTypes['addAdGroups'][0])
    {
        $returnType = '\Microsoft\MsAds\Rest\Model\CampaignManagementService\AddAdGroupsResponse';
        $request = $this->addAdGroupsRequest($AddAdGroupsRequest, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return $this->onFulfilledResponse($response, $returnType);
                },
                function ($exception) {
                    $this->onRejectedResponse($exception);
                }
            );
    }

    /**
     * Create request for operation 'addAdGroups'
     *
     * @param  \Microsoft\MsAds\Rest\Model\CampaignManagementService\AddAdGroupsRequest $AddAdGroupsRequest (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['addAdGroups'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function addAdGroupsRequest($AddAdGroupsRequest, string $contentType = self::contentTypes['addAdGroups'][0])
    {

        // verify the required parameter 'AddAdGroupsRequest' is set
        if ($AddAdGroupsRequest === null || (is_array($AddAdGroupsRequest) && count($AddAdGroupsRequest) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $AddAdGroupsRequest when calling addAdGroups'
            );
        }


        $resourcePath = '/CampaignManagement/v13/AdGroups';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $multipart = false;

        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        return $this->setupAndSendRequest(
            'POST',
            $resourcePath,
            $headers,
            $headerParams,
            $AddAdGroupsRequest,
            $formParams,
            $multipart,
            true,
            true,
            false,
            'getHostSettingsForaddAdGroups',
            null,
            [],
            $queryParams
        );
    }

    /**
     * Operation addAds
     *
     * @param  \Microsoft\MsAds\Rest\Model\CampaignManagementService\AddAdsRequest $AddAdsRequest AddAdsRequest (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['addAds'] to see the possible values for this operation
     *
     * @throws \Microsoft\MsAds\Rest\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \Microsoft\MsAds\Rest\Model\CampaignManagementService\AddAdsResponse|\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault|\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault|\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault|\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault
     */
    public function addAds($AddAdsRequest, string $contentType = self::contentTypes['addAds'][0])
    {
        list($response) = $this->addAdsWithHttpInfo($AddAdsRequest, $contentType);
        return $response;
    }

    /**
     * Operation addAdsWithHttpInfo
     *
     * @param  \Microsoft\MsAds\Rest\Model\CampaignManagementService\AddAdsRequest $AddAdsRequest (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['addAds'] to see the possible values for this operation
     *
     * @throws \Microsoft\MsAds\Rest\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \Microsoft\MsAds\Rest\Model\CampaignManagementService\AddAdsResponse|\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault|\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault|\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault|\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault, HTTP status code, HTTP response headers (array of strings)
     */
    public function addAdsWithHttpInfo($AddAdsRequest, string $contentType = self::contentTypes['addAds'][0])
    {
        $request = $this->addAdsRequest($AddAdsRequest, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                $response = $e->getResponse();
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            switch($statusCode) {
                case 200:
                    return $this->getResponseContent($request, $response, '\Microsoft\MsAds\Rest\Model\CampaignManagementService\AddAdsResponse');
                case 400:
                    return $this->getResponseContent($request, $response, '\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault');
                case 500:
                    return $this->getResponseContent($request, $response, '\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault');
                case 401:
                    return $this->getResponseContent($request, $response, '\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault');
                case 403:
                    return $this->getResponseContent($request, $response, '\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault');
            }

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            $returnType = '\Microsoft\MsAds\Rest\Model\CampaignManagementService\AddAdsResponse';
            return $this->getResponseContent($request, $response, $returnType);

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Microsoft\MsAds\Rest\Model\CampaignManagementService\AddAdsResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 500:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 403:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation addAdsAsync
     *
     * @param  \Microsoft\MsAds\Rest\Model\CampaignManagementService\AddAdsRequest $AddAdsRequest (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['addAds'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function addAdsAsync($AddAdsRequest, string $contentType = self::contentTypes['addAds'][0])
    {
        return $this->addAdsAsyncWithHttpInfo($AddAdsRequest, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation addAdsAsyncWithHttpInfo
     *
     * @param  \Microsoft\MsAds\Rest\Model\CampaignManagementService\AddAdsRequest $AddAdsRequest (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['addAds'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function addAdsAsyncWithHttpInfo($AddAdsRequest, string $contentType = self::contentTypes['addAds'][0])
    {
        $returnType = '\Microsoft\MsAds\Rest\Model\CampaignManagementService\AddAdsResponse';
        $request = $this->addAdsRequest($AddAdsRequest, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return $this->onFulfilledResponse($response, $returnType);
                },
                function ($exception) {
                    $this->onRejectedResponse($exception);
                }
            );
    }

    /**
     * Create request for operation 'addAds'
     *
     * @param  \Microsoft\MsAds\Rest\Model\CampaignManagementService\AddAdsRequest $AddAdsRequest (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['addAds'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function addAdsRequest($AddAdsRequest, string $contentType = self::contentTypes['addAds'][0])
    {

        // verify the required parameter 'AddAdsRequest' is set
        if ($AddAdsRequest === null || (is_array($AddAdsRequest) && count($AddAdsRequest) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $AddAdsRequest when calling addAds'
            );
        }


        $resourcePath = '/CampaignManagement/v13/Ads';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $multipart = false;

        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        return $this->setupAndSendRequest(
            'POST',
            $resourcePath,
            $headers,
            $headerParams,
            $AddAdsRequest,
            $formParams,
            $multipart,
            true,
            true,
            false,
            'getHostSettingsForaddAds',
            null,
            [],
            $queryParams
        );
    }

    /**
     * Operation addAssetGroups
     *
     * @param  \Microsoft\MsAds\Rest\Model\CampaignManagementService\AddAssetGroupsRequest $AddAssetGroupsRequest AddAssetGroupsRequest (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['addAssetGroups'] to see the possible values for this operation
     *
     * @throws \Microsoft\MsAds\Rest\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \Microsoft\MsAds\Rest\Model\CampaignManagementService\AddAssetGroupsResponse|\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault|\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault|\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault|\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault
     */
    public function addAssetGroups($AddAssetGroupsRequest, string $contentType = self::contentTypes['addAssetGroups'][0])
    {
        list($response) = $this->addAssetGroupsWithHttpInfo($AddAssetGroupsRequest, $contentType);
        return $response;
    }

    /**
     * Operation addAssetGroupsWithHttpInfo
     *
     * @param  \Microsoft\MsAds\Rest\Model\CampaignManagementService\AddAssetGroupsRequest $AddAssetGroupsRequest (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['addAssetGroups'] to see the possible values for this operation
     *
     * @throws \Microsoft\MsAds\Rest\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \Microsoft\MsAds\Rest\Model\CampaignManagementService\AddAssetGroupsResponse|\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault|\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault|\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault|\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault, HTTP status code, HTTP response headers (array of strings)
     */
    public function addAssetGroupsWithHttpInfo($AddAssetGroupsRequest, string $contentType = self::contentTypes['addAssetGroups'][0])
    {
        $request = $this->addAssetGroupsRequest($AddAssetGroupsRequest, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                $response = $e->getResponse();
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            switch($statusCode) {
                case 200:
                    return $this->getResponseContent($request, $response, '\Microsoft\MsAds\Rest\Model\CampaignManagementService\AddAssetGroupsResponse');
                case 400:
                    return $this->getResponseContent($request, $response, '\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault');
                case 500:
                    return $this->getResponseContent($request, $response, '\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault');
                case 401:
                    return $this->getResponseContent($request, $response, '\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault');
                case 403:
                    return $this->getResponseContent($request, $response, '\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault');
            }

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            $returnType = '\Microsoft\MsAds\Rest\Model\CampaignManagementService\AddAssetGroupsResponse';
            return $this->getResponseContent($request, $response, $returnType);

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Microsoft\MsAds\Rest\Model\CampaignManagementService\AddAssetGroupsResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 500:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 403:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation addAssetGroupsAsync
     *
     * @param  \Microsoft\MsAds\Rest\Model\CampaignManagementService\AddAssetGroupsRequest $AddAssetGroupsRequest (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['addAssetGroups'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function addAssetGroupsAsync($AddAssetGroupsRequest, string $contentType = self::contentTypes['addAssetGroups'][0])
    {
        return $this->addAssetGroupsAsyncWithHttpInfo($AddAssetGroupsRequest, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation addAssetGroupsAsyncWithHttpInfo
     *
     * @param  \Microsoft\MsAds\Rest\Model\CampaignManagementService\AddAssetGroupsRequest $AddAssetGroupsRequest (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['addAssetGroups'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function addAssetGroupsAsyncWithHttpInfo($AddAssetGroupsRequest, string $contentType = self::contentTypes['addAssetGroups'][0])
    {
        $returnType = '\Microsoft\MsAds\Rest\Model\CampaignManagementService\AddAssetGroupsResponse';
        $request = $this->addAssetGroupsRequest($AddAssetGroupsRequest, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return $this->onFulfilledResponse($response, $returnType);
                },
                function ($exception) {
                    $this->onRejectedResponse($exception);
                }
            );
    }

    /**
     * Create request for operation 'addAssetGroups'
     *
     * @param  \Microsoft\MsAds\Rest\Model\CampaignManagementService\AddAssetGroupsRequest $AddAssetGroupsRequest (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['addAssetGroups'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function addAssetGroupsRequest($AddAssetGroupsRequest, string $contentType = self::contentTypes['addAssetGroups'][0])
    {

        // verify the required parameter 'AddAssetGroupsRequest' is set
        if ($AddAssetGroupsRequest === null || (is_array($AddAssetGroupsRequest) && count($AddAssetGroupsRequest) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $AddAssetGroupsRequest when calling addAssetGroups'
            );
        }


        $resourcePath = '/CampaignManagement/v13/AssetGroups';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $multipart = false;

        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        return $this->setupAndSendRequest(
            'POST',
            $resourcePath,
            $headers,
            $headerParams,
            $AddAssetGroupsRequest,
            $formParams,
            $multipart,
            true,
            true,
            false,
            'getHostSettingsForaddAssetGroups',
            null,
            [],
            $queryParams
        );
    }

    /**
     * Operation addAudienceGroups
     *
     * @param  \Microsoft\MsAds\Rest\Model\CampaignManagementService\AddAudienceGroupsRequest $AddAudienceGroupsRequest AddAudienceGroupsRequest (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['addAudienceGroups'] to see the possible values for this operation
     *
     * @throws \Microsoft\MsAds\Rest\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \Microsoft\MsAds\Rest\Model\CampaignManagementService\AddAudienceGroupsResponse|\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault|\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault|\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault|\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault
     */
    public function addAudienceGroups($AddAudienceGroupsRequest, string $contentType = self::contentTypes['addAudienceGroups'][0])
    {
        list($response) = $this->addAudienceGroupsWithHttpInfo($AddAudienceGroupsRequest, $contentType);
        return $response;
    }

    /**
     * Operation addAudienceGroupsWithHttpInfo
     *
     * @param  \Microsoft\MsAds\Rest\Model\CampaignManagementService\AddAudienceGroupsRequest $AddAudienceGroupsRequest (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['addAudienceGroups'] to see the possible values for this operation
     *
     * @throws \Microsoft\MsAds\Rest\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \Microsoft\MsAds\Rest\Model\CampaignManagementService\AddAudienceGroupsResponse|\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault|\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault|\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault|\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault, HTTP status code, HTTP response headers (array of strings)
     */
    public function addAudienceGroupsWithHttpInfo($AddAudienceGroupsRequest, string $contentType = self::contentTypes['addAudienceGroups'][0])
    {
        $request = $this->addAudienceGroupsRequest($AddAudienceGroupsRequest, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                $response = $e->getResponse();
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            switch($statusCode) {
                case 200:
                    return $this->getResponseContent($request, $response, '\Microsoft\MsAds\Rest\Model\CampaignManagementService\AddAudienceGroupsResponse');
                case 400:
                    return $this->getResponseContent($request, $response, '\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault');
                case 500:
                    return $this->getResponseContent($request, $response, '\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault');
                case 401:
                    return $this->getResponseContent($request, $response, '\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault');
                case 403:
                    return $this->getResponseContent($request, $response, '\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault');
            }

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            $returnType = '\Microsoft\MsAds\Rest\Model\CampaignManagementService\AddAudienceGroupsResponse';
            return $this->getResponseContent($request, $response, $returnType);

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Microsoft\MsAds\Rest\Model\CampaignManagementService\AddAudienceGroupsResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 500:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 403:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation addAudienceGroupsAsync
     *
     * @param  \Microsoft\MsAds\Rest\Model\CampaignManagementService\AddAudienceGroupsRequest $AddAudienceGroupsRequest (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['addAudienceGroups'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function addAudienceGroupsAsync($AddAudienceGroupsRequest, string $contentType = self::contentTypes['addAudienceGroups'][0])
    {
        return $this->addAudienceGroupsAsyncWithHttpInfo($AddAudienceGroupsRequest, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation addAudienceGroupsAsyncWithHttpInfo
     *
     * @param  \Microsoft\MsAds\Rest\Model\CampaignManagementService\AddAudienceGroupsRequest $AddAudienceGroupsRequest (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['addAudienceGroups'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function addAudienceGroupsAsyncWithHttpInfo($AddAudienceGroupsRequest, string $contentType = self::contentTypes['addAudienceGroups'][0])
    {
        $returnType = '\Microsoft\MsAds\Rest\Model\CampaignManagementService\AddAudienceGroupsResponse';
        $request = $this->addAudienceGroupsRequest($AddAudienceGroupsRequest, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return $this->onFulfilledResponse($response, $returnType);
                },
                function ($exception) {
                    $this->onRejectedResponse($exception);
                }
            );
    }

    /**
     * Create request for operation 'addAudienceGroups'
     *
     * @param  \Microsoft\MsAds\Rest\Model\CampaignManagementService\AddAudienceGroupsRequest $AddAudienceGroupsRequest (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['addAudienceGroups'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function addAudienceGroupsRequest($AddAudienceGroupsRequest, string $contentType = self::contentTypes['addAudienceGroups'][0])
    {

        // verify the required parameter 'AddAudienceGroupsRequest' is set
        if ($AddAudienceGroupsRequest === null || (is_array($AddAudienceGroupsRequest) && count($AddAudienceGroupsRequest) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $AddAudienceGroupsRequest when calling addAudienceGroups'
            );
        }


        $resourcePath = '/CampaignManagement/v13/AudienceGroups';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $multipart = false;

        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        return $this->setupAndSendRequest(
            'POST',
            $resourcePath,
            $headers,
            $headerParams,
            $AddAudienceGroupsRequest,
            $formParams,
            $multipart,
            true,
            true,
            false,
            'getHostSettingsForaddAudienceGroups',
            null,
            [],
            $queryParams
        );
    }

    /**
     * Operation addAudiences
     *
     * @param  \Microsoft\MsAds\Rest\Model\CampaignManagementService\AddAudiencesRequest $AddAudiencesRequest AddAudiencesRequest (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['addAudiences'] to see the possible values for this operation
     *
     * @throws \Microsoft\MsAds\Rest\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \Microsoft\MsAds\Rest\Model\CampaignManagementService\AddAudiencesResponse|\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault|\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault|\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault|\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault
     */
    public function addAudiences($AddAudiencesRequest, string $contentType = self::contentTypes['addAudiences'][0])
    {
        list($response) = $this->addAudiencesWithHttpInfo($AddAudiencesRequest, $contentType);
        return $response;
    }

    /**
     * Operation addAudiencesWithHttpInfo
     *
     * @param  \Microsoft\MsAds\Rest\Model\CampaignManagementService\AddAudiencesRequest $AddAudiencesRequest (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['addAudiences'] to see the possible values for this operation
     *
     * @throws \Microsoft\MsAds\Rest\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \Microsoft\MsAds\Rest\Model\CampaignManagementService\AddAudiencesResponse|\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault|\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault|\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault|\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault, HTTP status code, HTTP response headers (array of strings)
     */
    public function addAudiencesWithHttpInfo($AddAudiencesRequest, string $contentType = self::contentTypes['addAudiences'][0])
    {
        $request = $this->addAudiencesRequest($AddAudiencesRequest, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                $response = $e->getResponse();
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            switch($statusCode) {
                case 200:
                    return $this->getResponseContent($request, $response, '\Microsoft\MsAds\Rest\Model\CampaignManagementService\AddAudiencesResponse');
                case 400:
                    return $this->getResponseContent($request, $response, '\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault');
                case 500:
                    return $this->getResponseContent($request, $response, '\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault');
                case 401:
                    return $this->getResponseContent($request, $response, '\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault');
                case 403:
                    return $this->getResponseContent($request, $response, '\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault');
            }

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            $returnType = '\Microsoft\MsAds\Rest\Model\CampaignManagementService\AddAudiencesResponse';
            return $this->getResponseContent($request, $response, $returnType);

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Microsoft\MsAds\Rest\Model\CampaignManagementService\AddAudiencesResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 500:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 403:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation addAudiencesAsync
     *
     * @param  \Microsoft\MsAds\Rest\Model\CampaignManagementService\AddAudiencesRequest $AddAudiencesRequest (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['addAudiences'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function addAudiencesAsync($AddAudiencesRequest, string $contentType = self::contentTypes['addAudiences'][0])
    {
        return $this->addAudiencesAsyncWithHttpInfo($AddAudiencesRequest, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation addAudiencesAsyncWithHttpInfo
     *
     * @param  \Microsoft\MsAds\Rest\Model\CampaignManagementService\AddAudiencesRequest $AddAudiencesRequest (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['addAudiences'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function addAudiencesAsyncWithHttpInfo($AddAudiencesRequest, string $contentType = self::contentTypes['addAudiences'][0])
    {
        $returnType = '\Microsoft\MsAds\Rest\Model\CampaignManagementService\AddAudiencesResponse';
        $request = $this->addAudiencesRequest($AddAudiencesRequest, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return $this->onFulfilledResponse($response, $returnType);
                },
                function ($exception) {
                    $this->onRejectedResponse($exception);
                }
            );
    }

    /**
     * Create request for operation 'addAudiences'
     *
     * @param  \Microsoft\MsAds\Rest\Model\CampaignManagementService\AddAudiencesRequest $AddAudiencesRequest (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['addAudiences'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function addAudiencesRequest($AddAudiencesRequest, string $contentType = self::contentTypes['addAudiences'][0])
    {

        // verify the required parameter 'AddAudiencesRequest' is set
        if ($AddAudiencesRequest === null || (is_array($AddAudiencesRequest) && count($AddAudiencesRequest) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $AddAudiencesRequest when calling addAudiences'
            );
        }


        $resourcePath = '/CampaignManagement/v13/Audiences';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $multipart = false;

        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        return $this->setupAndSendRequest(
            'POST',
            $resourcePath,
            $headers,
            $headerParams,
            $AddAudiencesRequest,
            $formParams,
            $multipart,
            true,
            true,
            false,
            'getHostSettingsForaddAudiences',
            null,
            [],
            $queryParams
        );
    }

    /**
     * Operation addBidStrategies
     *
     * @param  \Microsoft\MsAds\Rest\Model\CampaignManagementService\AddBidStrategiesRequest $AddBidStrategiesRequest AddBidStrategiesRequest (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['addBidStrategies'] to see the possible values for this operation
     *
     * @throws \Microsoft\MsAds\Rest\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \Microsoft\MsAds\Rest\Model\CampaignManagementService\AddBidStrategiesResponse|\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault|\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault|\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault|\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault
     */
    public function addBidStrategies($AddBidStrategiesRequest, string $contentType = self::contentTypes['addBidStrategies'][0])
    {
        list($response) = $this->addBidStrategiesWithHttpInfo($AddBidStrategiesRequest, $contentType);
        return $response;
    }

    /**
     * Operation addBidStrategiesWithHttpInfo
     *
     * @param  \Microsoft\MsAds\Rest\Model\CampaignManagementService\AddBidStrategiesRequest $AddBidStrategiesRequest (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['addBidStrategies'] to see the possible values for this operation
     *
     * @throws \Microsoft\MsAds\Rest\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \Microsoft\MsAds\Rest\Model\CampaignManagementService\AddBidStrategiesResponse|\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault|\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault|\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault|\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault, HTTP status code, HTTP response headers (array of strings)
     */
    public function addBidStrategiesWithHttpInfo($AddBidStrategiesRequest, string $contentType = self::contentTypes['addBidStrategies'][0])
    {
        $request = $this->addBidStrategiesRequest($AddBidStrategiesRequest, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                $response = $e->getResponse();
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            switch($statusCode) {
                case 200:
                    return $this->getResponseContent($request, $response, '\Microsoft\MsAds\Rest\Model\CampaignManagementService\AddBidStrategiesResponse');
                case 400:
                    return $this->getResponseContent($request, $response, '\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault');
                case 500:
                    return $this->getResponseContent($request, $response, '\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault');
                case 401:
                    return $this->getResponseContent($request, $response, '\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault');
                case 403:
                    return $this->getResponseContent($request, $response, '\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault');
            }

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            $returnType = '\Microsoft\MsAds\Rest\Model\CampaignManagementService\AddBidStrategiesResponse';
            return $this->getResponseContent($request, $response, $returnType);

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Microsoft\MsAds\Rest\Model\CampaignManagementService\AddBidStrategiesResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 500:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 403:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation addBidStrategiesAsync
     *
     * @param  \Microsoft\MsAds\Rest\Model\CampaignManagementService\AddBidStrategiesRequest $AddBidStrategiesRequest (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['addBidStrategies'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function addBidStrategiesAsync($AddBidStrategiesRequest, string $contentType = self::contentTypes['addBidStrategies'][0])
    {
        return $this->addBidStrategiesAsyncWithHttpInfo($AddBidStrategiesRequest, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation addBidStrategiesAsyncWithHttpInfo
     *
     * @param  \Microsoft\MsAds\Rest\Model\CampaignManagementService\AddBidStrategiesRequest $AddBidStrategiesRequest (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['addBidStrategies'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function addBidStrategiesAsyncWithHttpInfo($AddBidStrategiesRequest, string $contentType = self::contentTypes['addBidStrategies'][0])
    {
        $returnType = '\Microsoft\MsAds\Rest\Model\CampaignManagementService\AddBidStrategiesResponse';
        $request = $this->addBidStrategiesRequest($AddBidStrategiesRequest, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return $this->onFulfilledResponse($response, $returnType);
                },
                function ($exception) {
                    $this->onRejectedResponse($exception);
                }
            );
    }

    /**
     * Create request for operation 'addBidStrategies'
     *
     * @param  \Microsoft\MsAds\Rest\Model\CampaignManagementService\AddBidStrategiesRequest $AddBidStrategiesRequest (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['addBidStrategies'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function addBidStrategiesRequest($AddBidStrategiesRequest, string $contentType = self::contentTypes['addBidStrategies'][0])
    {

        // verify the required parameter 'AddBidStrategiesRequest' is set
        if ($AddBidStrategiesRequest === null || (is_array($AddBidStrategiesRequest) && count($AddBidStrategiesRequest) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $AddBidStrategiesRequest when calling addBidStrategies'
            );
        }


        $resourcePath = '/CampaignManagement/v13/BidStrategies';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $multipart = false;

        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        return $this->setupAndSendRequest(
            'POST',
            $resourcePath,
            $headers,
            $headerParams,
            $AddBidStrategiesRequest,
            $formParams,
            $multipart,
            true,
            true,
            false,
            'getHostSettingsForaddBidStrategies',
            null,
            [],
            $queryParams
        );
    }

    /**
     * Operation addBrandKits
     *
     * @param  \Microsoft\MsAds\Rest\Model\CampaignManagementService\AddBrandKitsRequest $AddBrandKitsRequest AddBrandKitsRequest (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['addBrandKits'] to see the possible values for this operation
     *
     * @throws \Microsoft\MsAds\Rest\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \Microsoft\MsAds\Rest\Model\CampaignManagementService\AddBrandKitsResponse|\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault|\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault|\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault|\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault
     */
    public function addBrandKits($AddBrandKitsRequest, string $contentType = self::contentTypes['addBrandKits'][0])
    {
        list($response) = $this->addBrandKitsWithHttpInfo($AddBrandKitsRequest, $contentType);
        return $response;
    }

    /**
     * Operation addBrandKitsWithHttpInfo
     *
     * @param  \Microsoft\MsAds\Rest\Model\CampaignManagementService\AddBrandKitsRequest $AddBrandKitsRequest (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['addBrandKits'] to see the possible values for this operation
     *
     * @throws \Microsoft\MsAds\Rest\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \Microsoft\MsAds\Rest\Model\CampaignManagementService\AddBrandKitsResponse|\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault|\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault|\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault|\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault, HTTP status code, HTTP response headers (array of strings)
     */
    public function addBrandKitsWithHttpInfo($AddBrandKitsRequest, string $contentType = self::contentTypes['addBrandKits'][0])
    {
        $request = $this->addBrandKitsRequest($AddBrandKitsRequest, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                $response = $e->getResponse();
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            switch($statusCode) {
                case 200:
                    return $this->getResponseContent($request, $response, '\Microsoft\MsAds\Rest\Model\CampaignManagementService\AddBrandKitsResponse');
                case 400:
                    return $this->getResponseContent($request, $response, '\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault');
                case 500:
                    return $this->getResponseContent($request, $response, '\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault');
                case 401:
                    return $this->getResponseContent($request, $response, '\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault');
                case 403:
                    return $this->getResponseContent($request, $response, '\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault');
            }

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            $returnType = '\Microsoft\MsAds\Rest\Model\CampaignManagementService\AddBrandKitsResponse';
            return $this->getResponseContent($request, $response, $returnType);

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Microsoft\MsAds\Rest\Model\CampaignManagementService\AddBrandKitsResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 500:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 403:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation addBrandKitsAsync
     *
     * @param  \Microsoft\MsAds\Rest\Model\CampaignManagementService\AddBrandKitsRequest $AddBrandKitsRequest (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['addBrandKits'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function addBrandKitsAsync($AddBrandKitsRequest, string $contentType = self::contentTypes['addBrandKits'][0])
    {
        return $this->addBrandKitsAsyncWithHttpInfo($AddBrandKitsRequest, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation addBrandKitsAsyncWithHttpInfo
     *
     * @param  \Microsoft\MsAds\Rest\Model\CampaignManagementService\AddBrandKitsRequest $AddBrandKitsRequest (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['addBrandKits'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function addBrandKitsAsyncWithHttpInfo($AddBrandKitsRequest, string $contentType = self::contentTypes['addBrandKits'][0])
    {
        $returnType = '\Microsoft\MsAds\Rest\Model\CampaignManagementService\AddBrandKitsResponse';
        $request = $this->addBrandKitsRequest($AddBrandKitsRequest, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return $this->onFulfilledResponse($response, $returnType);
                },
                function ($exception) {
                    $this->onRejectedResponse($exception);
                }
            );
    }

    /**
     * Create request for operation 'addBrandKits'
     *
     * @param  \Microsoft\MsAds\Rest\Model\CampaignManagementService\AddBrandKitsRequest $AddBrandKitsRequest (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['addBrandKits'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function addBrandKitsRequest($AddBrandKitsRequest, string $contentType = self::contentTypes['addBrandKits'][0])
    {

        // verify the required parameter 'AddBrandKitsRequest' is set
        if ($AddBrandKitsRequest === null || (is_array($AddBrandKitsRequest) && count($AddBrandKitsRequest) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $AddBrandKitsRequest when calling addBrandKits'
            );
        }


        $resourcePath = '/CampaignManagement/v13/BrandKits';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $multipart = false;

        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        return $this->setupAndSendRequest(
            'POST',
            $resourcePath,
            $headers,
            $headerParams,
            $AddBrandKitsRequest,
            $formParams,
            $multipart,
            true,
            true,
            false,
            'getHostSettingsForaddBrandKits',
            null,
            [],
            $queryParams
        );
    }

    /**
     * Operation addBudgets
     *
     * @param  \Microsoft\MsAds\Rest\Model\CampaignManagementService\AddBudgetsRequest $AddBudgetsRequest AddBudgetsRequest (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['addBudgets'] to see the possible values for this operation
     *
     * @throws \Microsoft\MsAds\Rest\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \Microsoft\MsAds\Rest\Model\CampaignManagementService\AddBudgetsResponse|\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault|\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault|\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault|\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault
     */
    public function addBudgets($AddBudgetsRequest, string $contentType = self::contentTypes['addBudgets'][0])
    {
        list($response) = $this->addBudgetsWithHttpInfo($AddBudgetsRequest, $contentType);
        return $response;
    }

    /**
     * Operation addBudgetsWithHttpInfo
     *
     * @param  \Microsoft\MsAds\Rest\Model\CampaignManagementService\AddBudgetsRequest $AddBudgetsRequest (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['addBudgets'] to see the possible values for this operation
     *
     * @throws \Microsoft\MsAds\Rest\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \Microsoft\MsAds\Rest\Model\CampaignManagementService\AddBudgetsResponse|\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault|\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault|\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault|\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault, HTTP status code, HTTP response headers (array of strings)
     */
    public function addBudgetsWithHttpInfo($AddBudgetsRequest, string $contentType = self::contentTypes['addBudgets'][0])
    {
        $request = $this->addBudgetsRequest($AddBudgetsRequest, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                $response = $e->getResponse();
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            switch($statusCode) {
                case 200:
                    return $this->getResponseContent($request, $response, '\Microsoft\MsAds\Rest\Model\CampaignManagementService\AddBudgetsResponse');
                case 400:
                    return $this->getResponseContent($request, $response, '\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault');
                case 500:
                    return $this->getResponseContent($request, $response, '\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault');
                case 401:
                    return $this->getResponseContent($request, $response, '\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault');
                case 403:
                    return $this->getResponseContent($request, $response, '\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault');
            }

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            $returnType = '\Microsoft\MsAds\Rest\Model\CampaignManagementService\AddBudgetsResponse';
            return $this->getResponseContent($request, $response, $returnType);

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Microsoft\MsAds\Rest\Model\CampaignManagementService\AddBudgetsResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 500:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 403:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation addBudgetsAsync
     *
     * @param  \Microsoft\MsAds\Rest\Model\CampaignManagementService\AddBudgetsRequest $AddBudgetsRequest (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['addBudgets'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function addBudgetsAsync($AddBudgetsRequest, string $contentType = self::contentTypes['addBudgets'][0])
    {
        return $this->addBudgetsAsyncWithHttpInfo($AddBudgetsRequest, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation addBudgetsAsyncWithHttpInfo
     *
     * @param  \Microsoft\MsAds\Rest\Model\CampaignManagementService\AddBudgetsRequest $AddBudgetsRequest (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['addBudgets'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function addBudgetsAsyncWithHttpInfo($AddBudgetsRequest, string $contentType = self::contentTypes['addBudgets'][0])
    {
        $returnType = '\Microsoft\MsAds\Rest\Model\CampaignManagementService\AddBudgetsResponse';
        $request = $this->addBudgetsRequest($AddBudgetsRequest, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return $this->onFulfilledResponse($response, $returnType);
                },
                function ($exception) {
                    $this->onRejectedResponse($exception);
                }
            );
    }

    /**
     * Create request for operation 'addBudgets'
     *
     * @param  \Microsoft\MsAds\Rest\Model\CampaignManagementService\AddBudgetsRequest $AddBudgetsRequest (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['addBudgets'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function addBudgetsRequest($AddBudgetsRequest, string $contentType = self::contentTypes['addBudgets'][0])
    {

        // verify the required parameter 'AddBudgetsRequest' is set
        if ($AddBudgetsRequest === null || (is_array($AddBudgetsRequest) && count($AddBudgetsRequest) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $AddBudgetsRequest when calling addBudgets'
            );
        }


        $resourcePath = '/CampaignManagement/v13/Budgets';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $multipart = false;

        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        return $this->setupAndSendRequest(
            'POST',
            $resourcePath,
            $headers,
            $headerParams,
            $AddBudgetsRequest,
            $formParams,
            $multipart,
            true,
            true,
            false,
            'getHostSettingsForaddBudgets',
            null,
            [],
            $queryParams
        );
    }

    /**
     * Operation addCampaignConversionGoals
     *
     * @param  \Microsoft\MsAds\Rest\Model\CampaignManagementService\AddCampaignConversionGoalsRequest $AddCampaignConversionGoalsRequest AddCampaignConversionGoalsRequest (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['addCampaignConversionGoals'] to see the possible values for this operation
     *
     * @throws \Microsoft\MsAds\Rest\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \Microsoft\MsAds\Rest\Model\CampaignManagementService\AddCampaignConversionGoalsResponse|\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault|\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault|\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault|\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault
     */
    public function addCampaignConversionGoals($AddCampaignConversionGoalsRequest, string $contentType = self::contentTypes['addCampaignConversionGoals'][0])
    {
        list($response) = $this->addCampaignConversionGoalsWithHttpInfo($AddCampaignConversionGoalsRequest, $contentType);
        return $response;
    }

    /**
     * Operation addCampaignConversionGoalsWithHttpInfo
     *
     * @param  \Microsoft\MsAds\Rest\Model\CampaignManagementService\AddCampaignConversionGoalsRequest $AddCampaignConversionGoalsRequest (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['addCampaignConversionGoals'] to see the possible values for this operation
     *
     * @throws \Microsoft\MsAds\Rest\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \Microsoft\MsAds\Rest\Model\CampaignManagementService\AddCampaignConversionGoalsResponse|\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault|\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault|\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault|\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault, HTTP status code, HTTP response headers (array of strings)
     */
    public function addCampaignConversionGoalsWithHttpInfo($AddCampaignConversionGoalsRequest, string $contentType = self::contentTypes['addCampaignConversionGoals'][0])
    {
        $request = $this->addCampaignConversionGoalsRequest($AddCampaignConversionGoalsRequest, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                $response = $e->getResponse();
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            switch($statusCode) {
                case 200:
                    return $this->getResponseContent($request, $response, '\Microsoft\MsAds\Rest\Model\CampaignManagementService\AddCampaignConversionGoalsResponse');
                case 400:
                    return $this->getResponseContent($request, $response, '\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault');
                case 500:
                    return $this->getResponseContent($request, $response, '\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault');
                case 401:
                    return $this->getResponseContent($request, $response, '\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault');
                case 403:
                    return $this->getResponseContent($request, $response, '\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault');
            }

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            $returnType = '\Microsoft\MsAds\Rest\Model\CampaignManagementService\AddCampaignConversionGoalsResponse';
            return $this->getResponseContent($request, $response, $returnType);

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Microsoft\MsAds\Rest\Model\CampaignManagementService\AddCampaignConversionGoalsResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 500:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 403:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation addCampaignConversionGoalsAsync
     *
     * @param  \Microsoft\MsAds\Rest\Model\CampaignManagementService\AddCampaignConversionGoalsRequest $AddCampaignConversionGoalsRequest (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['addCampaignConversionGoals'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function addCampaignConversionGoalsAsync($AddCampaignConversionGoalsRequest, string $contentType = self::contentTypes['addCampaignConversionGoals'][0])
    {
        return $this->addCampaignConversionGoalsAsyncWithHttpInfo($AddCampaignConversionGoalsRequest, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation addCampaignConversionGoalsAsyncWithHttpInfo
     *
     * @param  \Microsoft\MsAds\Rest\Model\CampaignManagementService\AddCampaignConversionGoalsRequest $AddCampaignConversionGoalsRequest (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['addCampaignConversionGoals'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function addCampaignConversionGoalsAsyncWithHttpInfo($AddCampaignConversionGoalsRequest, string $contentType = self::contentTypes['addCampaignConversionGoals'][0])
    {
        $returnType = '\Microsoft\MsAds\Rest\Model\CampaignManagementService\AddCampaignConversionGoalsResponse';
        $request = $this->addCampaignConversionGoalsRequest($AddCampaignConversionGoalsRequest, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return $this->onFulfilledResponse($response, $returnType);
                },
                function ($exception) {
                    $this->onRejectedResponse($exception);
                }
            );
    }

    /**
     * Create request for operation 'addCampaignConversionGoals'
     *
     * @param  \Microsoft\MsAds\Rest\Model\CampaignManagementService\AddCampaignConversionGoalsRequest $AddCampaignConversionGoalsRequest (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['addCampaignConversionGoals'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function addCampaignConversionGoalsRequest($AddCampaignConversionGoalsRequest, string $contentType = self::contentTypes['addCampaignConversionGoals'][0])
    {

        // verify the required parameter 'AddCampaignConversionGoalsRequest' is set
        if ($AddCampaignConversionGoalsRequest === null || (is_array($AddCampaignConversionGoalsRequest) && count($AddCampaignConversionGoalsRequest) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $AddCampaignConversionGoalsRequest when calling addCampaignConversionGoals'
            );
        }


        $resourcePath = '/CampaignManagement/v13/CampaignConversionGoals';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $multipart = false;

        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        return $this->setupAndSendRequest(
            'POST',
            $resourcePath,
            $headers,
            $headerParams,
            $AddCampaignConversionGoalsRequest,
            $formParams,
            $multipart,
            true,
            true,
            false,
            'getHostSettingsForaddCampaignConversionGoals',
            null,
            [],
            $queryParams
        );
    }

    /**
     * Operation addCampaignCriterions
     *
     * @param  \Microsoft\MsAds\Rest\Model\CampaignManagementService\AddCampaignCriterionsRequest $AddCampaignCriterionsRequest AddCampaignCriterionsRequest (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['addCampaignCriterions'] to see the possible values for this operation
     *
     * @throws \Microsoft\MsAds\Rest\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \Microsoft\MsAds\Rest\Model\CampaignManagementService\AddCampaignCriterionsResponse|\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault|\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault|\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault|\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault
     */
    public function addCampaignCriterions($AddCampaignCriterionsRequest, string $contentType = self::contentTypes['addCampaignCriterions'][0])
    {
        list($response) = $this->addCampaignCriterionsWithHttpInfo($AddCampaignCriterionsRequest, $contentType);
        return $response;
    }

    /**
     * Operation addCampaignCriterionsWithHttpInfo
     *
     * @param  \Microsoft\MsAds\Rest\Model\CampaignManagementService\AddCampaignCriterionsRequest $AddCampaignCriterionsRequest (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['addCampaignCriterions'] to see the possible values for this operation
     *
     * @throws \Microsoft\MsAds\Rest\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \Microsoft\MsAds\Rest\Model\CampaignManagementService\AddCampaignCriterionsResponse|\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault|\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault|\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault|\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault, HTTP status code, HTTP response headers (array of strings)
     */
    public function addCampaignCriterionsWithHttpInfo($AddCampaignCriterionsRequest, string $contentType = self::contentTypes['addCampaignCriterions'][0])
    {
        $request = $this->addCampaignCriterionsRequest($AddCampaignCriterionsRequest, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                $response = $e->getResponse();
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            switch($statusCode) {
                case 200:
                    return $this->getResponseContent($request, $response, '\Microsoft\MsAds\Rest\Model\CampaignManagementService\AddCampaignCriterionsResponse');
                case 400:
                    return $this->getResponseContent($request, $response, '\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault');
                case 500:
                    return $this->getResponseContent($request, $response, '\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault');
                case 401:
                    return $this->getResponseContent($request, $response, '\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault');
                case 403:
                    return $this->getResponseContent($request, $response, '\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault');
            }

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            $returnType = '\Microsoft\MsAds\Rest\Model\CampaignManagementService\AddCampaignCriterionsResponse';
            return $this->getResponseContent($request, $response, $returnType);

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Microsoft\MsAds\Rest\Model\CampaignManagementService\AddCampaignCriterionsResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 500:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 403:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation addCampaignCriterionsAsync
     *
     * @param  \Microsoft\MsAds\Rest\Model\CampaignManagementService\AddCampaignCriterionsRequest $AddCampaignCriterionsRequest (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['addCampaignCriterions'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function addCampaignCriterionsAsync($AddCampaignCriterionsRequest, string $contentType = self::contentTypes['addCampaignCriterions'][0])
    {
        return $this->addCampaignCriterionsAsyncWithHttpInfo($AddCampaignCriterionsRequest, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation addCampaignCriterionsAsyncWithHttpInfo
     *
     * @param  \Microsoft\MsAds\Rest\Model\CampaignManagementService\AddCampaignCriterionsRequest $AddCampaignCriterionsRequest (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['addCampaignCriterions'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function addCampaignCriterionsAsyncWithHttpInfo($AddCampaignCriterionsRequest, string $contentType = self::contentTypes['addCampaignCriterions'][0])
    {
        $returnType = '\Microsoft\MsAds\Rest\Model\CampaignManagementService\AddCampaignCriterionsResponse';
        $request = $this->addCampaignCriterionsRequest($AddCampaignCriterionsRequest, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return $this->onFulfilledResponse($response, $returnType);
                },
                function ($exception) {
                    $this->onRejectedResponse($exception);
                }
            );
    }

    /**
     * Create request for operation 'addCampaignCriterions'
     *
     * @param  \Microsoft\MsAds\Rest\Model\CampaignManagementService\AddCampaignCriterionsRequest $AddCampaignCriterionsRequest (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['addCampaignCriterions'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function addCampaignCriterionsRequest($AddCampaignCriterionsRequest, string $contentType = self::contentTypes['addCampaignCriterions'][0])
    {

        // verify the required parameter 'AddCampaignCriterionsRequest' is set
        if ($AddCampaignCriterionsRequest === null || (is_array($AddCampaignCriterionsRequest) && count($AddCampaignCriterionsRequest) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $AddCampaignCriterionsRequest when calling addCampaignCriterions'
            );
        }


        $resourcePath = '/CampaignManagement/v13/CampaignCriterions';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $multipart = false;

        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        return $this->setupAndSendRequest(
            'POST',
            $resourcePath,
            $headers,
            $headerParams,
            $AddCampaignCriterionsRequest,
            $formParams,
            $multipart,
            true,
            true,
            false,
            'getHostSettingsForaddCampaignCriterions',
            null,
            [],
            $queryParams
        );
    }

    /**
     * Operation addCampaigns
     *
     * @param  \Microsoft\MsAds\Rest\Model\CampaignManagementService\AddCampaignsRequest $AddCampaignsRequest AddCampaignsRequest (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['addCampaigns'] to see the possible values for this operation
     *
     * @throws \Microsoft\MsAds\Rest\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \Microsoft\MsAds\Rest\Model\CampaignManagementService\AddCampaignsResponse|\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault|\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault|\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault|\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault
     */
    public function addCampaigns($AddCampaignsRequest, string $contentType = self::contentTypes['addCampaigns'][0])
    {
        list($response) = $this->addCampaignsWithHttpInfo($AddCampaignsRequest, $contentType);
        return $response;
    }

    /**
     * Operation addCampaignsWithHttpInfo
     *
     * @param  \Microsoft\MsAds\Rest\Model\CampaignManagementService\AddCampaignsRequest $AddCampaignsRequest (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['addCampaigns'] to see the possible values for this operation
     *
     * @throws \Microsoft\MsAds\Rest\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \Microsoft\MsAds\Rest\Model\CampaignManagementService\AddCampaignsResponse|\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault|\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault|\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault|\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault, HTTP status code, HTTP response headers (array of strings)
     */
    public function addCampaignsWithHttpInfo($AddCampaignsRequest, string $contentType = self::contentTypes['addCampaigns'][0])
    {
        $request = $this->addCampaignsRequest($AddCampaignsRequest, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                $response = $e->getResponse();
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            switch($statusCode) {
                case 200:
                    return $this->getResponseContent($request, $response, '\Microsoft\MsAds\Rest\Model\CampaignManagementService\AddCampaignsResponse');
                case 400:
                    return $this->getResponseContent($request, $response, '\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault');
                case 500:
                    return $this->getResponseContent($request, $response, '\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault');
                case 401:
                    return $this->getResponseContent($request, $response, '\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault');
                case 403:
                    return $this->getResponseContent($request, $response, '\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault');
            }

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            $returnType = '\Microsoft\MsAds\Rest\Model\CampaignManagementService\AddCampaignsResponse';
            return $this->getResponseContent($request, $response, $returnType);

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Microsoft\MsAds\Rest\Model\CampaignManagementService\AddCampaignsResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 500:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 403:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation addCampaignsAsync
     *
     * @param  \Microsoft\MsAds\Rest\Model\CampaignManagementService\AddCampaignsRequest $AddCampaignsRequest (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['addCampaigns'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function addCampaignsAsync($AddCampaignsRequest, string $contentType = self::contentTypes['addCampaigns'][0])
    {
        return $this->addCampaignsAsyncWithHttpInfo($AddCampaignsRequest, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation addCampaignsAsyncWithHttpInfo
     *
     * @param  \Microsoft\MsAds\Rest\Model\CampaignManagementService\AddCampaignsRequest $AddCampaignsRequest (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['addCampaigns'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function addCampaignsAsyncWithHttpInfo($AddCampaignsRequest, string $contentType = self::contentTypes['addCampaigns'][0])
    {
        $returnType = '\Microsoft\MsAds\Rest\Model\CampaignManagementService\AddCampaignsResponse';
        $request = $this->addCampaignsRequest($AddCampaignsRequest, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return $this->onFulfilledResponse($response, $returnType);
                },
                function ($exception) {
                    $this->onRejectedResponse($exception);
                }
            );
    }

    /**
     * Create request for operation 'addCampaigns'
     *
     * @param  \Microsoft\MsAds\Rest\Model\CampaignManagementService\AddCampaignsRequest $AddCampaignsRequest (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['addCampaigns'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function addCampaignsRequest($AddCampaignsRequest, string $contentType = self::contentTypes['addCampaigns'][0])
    {

        // verify the required parameter 'AddCampaignsRequest' is set
        if ($AddCampaignsRequest === null || (is_array($AddCampaignsRequest) && count($AddCampaignsRequest) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $AddCampaignsRequest when calling addCampaigns'
            );
        }


        $resourcePath = '/CampaignManagement/v13/Campaigns';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $multipart = false;

        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        return $this->setupAndSendRequest(
            'POST',
            $resourcePath,
            $headers,
            $headerParams,
            $AddCampaignsRequest,
            $formParams,
            $multipart,
            true,
            true,
            false,
            'getHostSettingsForaddCampaigns',
            null,
            [],
            $queryParams
        );
    }

    /**
     * Operation addConversionGoals
     *
     * @param  \Microsoft\MsAds\Rest\Model\CampaignManagementService\AddConversionGoalsRequest $AddConversionGoalsRequest AddConversionGoalsRequest (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['addConversionGoals'] to see the possible values for this operation
     *
     * @throws \Microsoft\MsAds\Rest\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \Microsoft\MsAds\Rest\Model\CampaignManagementService\AddConversionGoalsResponse|\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault|\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault|\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault|\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault
     */
    public function addConversionGoals($AddConversionGoalsRequest, string $contentType = self::contentTypes['addConversionGoals'][0])
    {
        list($response) = $this->addConversionGoalsWithHttpInfo($AddConversionGoalsRequest, $contentType);
        return $response;
    }

    /**
     * Operation addConversionGoalsWithHttpInfo
     *
     * @param  \Microsoft\MsAds\Rest\Model\CampaignManagementService\AddConversionGoalsRequest $AddConversionGoalsRequest (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['addConversionGoals'] to see the possible values for this operation
     *
     * @throws \Microsoft\MsAds\Rest\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \Microsoft\MsAds\Rest\Model\CampaignManagementService\AddConversionGoalsResponse|\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault|\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault|\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault|\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault, HTTP status code, HTTP response headers (array of strings)
     */
    public function addConversionGoalsWithHttpInfo($AddConversionGoalsRequest, string $contentType = self::contentTypes['addConversionGoals'][0])
    {
        $request = $this->addConversionGoalsRequest($AddConversionGoalsRequest, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                $response = $e->getResponse();
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            switch($statusCode) {
                case 200:
                    return $this->getResponseContent($request, $response, '\Microsoft\MsAds\Rest\Model\CampaignManagementService\AddConversionGoalsResponse');
                case 400:
                    return $this->getResponseContent($request, $response, '\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault');
                case 500:
                    return $this->getResponseContent($request, $response, '\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault');
                case 401:
                    return $this->getResponseContent($request, $response, '\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault');
                case 403:
                    return $this->getResponseContent($request, $response, '\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault');
            }

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            $returnType = '\Microsoft\MsAds\Rest\Model\CampaignManagementService\AddConversionGoalsResponse';
            return $this->getResponseContent($request, $response, $returnType);

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Microsoft\MsAds\Rest\Model\CampaignManagementService\AddConversionGoalsResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 500:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 403:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation addConversionGoalsAsync
     *
     * @param  \Microsoft\MsAds\Rest\Model\CampaignManagementService\AddConversionGoalsRequest $AddConversionGoalsRequest (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['addConversionGoals'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function addConversionGoalsAsync($AddConversionGoalsRequest, string $contentType = self::contentTypes['addConversionGoals'][0])
    {
        return $this->addConversionGoalsAsyncWithHttpInfo($AddConversionGoalsRequest, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation addConversionGoalsAsyncWithHttpInfo
     *
     * @param  \Microsoft\MsAds\Rest\Model\CampaignManagementService\AddConversionGoalsRequest $AddConversionGoalsRequest (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['addConversionGoals'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function addConversionGoalsAsyncWithHttpInfo($AddConversionGoalsRequest, string $contentType = self::contentTypes['addConversionGoals'][0])
    {
        $returnType = '\Microsoft\MsAds\Rest\Model\CampaignManagementService\AddConversionGoalsResponse';
        $request = $this->addConversionGoalsRequest($AddConversionGoalsRequest, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return $this->onFulfilledResponse($response, $returnType);
                },
                function ($exception) {
                    $this->onRejectedResponse($exception);
                }
            );
    }

    /**
     * Create request for operation 'addConversionGoals'
     *
     * @param  \Microsoft\MsAds\Rest\Model\CampaignManagementService\AddConversionGoalsRequest $AddConversionGoalsRequest (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['addConversionGoals'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function addConversionGoalsRequest($AddConversionGoalsRequest, string $contentType = self::contentTypes['addConversionGoals'][0])
    {

        // verify the required parameter 'AddConversionGoalsRequest' is set
        if ($AddConversionGoalsRequest === null || (is_array($AddConversionGoalsRequest) && count($AddConversionGoalsRequest) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $AddConversionGoalsRequest when calling addConversionGoals'
            );
        }


        $resourcePath = '/CampaignManagement/v13/ConversionGoals';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $multipart = false;

        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        return $this->setupAndSendRequest(
            'POST',
            $resourcePath,
            $headers,
            $headerParams,
            $AddConversionGoalsRequest,
            $formParams,
            $multipart,
            true,
            true,
            false,
            'getHostSettingsForaddConversionGoals',
            null,
            [],
            $queryParams
        );
    }

    /**
     * Operation addConversionValueRules
     *
     * @param  \Microsoft\MsAds\Rest\Model\CampaignManagementService\AddConversionValueRulesRequest $AddConversionValueRulesRequest AddConversionValueRulesRequest (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['addConversionValueRules'] to see the possible values for this operation
     *
     * @throws \Microsoft\MsAds\Rest\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \Microsoft\MsAds\Rest\Model\CampaignManagementService\AddConversionValueRulesResponse|\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault|\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault|\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault|\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault
     */
    public function addConversionValueRules($AddConversionValueRulesRequest, string $contentType = self::contentTypes['addConversionValueRules'][0])
    {
        list($response) = $this->addConversionValueRulesWithHttpInfo($AddConversionValueRulesRequest, $contentType);
        return $response;
    }

    /**
     * Operation addConversionValueRulesWithHttpInfo
     *
     * @param  \Microsoft\MsAds\Rest\Model\CampaignManagementService\AddConversionValueRulesRequest $AddConversionValueRulesRequest (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['addConversionValueRules'] to see the possible values for this operation
     *
     * @throws \Microsoft\MsAds\Rest\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \Microsoft\MsAds\Rest\Model\CampaignManagementService\AddConversionValueRulesResponse|\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault|\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault|\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault|\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault, HTTP status code, HTTP response headers (array of strings)
     */
    public function addConversionValueRulesWithHttpInfo($AddConversionValueRulesRequest, string $contentType = self::contentTypes['addConversionValueRules'][0])
    {
        $request = $this->addConversionValueRulesRequest($AddConversionValueRulesRequest, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                $response = $e->getResponse();
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            switch($statusCode) {
                case 200:
                    return $this->getResponseContent($request, $response, '\Microsoft\MsAds\Rest\Model\CampaignManagementService\AddConversionValueRulesResponse');
                case 400:
                    return $this->getResponseContent($request, $response, '\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault');
                case 500:
                    return $this->getResponseContent($request, $response, '\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault');
                case 401:
                    return $this->getResponseContent($request, $response, '\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault');
                case 403:
                    return $this->getResponseContent($request, $response, '\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault');
            }

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            $returnType = '\Microsoft\MsAds\Rest\Model\CampaignManagementService\AddConversionValueRulesResponse';
            return $this->getResponseContent($request, $response, $returnType);

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Microsoft\MsAds\Rest\Model\CampaignManagementService\AddConversionValueRulesResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 500:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 403:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation addConversionValueRulesAsync
     *
     * @param  \Microsoft\MsAds\Rest\Model\CampaignManagementService\AddConversionValueRulesRequest $AddConversionValueRulesRequest (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['addConversionValueRules'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function addConversionValueRulesAsync($AddConversionValueRulesRequest, string $contentType = self::contentTypes['addConversionValueRules'][0])
    {
        return $this->addConversionValueRulesAsyncWithHttpInfo($AddConversionValueRulesRequest, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation addConversionValueRulesAsyncWithHttpInfo
     *
     * @param  \Microsoft\MsAds\Rest\Model\CampaignManagementService\AddConversionValueRulesRequest $AddConversionValueRulesRequest (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['addConversionValueRules'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function addConversionValueRulesAsyncWithHttpInfo($AddConversionValueRulesRequest, string $contentType = self::contentTypes['addConversionValueRules'][0])
    {
        $returnType = '\Microsoft\MsAds\Rest\Model\CampaignManagementService\AddConversionValueRulesResponse';
        $request = $this->addConversionValueRulesRequest($AddConversionValueRulesRequest, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return $this->onFulfilledResponse($response, $returnType);
                },
                function ($exception) {
                    $this->onRejectedResponse($exception);
                }
            );
    }

    /**
     * Create request for operation 'addConversionValueRules'
     *
     * @param  \Microsoft\MsAds\Rest\Model\CampaignManagementService\AddConversionValueRulesRequest $AddConversionValueRulesRequest (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['addConversionValueRules'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function addConversionValueRulesRequest($AddConversionValueRulesRequest, string $contentType = self::contentTypes['addConversionValueRules'][0])
    {

        // verify the required parameter 'AddConversionValueRulesRequest' is set
        if ($AddConversionValueRulesRequest === null || (is_array($AddConversionValueRulesRequest) && count($AddConversionValueRulesRequest) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $AddConversionValueRulesRequest when calling addConversionValueRules'
            );
        }


        $resourcePath = '/CampaignManagement/v13/ConversionValueRules';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $multipart = false;

        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        return $this->setupAndSendRequest(
            'POST',
            $resourcePath,
            $headers,
            $headerParams,
            $AddConversionValueRulesRequest,
            $formParams,
            $multipart,
            true,
            true,
            false,
            'getHostSettingsForaddConversionValueRules',
            null,
            [],
            $queryParams
        );
    }

    /**
     * Operation addDataExclusions
     *
     * @param  \Microsoft\MsAds\Rest\Model\CampaignManagementService\AddDataExclusionsRequest $AddDataExclusionsRequest AddDataExclusionsRequest (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['addDataExclusions'] to see the possible values for this operation
     *
     * @throws \Microsoft\MsAds\Rest\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \Microsoft\MsAds\Rest\Model\CampaignManagementService\AddDataExclusionsResponse|\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault|\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault|\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault|\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault
     */
    public function addDataExclusions($AddDataExclusionsRequest, string $contentType = self::contentTypes['addDataExclusions'][0])
    {
        list($response) = $this->addDataExclusionsWithHttpInfo($AddDataExclusionsRequest, $contentType);
        return $response;
    }

    /**
     * Operation addDataExclusionsWithHttpInfo
     *
     * @param  \Microsoft\MsAds\Rest\Model\CampaignManagementService\AddDataExclusionsRequest $AddDataExclusionsRequest (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['addDataExclusions'] to see the possible values for this operation
     *
     * @throws \Microsoft\MsAds\Rest\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \Microsoft\MsAds\Rest\Model\CampaignManagementService\AddDataExclusionsResponse|\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault|\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault|\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault|\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault, HTTP status code, HTTP response headers (array of strings)
     */
    public function addDataExclusionsWithHttpInfo($AddDataExclusionsRequest, string $contentType = self::contentTypes['addDataExclusions'][0])
    {
        $request = $this->addDataExclusionsRequest($AddDataExclusionsRequest, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                $response = $e->getResponse();
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            switch($statusCode) {
                case 200:
                    return $this->getResponseContent($request, $response, '\Microsoft\MsAds\Rest\Model\CampaignManagementService\AddDataExclusionsResponse');
                case 400:
                    return $this->getResponseContent($request, $response, '\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault');
                case 500:
                    return $this->getResponseContent($request, $response, '\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault');
                case 401:
                    return $this->getResponseContent($request, $response, '\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault');
                case 403:
                    return $this->getResponseContent($request, $response, '\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault');
            }

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            $returnType = '\Microsoft\MsAds\Rest\Model\CampaignManagementService\AddDataExclusionsResponse';
            return $this->getResponseContent($request, $response, $returnType);

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Microsoft\MsAds\Rest\Model\CampaignManagementService\AddDataExclusionsResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 500:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 403:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation addDataExclusionsAsync
     *
     * @param  \Microsoft\MsAds\Rest\Model\CampaignManagementService\AddDataExclusionsRequest $AddDataExclusionsRequest (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['addDataExclusions'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function addDataExclusionsAsync($AddDataExclusionsRequest, string $contentType = self::contentTypes['addDataExclusions'][0])
    {
        return $this->addDataExclusionsAsyncWithHttpInfo($AddDataExclusionsRequest, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation addDataExclusionsAsyncWithHttpInfo
     *
     * @param  \Microsoft\MsAds\Rest\Model\CampaignManagementService\AddDataExclusionsRequest $AddDataExclusionsRequest (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['addDataExclusions'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function addDataExclusionsAsyncWithHttpInfo($AddDataExclusionsRequest, string $contentType = self::contentTypes['addDataExclusions'][0])
    {
        $returnType = '\Microsoft\MsAds\Rest\Model\CampaignManagementService\AddDataExclusionsResponse';
        $request = $this->addDataExclusionsRequest($AddDataExclusionsRequest, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return $this->onFulfilledResponse($response, $returnType);
                },
                function ($exception) {
                    $this->onRejectedResponse($exception);
                }
            );
    }

    /**
     * Create request for operation 'addDataExclusions'
     *
     * @param  \Microsoft\MsAds\Rest\Model\CampaignManagementService\AddDataExclusionsRequest $AddDataExclusionsRequest (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['addDataExclusions'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function addDataExclusionsRequest($AddDataExclusionsRequest, string $contentType = self::contentTypes['addDataExclusions'][0])
    {

        // verify the required parameter 'AddDataExclusionsRequest' is set
        if ($AddDataExclusionsRequest === null || (is_array($AddDataExclusionsRequest) && count($AddDataExclusionsRequest) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $AddDataExclusionsRequest when calling addDataExclusions'
            );
        }


        $resourcePath = '/CampaignManagement/v13/DataExclusions';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $multipart = false;

        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        return $this->setupAndSendRequest(
            'POST',
            $resourcePath,
            $headers,
            $headerParams,
            $AddDataExclusionsRequest,
            $formParams,
            $multipart,
            true,
            true,
            false,
            'getHostSettingsForaddDataExclusions',
            null,
            [],
            $queryParams
        );
    }

    /**
     * Operation addExperiments
     *
     * @param  \Microsoft\MsAds\Rest\Model\CampaignManagementService\AddExperimentsRequest $AddExperimentsRequest AddExperimentsRequest (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['addExperiments'] to see the possible values for this operation
     *
     * @throws \Microsoft\MsAds\Rest\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \Microsoft\MsAds\Rest\Model\CampaignManagementService\AddExperimentsResponse|\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault|\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault|\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault|\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault
     */
    public function addExperiments($AddExperimentsRequest, string $contentType = self::contentTypes['addExperiments'][0])
    {
        list($response) = $this->addExperimentsWithHttpInfo($AddExperimentsRequest, $contentType);
        return $response;
    }

    /**
     * Operation addExperimentsWithHttpInfo
     *
     * @param  \Microsoft\MsAds\Rest\Model\CampaignManagementService\AddExperimentsRequest $AddExperimentsRequest (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['addExperiments'] to see the possible values for this operation
     *
     * @throws \Microsoft\MsAds\Rest\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \Microsoft\MsAds\Rest\Model\CampaignManagementService\AddExperimentsResponse|\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault|\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault|\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault|\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault, HTTP status code, HTTP response headers (array of strings)
     */
    public function addExperimentsWithHttpInfo($AddExperimentsRequest, string $contentType = self::contentTypes['addExperiments'][0])
    {
        $request = $this->addExperimentsRequest($AddExperimentsRequest, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                $response = $e->getResponse();
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            switch($statusCode) {
                case 200:
                    return $this->getResponseContent($request, $response, '\Microsoft\MsAds\Rest\Model\CampaignManagementService\AddExperimentsResponse');
                case 400:
                    return $this->getResponseContent($request, $response, '\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault');
                case 500:
                    return $this->getResponseContent($request, $response, '\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault');
                case 401:
                    return $this->getResponseContent($request, $response, '\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault');
                case 403:
                    return $this->getResponseContent($request, $response, '\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault');
            }

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            $returnType = '\Microsoft\MsAds\Rest\Model\CampaignManagementService\AddExperimentsResponse';
            return $this->getResponseContent($request, $response, $returnType);

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Microsoft\MsAds\Rest\Model\CampaignManagementService\AddExperimentsResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 500:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 403:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation addExperimentsAsync
     *
     * @param  \Microsoft\MsAds\Rest\Model\CampaignManagementService\AddExperimentsRequest $AddExperimentsRequest (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['addExperiments'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function addExperimentsAsync($AddExperimentsRequest, string $contentType = self::contentTypes['addExperiments'][0])
    {
        return $this->addExperimentsAsyncWithHttpInfo($AddExperimentsRequest, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation addExperimentsAsyncWithHttpInfo
     *
     * @param  \Microsoft\MsAds\Rest\Model\CampaignManagementService\AddExperimentsRequest $AddExperimentsRequest (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['addExperiments'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function addExperimentsAsyncWithHttpInfo($AddExperimentsRequest, string $contentType = self::contentTypes['addExperiments'][0])
    {
        $returnType = '\Microsoft\MsAds\Rest\Model\CampaignManagementService\AddExperimentsResponse';
        $request = $this->addExperimentsRequest($AddExperimentsRequest, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return $this->onFulfilledResponse($response, $returnType);
                },
                function ($exception) {
                    $this->onRejectedResponse($exception);
                }
            );
    }

    /**
     * Create request for operation 'addExperiments'
     *
     * @param  \Microsoft\MsAds\Rest\Model\CampaignManagementService\AddExperimentsRequest $AddExperimentsRequest (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['addExperiments'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function addExperimentsRequest($AddExperimentsRequest, string $contentType = self::contentTypes['addExperiments'][0])
    {

        // verify the required parameter 'AddExperimentsRequest' is set
        if ($AddExperimentsRequest === null || (is_array($AddExperimentsRequest) && count($AddExperimentsRequest) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $AddExperimentsRequest when calling addExperiments'
            );
        }


        $resourcePath = '/CampaignManagement/v13/Experiments';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $multipart = false;

        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        return $this->setupAndSendRequest(
            'POST',
            $resourcePath,
            $headers,
            $headerParams,
            $AddExperimentsRequest,
            $formParams,
            $multipart,
            true,
            true,
            false,
            'getHostSettingsForaddExperiments',
            null,
            [],
            $queryParams
        );
    }

    /**
     * Operation addImportJobs
     *
     * @param  \Microsoft\MsAds\Rest\Model\CampaignManagementService\AddImportJobsRequest $AddImportJobsRequest AddImportJobsRequest (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['addImportJobs'] to see the possible values for this operation
     *
     * @throws \Microsoft\MsAds\Rest\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \Microsoft\MsAds\Rest\Model\CampaignManagementService\AddImportJobsResponse|\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault|\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault|\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault|\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault
     */
    public function addImportJobs($AddImportJobsRequest, string $contentType = self::contentTypes['addImportJobs'][0])
    {
        list($response) = $this->addImportJobsWithHttpInfo($AddImportJobsRequest, $contentType);
        return $response;
    }

    /**
     * Operation addImportJobsWithHttpInfo
     *
     * @param  \Microsoft\MsAds\Rest\Model\CampaignManagementService\AddImportJobsRequest $AddImportJobsRequest (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['addImportJobs'] to see the possible values for this operation
     *
     * @throws \Microsoft\MsAds\Rest\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \Microsoft\MsAds\Rest\Model\CampaignManagementService\AddImportJobsResponse|\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault|\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault|\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault|\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault, HTTP status code, HTTP response headers (array of strings)
     */
    public function addImportJobsWithHttpInfo($AddImportJobsRequest, string $contentType = self::contentTypes['addImportJobs'][0])
    {
        $request = $this->addImportJobsRequest($AddImportJobsRequest, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                $response = $e->getResponse();
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            switch($statusCode) {
                case 200:
                    return $this->getResponseContent($request, $response, '\Microsoft\MsAds\Rest\Model\CampaignManagementService\AddImportJobsResponse');
                case 400:
                    return $this->getResponseContent($request, $response, '\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault');
                case 500:
                    return $this->getResponseContent($request, $response, '\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault');
                case 401:
                    return $this->getResponseContent($request, $response, '\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault');
                case 403:
                    return $this->getResponseContent($request, $response, '\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault');
            }

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            $returnType = '\Microsoft\MsAds\Rest\Model\CampaignManagementService\AddImportJobsResponse';
            return $this->getResponseContent($request, $response, $returnType);

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Microsoft\MsAds\Rest\Model\CampaignManagementService\AddImportJobsResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 500:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 403:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation addImportJobsAsync
     *
     * @param  \Microsoft\MsAds\Rest\Model\CampaignManagementService\AddImportJobsRequest $AddImportJobsRequest (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['addImportJobs'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function addImportJobsAsync($AddImportJobsRequest, string $contentType = self::contentTypes['addImportJobs'][0])
    {
        return $this->addImportJobsAsyncWithHttpInfo($AddImportJobsRequest, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation addImportJobsAsyncWithHttpInfo
     *
     * @param  \Microsoft\MsAds\Rest\Model\CampaignManagementService\AddImportJobsRequest $AddImportJobsRequest (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['addImportJobs'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function addImportJobsAsyncWithHttpInfo($AddImportJobsRequest, string $contentType = self::contentTypes['addImportJobs'][0])
    {
        $returnType = '\Microsoft\MsAds\Rest\Model\CampaignManagementService\AddImportJobsResponse';
        $request = $this->addImportJobsRequest($AddImportJobsRequest, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return $this->onFulfilledResponse($response, $returnType);
                },
                function ($exception) {
                    $this->onRejectedResponse($exception);
                }
            );
    }

    /**
     * Create request for operation 'addImportJobs'
     *
     * @param  \Microsoft\MsAds\Rest\Model\CampaignManagementService\AddImportJobsRequest $AddImportJobsRequest (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['addImportJobs'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function addImportJobsRequest($AddImportJobsRequest, string $contentType = self::contentTypes['addImportJobs'][0])
    {

        // verify the required parameter 'AddImportJobsRequest' is set
        if ($AddImportJobsRequest === null || (is_array($AddImportJobsRequest) && count($AddImportJobsRequest) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $AddImportJobsRequest when calling addImportJobs'
            );
        }


        $resourcePath = '/CampaignManagement/v13/ImportJobs';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $multipart = false;

        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        return $this->setupAndSendRequest(
            'POST',
            $resourcePath,
            $headers,
            $headerParams,
            $AddImportJobsRequest,
            $formParams,
            $multipart,
            true,
            true,
            false,
            'getHostSettingsForaddImportJobs',
            null,
            [],
            $queryParams
        );
    }

    /**
     * Operation addKeywords
     *
     * @param  \Microsoft\MsAds\Rest\Model\CampaignManagementService\AddKeywordsRequest $AddKeywordsRequest AddKeywordsRequest (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['addKeywords'] to see the possible values for this operation
     *
     * @throws \Microsoft\MsAds\Rest\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \Microsoft\MsAds\Rest\Model\CampaignManagementService\AddKeywordsResponse|\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault|\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault|\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault|\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault
     */
    public function addKeywords($AddKeywordsRequest, string $contentType = self::contentTypes['addKeywords'][0])
    {
        list($response) = $this->addKeywordsWithHttpInfo($AddKeywordsRequest, $contentType);
        return $response;
    }

    /**
     * Operation addKeywordsWithHttpInfo
     *
     * @param  \Microsoft\MsAds\Rest\Model\CampaignManagementService\AddKeywordsRequest $AddKeywordsRequest (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['addKeywords'] to see the possible values for this operation
     *
     * @throws \Microsoft\MsAds\Rest\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \Microsoft\MsAds\Rest\Model\CampaignManagementService\AddKeywordsResponse|\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault|\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault|\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault|\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault, HTTP status code, HTTP response headers (array of strings)
     */
    public function addKeywordsWithHttpInfo($AddKeywordsRequest, string $contentType = self::contentTypes['addKeywords'][0])
    {
        $request = $this->addKeywordsRequest($AddKeywordsRequest, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                $response = $e->getResponse();
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            switch($statusCode) {
                case 200:
                    return $this->getResponseContent($request, $response, '\Microsoft\MsAds\Rest\Model\CampaignManagementService\AddKeywordsResponse');
                case 400:
                    return $this->getResponseContent($request, $response, '\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault');
                case 500:
                    return $this->getResponseContent($request, $response, '\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault');
                case 401:
                    return $this->getResponseContent($request, $response, '\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault');
                case 403:
                    return $this->getResponseContent($request, $response, '\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault');
            }

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            $returnType = '\Microsoft\MsAds\Rest\Model\CampaignManagementService\AddKeywordsResponse';
            return $this->getResponseContent($request, $response, $returnType);

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Microsoft\MsAds\Rest\Model\CampaignManagementService\AddKeywordsResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 500:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 403:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation addKeywordsAsync
     *
     * @param  \Microsoft\MsAds\Rest\Model\CampaignManagementService\AddKeywordsRequest $AddKeywordsRequest (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['addKeywords'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function addKeywordsAsync($AddKeywordsRequest, string $contentType = self::contentTypes['addKeywords'][0])
    {
        return $this->addKeywordsAsyncWithHttpInfo($AddKeywordsRequest, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation addKeywordsAsyncWithHttpInfo
     *
     * @param  \Microsoft\MsAds\Rest\Model\CampaignManagementService\AddKeywordsRequest $AddKeywordsRequest (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['addKeywords'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function addKeywordsAsyncWithHttpInfo($AddKeywordsRequest, string $contentType = self::contentTypes['addKeywords'][0])
    {
        $returnType = '\Microsoft\MsAds\Rest\Model\CampaignManagementService\AddKeywordsResponse';
        $request = $this->addKeywordsRequest($AddKeywordsRequest, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return $this->onFulfilledResponse($response, $returnType);
                },
                function ($exception) {
                    $this->onRejectedResponse($exception);
                }
            );
    }

    /**
     * Create request for operation 'addKeywords'
     *
     * @param  \Microsoft\MsAds\Rest\Model\CampaignManagementService\AddKeywordsRequest $AddKeywordsRequest (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['addKeywords'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function addKeywordsRequest($AddKeywordsRequest, string $contentType = self::contentTypes['addKeywords'][0])
    {

        // verify the required parameter 'AddKeywordsRequest' is set
        if ($AddKeywordsRequest === null || (is_array($AddKeywordsRequest) && count($AddKeywordsRequest) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $AddKeywordsRequest when calling addKeywords'
            );
        }


        $resourcePath = '/CampaignManagement/v13/Keywords';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $multipart = false;

        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        return $this->setupAndSendRequest(
            'POST',
            $resourcePath,
            $headers,
            $headerParams,
            $AddKeywordsRequest,
            $formParams,
            $multipart,
            true,
            true,
            false,
            'getHostSettingsForaddKeywords',
            null,
            [],
            $queryParams
        );
    }

    /**
     * Operation addLabels
     *
     * @param  \Microsoft\MsAds\Rest\Model\CampaignManagementService\AddLabelsRequest $AddLabelsRequest AddLabelsRequest (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['addLabels'] to see the possible values for this operation
     *
     * @throws \Microsoft\MsAds\Rest\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \Microsoft\MsAds\Rest\Model\CampaignManagementService\AddLabelsResponse|\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault|\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault|\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault|\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault
     */
    public function addLabels($AddLabelsRequest, string $contentType = self::contentTypes['addLabels'][0])
    {
        list($response) = $this->addLabelsWithHttpInfo($AddLabelsRequest, $contentType);
        return $response;
    }

    /**
     * Operation addLabelsWithHttpInfo
     *
     * @param  \Microsoft\MsAds\Rest\Model\CampaignManagementService\AddLabelsRequest $AddLabelsRequest (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['addLabels'] to see the possible values for this operation
     *
     * @throws \Microsoft\MsAds\Rest\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \Microsoft\MsAds\Rest\Model\CampaignManagementService\AddLabelsResponse|\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault|\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault|\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault|\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault, HTTP status code, HTTP response headers (array of strings)
     */
    public function addLabelsWithHttpInfo($AddLabelsRequest, string $contentType = self::contentTypes['addLabels'][0])
    {
        $request = $this->addLabelsRequest($AddLabelsRequest, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                $response = $e->getResponse();
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            switch($statusCode) {
                case 200:
                    return $this->getResponseContent($request, $response, '\Microsoft\MsAds\Rest\Model\CampaignManagementService\AddLabelsResponse');
                case 400:
                    return $this->getResponseContent($request, $response, '\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault');
                case 500:
                    return $this->getResponseContent($request, $response, '\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault');
                case 401:
                    return $this->getResponseContent($request, $response, '\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault');
                case 403:
                    return $this->getResponseContent($request, $response, '\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault');
            }

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            $returnType = '\Microsoft\MsAds\Rest\Model\CampaignManagementService\AddLabelsResponse';
            return $this->getResponseContent($request, $response, $returnType);

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Microsoft\MsAds\Rest\Model\CampaignManagementService\AddLabelsResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 500:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 403:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation addLabelsAsync
     *
     * @param  \Microsoft\MsAds\Rest\Model\CampaignManagementService\AddLabelsRequest $AddLabelsRequest (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['addLabels'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function addLabelsAsync($AddLabelsRequest, string $contentType = self::contentTypes['addLabels'][0])
    {
        return $this->addLabelsAsyncWithHttpInfo($AddLabelsRequest, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation addLabelsAsyncWithHttpInfo
     *
     * @param  \Microsoft\MsAds\Rest\Model\CampaignManagementService\AddLabelsRequest $AddLabelsRequest (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['addLabels'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function addLabelsAsyncWithHttpInfo($AddLabelsRequest, string $contentType = self::contentTypes['addLabels'][0])
    {
        $returnType = '\Microsoft\MsAds\Rest\Model\CampaignManagementService\AddLabelsResponse';
        $request = $this->addLabelsRequest($AddLabelsRequest, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return $this->onFulfilledResponse($response, $returnType);
                },
                function ($exception) {
                    $this->onRejectedResponse($exception);
                }
            );
    }

    /**
     * Create request for operation 'addLabels'
     *
     * @param  \Microsoft\MsAds\Rest\Model\CampaignManagementService\AddLabelsRequest $AddLabelsRequest (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['addLabels'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function addLabelsRequest($AddLabelsRequest, string $contentType = self::contentTypes['addLabels'][0])
    {

        // verify the required parameter 'AddLabelsRequest' is set
        if ($AddLabelsRequest === null || (is_array($AddLabelsRequest) && count($AddLabelsRequest) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $AddLabelsRequest when calling addLabels'
            );
        }


        $resourcePath = '/CampaignManagement/v13/Labels';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $multipart = false;

        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        return $this->setupAndSendRequest(
            'POST',
            $resourcePath,
            $headers,
            $headerParams,
            $AddLabelsRequest,
            $formParams,
            $multipart,
            true,
            true,
            false,
            'getHostSettingsForaddLabels',
            null,
            [],
            $queryParams
        );
    }

    /**
     * Operation addListItemsToSharedList
     *
     * @param  \Microsoft\MsAds\Rest\Model\CampaignManagementService\AddListItemsToSharedListRequest $AddListItemsToSharedListRequest AddListItemsToSharedListRequest (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['addListItemsToSharedList'] to see the possible values for this operation
     *
     * @throws \Microsoft\MsAds\Rest\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \Microsoft\MsAds\Rest\Model\CampaignManagementService\AddListItemsToSharedListResponse|\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault|\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault|\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault|\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault
     */
    public function addListItemsToSharedList($AddListItemsToSharedListRequest, string $contentType = self::contentTypes['addListItemsToSharedList'][0])
    {
        list($response) = $this->addListItemsToSharedListWithHttpInfo($AddListItemsToSharedListRequest, $contentType);
        return $response;
    }

    /**
     * Operation addListItemsToSharedListWithHttpInfo
     *
     * @param  \Microsoft\MsAds\Rest\Model\CampaignManagementService\AddListItemsToSharedListRequest $AddListItemsToSharedListRequest (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['addListItemsToSharedList'] to see the possible values for this operation
     *
     * @throws \Microsoft\MsAds\Rest\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \Microsoft\MsAds\Rest\Model\CampaignManagementService\AddListItemsToSharedListResponse|\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault|\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault|\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault|\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault, HTTP status code, HTTP response headers (array of strings)
     */
    public function addListItemsToSharedListWithHttpInfo($AddListItemsToSharedListRequest, string $contentType = self::contentTypes['addListItemsToSharedList'][0])
    {
        $request = $this->addListItemsToSharedListRequest($AddListItemsToSharedListRequest, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                $response = $e->getResponse();
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            switch($statusCode) {
                case 200:
                    return $this->getResponseContent($request, $response, '\Microsoft\MsAds\Rest\Model\CampaignManagementService\AddListItemsToSharedListResponse');
                case 400:
                    return $this->getResponseContent($request, $response, '\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault');
                case 500:
                    return $this->getResponseContent($request, $response, '\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault');
                case 401:
                    return $this->getResponseContent($request, $response, '\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault');
                case 403:
                    return $this->getResponseContent($request, $response, '\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault');
            }

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            $returnType = '\Microsoft\MsAds\Rest\Model\CampaignManagementService\AddListItemsToSharedListResponse';
            return $this->getResponseContent($request, $response, $returnType);

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Microsoft\MsAds\Rest\Model\CampaignManagementService\AddListItemsToSharedListResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 500:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 403:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation addListItemsToSharedListAsync
     *
     * @param  \Microsoft\MsAds\Rest\Model\CampaignManagementService\AddListItemsToSharedListRequest $AddListItemsToSharedListRequest (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['addListItemsToSharedList'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function addListItemsToSharedListAsync($AddListItemsToSharedListRequest, string $contentType = self::contentTypes['addListItemsToSharedList'][0])
    {
        return $this->addListItemsToSharedListAsyncWithHttpInfo($AddListItemsToSharedListRequest, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation addListItemsToSharedListAsyncWithHttpInfo
     *
     * @param  \Microsoft\MsAds\Rest\Model\CampaignManagementService\AddListItemsToSharedListRequest $AddListItemsToSharedListRequest (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['addListItemsToSharedList'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function addListItemsToSharedListAsyncWithHttpInfo($AddListItemsToSharedListRequest, string $contentType = self::contentTypes['addListItemsToSharedList'][0])
    {
        $returnType = '\Microsoft\MsAds\Rest\Model\CampaignManagementService\AddListItemsToSharedListResponse';
        $request = $this->addListItemsToSharedListRequest($AddListItemsToSharedListRequest, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return $this->onFulfilledResponse($response, $returnType);
                },
                function ($exception) {
                    $this->onRejectedResponse($exception);
                }
            );
    }

    /**
     * Create request for operation 'addListItemsToSharedList'
     *
     * @param  \Microsoft\MsAds\Rest\Model\CampaignManagementService\AddListItemsToSharedListRequest $AddListItemsToSharedListRequest (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['addListItemsToSharedList'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function addListItemsToSharedListRequest($AddListItemsToSharedListRequest, string $contentType = self::contentTypes['addListItemsToSharedList'][0])
    {

        // verify the required parameter 'AddListItemsToSharedListRequest' is set
        if ($AddListItemsToSharedListRequest === null || (is_array($AddListItemsToSharedListRequest) && count($AddListItemsToSharedListRequest) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $AddListItemsToSharedListRequest when calling addListItemsToSharedList'
            );
        }


        $resourcePath = '/CampaignManagement/v13/ListItems';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $multipart = false;

        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        return $this->setupAndSendRequest(
            'POST',
            $resourcePath,
            $headers,
            $headerParams,
            $AddListItemsToSharedListRequest,
            $formParams,
            $multipart,
            true,
            true,
            false,
            'getHostSettingsForaddListItemsToSharedList',
            null,
            [],
            $queryParams
        );
    }

    /**
     * Operation addMedia
     *
     * @param  \Microsoft\MsAds\Rest\Model\CampaignManagementService\AddMediaRequest $AddMediaRequest AddMediaRequest (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['addMedia'] to see the possible values for this operation
     *
     * @throws \Microsoft\MsAds\Rest\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \Microsoft\MsAds\Rest\Model\CampaignManagementService\AddMediaResponse|\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault|\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault|\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault|\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault
     */
    public function addMedia($AddMediaRequest, string $contentType = self::contentTypes['addMedia'][0])
    {
        list($response) = $this->addMediaWithHttpInfo($AddMediaRequest, $contentType);
        return $response;
    }

    /**
     * Operation addMediaWithHttpInfo
     *
     * @param  \Microsoft\MsAds\Rest\Model\CampaignManagementService\AddMediaRequest $AddMediaRequest (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['addMedia'] to see the possible values for this operation
     *
     * @throws \Microsoft\MsAds\Rest\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \Microsoft\MsAds\Rest\Model\CampaignManagementService\AddMediaResponse|\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault|\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault|\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault|\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault, HTTP status code, HTTP response headers (array of strings)
     */
    public function addMediaWithHttpInfo($AddMediaRequest, string $contentType = self::contentTypes['addMedia'][0])
    {
        $request = $this->addMediaRequest($AddMediaRequest, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                $response = $e->getResponse();
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            switch($statusCode) {
                case 200:
                    return $this->getResponseContent($request, $response, '\Microsoft\MsAds\Rest\Model\CampaignManagementService\AddMediaResponse');
                case 400:
                    return $this->getResponseContent($request, $response, '\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault');
                case 500:
                    return $this->getResponseContent($request, $response, '\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault');
                case 401:
                    return $this->getResponseContent($request, $response, '\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault');
                case 403:
                    return $this->getResponseContent($request, $response, '\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault');
            }

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            $returnType = '\Microsoft\MsAds\Rest\Model\CampaignManagementService\AddMediaResponse';
            return $this->getResponseContent($request, $response, $returnType);

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Microsoft\MsAds\Rest\Model\CampaignManagementService\AddMediaResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 500:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 403:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation addMediaAsync
     *
     * @param  \Microsoft\MsAds\Rest\Model\CampaignManagementService\AddMediaRequest $AddMediaRequest (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['addMedia'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function addMediaAsync($AddMediaRequest, string $contentType = self::contentTypes['addMedia'][0])
    {
        return $this->addMediaAsyncWithHttpInfo($AddMediaRequest, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation addMediaAsyncWithHttpInfo
     *
     * @param  \Microsoft\MsAds\Rest\Model\CampaignManagementService\AddMediaRequest $AddMediaRequest (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['addMedia'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function addMediaAsyncWithHttpInfo($AddMediaRequest, string $contentType = self::contentTypes['addMedia'][0])
    {
        $returnType = '\Microsoft\MsAds\Rest\Model\CampaignManagementService\AddMediaResponse';
        $request = $this->addMediaRequest($AddMediaRequest, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return $this->onFulfilledResponse($response, $returnType);
                },
                function ($exception) {
                    $this->onRejectedResponse($exception);
                }
            );
    }

    /**
     * Create request for operation 'addMedia'
     *
     * @param  \Microsoft\MsAds\Rest\Model\CampaignManagementService\AddMediaRequest $AddMediaRequest (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['addMedia'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function addMediaRequest($AddMediaRequest, string $contentType = self::contentTypes['addMedia'][0])
    {

        // verify the required parameter 'AddMediaRequest' is set
        if ($AddMediaRequest === null || (is_array($AddMediaRequest) && count($AddMediaRequest) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $AddMediaRequest when calling addMedia'
            );
        }


        $resourcePath = '/CampaignManagement/v13/Media';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $multipart = false;

        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        return $this->setupAndSendRequest(
            'POST',
            $resourcePath,
            $headers,
            $headerParams,
            $AddMediaRequest,
            $formParams,
            $multipart,
            true,
            true,
            false,
            'getHostSettingsForaddMedia',
            null,
            [],
            $queryParams
        );
    }

    /**
     * Operation addNegativeKeywordsToEntities
     *
     * @param  \Microsoft\MsAds\Rest\Model\CampaignManagementService\AddNegativeKeywordsToEntitiesRequest $AddNegativeKeywordsToEntitiesRequest AddNegativeKeywordsToEntitiesRequest (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['addNegativeKeywordsToEntities'] to see the possible values for this operation
     *
     * @throws \Microsoft\MsAds\Rest\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \Microsoft\MsAds\Rest\Model\CampaignManagementService\AddNegativeKeywordsToEntitiesResponse|\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault|\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault|\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault|\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault
     */
    public function addNegativeKeywordsToEntities($AddNegativeKeywordsToEntitiesRequest, string $contentType = self::contentTypes['addNegativeKeywordsToEntities'][0])
    {
        list($response) = $this->addNegativeKeywordsToEntitiesWithHttpInfo($AddNegativeKeywordsToEntitiesRequest, $contentType);
        return $response;
    }

    /**
     * Operation addNegativeKeywordsToEntitiesWithHttpInfo
     *
     * @param  \Microsoft\MsAds\Rest\Model\CampaignManagementService\AddNegativeKeywordsToEntitiesRequest $AddNegativeKeywordsToEntitiesRequest (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['addNegativeKeywordsToEntities'] to see the possible values for this operation
     *
     * @throws \Microsoft\MsAds\Rest\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \Microsoft\MsAds\Rest\Model\CampaignManagementService\AddNegativeKeywordsToEntitiesResponse|\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault|\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault|\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault|\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault, HTTP status code, HTTP response headers (array of strings)
     */
    public function addNegativeKeywordsToEntitiesWithHttpInfo($AddNegativeKeywordsToEntitiesRequest, string $contentType = self::contentTypes['addNegativeKeywordsToEntities'][0])
    {
        $request = $this->addNegativeKeywordsToEntitiesRequest($AddNegativeKeywordsToEntitiesRequest, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                $response = $e->getResponse();
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            switch($statusCode) {
                case 200:
                    return $this->getResponseContent($request, $response, '\Microsoft\MsAds\Rest\Model\CampaignManagementService\AddNegativeKeywordsToEntitiesResponse');
                case 400:
                    return $this->getResponseContent($request, $response, '\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault');
                case 500:
                    return $this->getResponseContent($request, $response, '\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault');
                case 401:
                    return $this->getResponseContent($request, $response, '\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault');
                case 403:
                    return $this->getResponseContent($request, $response, '\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault');
            }

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            $returnType = '\Microsoft\MsAds\Rest\Model\CampaignManagementService\AddNegativeKeywordsToEntitiesResponse';
            return $this->getResponseContent($request, $response, $returnType);

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Microsoft\MsAds\Rest\Model\CampaignManagementService\AddNegativeKeywordsToEntitiesResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 500:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 403:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation addNegativeKeywordsToEntitiesAsync
     *
     * @param  \Microsoft\MsAds\Rest\Model\CampaignManagementService\AddNegativeKeywordsToEntitiesRequest $AddNegativeKeywordsToEntitiesRequest (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['addNegativeKeywordsToEntities'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function addNegativeKeywordsToEntitiesAsync($AddNegativeKeywordsToEntitiesRequest, string $contentType = self::contentTypes['addNegativeKeywordsToEntities'][0])
    {
        return $this->addNegativeKeywordsToEntitiesAsyncWithHttpInfo($AddNegativeKeywordsToEntitiesRequest, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation addNegativeKeywordsToEntitiesAsyncWithHttpInfo
     *
     * @param  \Microsoft\MsAds\Rest\Model\CampaignManagementService\AddNegativeKeywordsToEntitiesRequest $AddNegativeKeywordsToEntitiesRequest (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['addNegativeKeywordsToEntities'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function addNegativeKeywordsToEntitiesAsyncWithHttpInfo($AddNegativeKeywordsToEntitiesRequest, string $contentType = self::contentTypes['addNegativeKeywordsToEntities'][0])
    {
        $returnType = '\Microsoft\MsAds\Rest\Model\CampaignManagementService\AddNegativeKeywordsToEntitiesResponse';
        $request = $this->addNegativeKeywordsToEntitiesRequest($AddNegativeKeywordsToEntitiesRequest, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return $this->onFulfilledResponse($response, $returnType);
                },
                function ($exception) {
                    $this->onRejectedResponse($exception);
                }
            );
    }

    /**
     * Create request for operation 'addNegativeKeywordsToEntities'
     *
     * @param  \Microsoft\MsAds\Rest\Model\CampaignManagementService\AddNegativeKeywordsToEntitiesRequest $AddNegativeKeywordsToEntitiesRequest (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['addNegativeKeywordsToEntities'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function addNegativeKeywordsToEntitiesRequest($AddNegativeKeywordsToEntitiesRequest, string $contentType = self::contentTypes['addNegativeKeywordsToEntities'][0])
    {

        // verify the required parameter 'AddNegativeKeywordsToEntitiesRequest' is set
        if ($AddNegativeKeywordsToEntitiesRequest === null || (is_array($AddNegativeKeywordsToEntitiesRequest) && count($AddNegativeKeywordsToEntitiesRequest) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $AddNegativeKeywordsToEntitiesRequest when calling addNegativeKeywordsToEntities'
            );
        }


        $resourcePath = '/CampaignManagement/v13/EntityNegativeKeywords';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $multipart = false;

        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        return $this->setupAndSendRequest(
            'POST',
            $resourcePath,
            $headers,
            $headerParams,
            $AddNegativeKeywordsToEntitiesRequest,
            $formParams,
            $multipart,
            true,
            true,
            false,
            'getHostSettingsForaddNegativeKeywordsToEntities',
            null,
            [],
            $queryParams
        );
    }

    /**
     * Operation addNewCustomerAcquisitionGoals
     *
     * @param  \Microsoft\MsAds\Rest\Model\CampaignManagementService\AddNewCustomerAcquisitionGoalsRequest $AddNewCustomerAcquisitionGoalsRequest AddNewCustomerAcquisitionGoalsRequest (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['addNewCustomerAcquisitionGoals'] to see the possible values for this operation
     *
     * @throws \Microsoft\MsAds\Rest\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \Microsoft\MsAds\Rest\Model\CampaignManagementService\AddNewCustomerAcquisitionGoalsResponse|\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault|\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault|\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault|\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault
     */
    public function addNewCustomerAcquisitionGoals($AddNewCustomerAcquisitionGoalsRequest, string $contentType = self::contentTypes['addNewCustomerAcquisitionGoals'][0])
    {
        list($response) = $this->addNewCustomerAcquisitionGoalsWithHttpInfo($AddNewCustomerAcquisitionGoalsRequest, $contentType);
        return $response;
    }

    /**
     * Operation addNewCustomerAcquisitionGoalsWithHttpInfo
     *
     * @param  \Microsoft\MsAds\Rest\Model\CampaignManagementService\AddNewCustomerAcquisitionGoalsRequest $AddNewCustomerAcquisitionGoalsRequest (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['addNewCustomerAcquisitionGoals'] to see the possible values for this operation
     *
     * @throws \Microsoft\MsAds\Rest\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \Microsoft\MsAds\Rest\Model\CampaignManagementService\AddNewCustomerAcquisitionGoalsResponse|\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault|\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault|\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault|\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault, HTTP status code, HTTP response headers (array of strings)
     */
    public function addNewCustomerAcquisitionGoalsWithHttpInfo($AddNewCustomerAcquisitionGoalsRequest, string $contentType = self::contentTypes['addNewCustomerAcquisitionGoals'][0])
    {
        $request = $this->addNewCustomerAcquisitionGoalsRequest($AddNewCustomerAcquisitionGoalsRequest, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                $response = $e->getResponse();
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            switch($statusCode) {
                case 200:
                    return $this->getResponseContent($request, $response, '\Microsoft\MsAds\Rest\Model\CampaignManagementService\AddNewCustomerAcquisitionGoalsResponse');
                case 400:
                    return $this->getResponseContent($request, $response, '\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault');
                case 500:
                    return $this->getResponseContent($request, $response, '\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault');
                case 401:
                    return $this->getResponseContent($request, $response, '\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault');
                case 403:
                    return $this->getResponseContent($request, $response, '\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault');
            }

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            $returnType = '\Microsoft\MsAds\Rest\Model\CampaignManagementService\AddNewCustomerAcquisitionGoalsResponse';
            return $this->getResponseContent($request, $response, $returnType);

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Microsoft\MsAds\Rest\Model\CampaignManagementService\AddNewCustomerAcquisitionGoalsResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 500:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 403:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation addNewCustomerAcquisitionGoalsAsync
     *
     * @param  \Microsoft\MsAds\Rest\Model\CampaignManagementService\AddNewCustomerAcquisitionGoalsRequest $AddNewCustomerAcquisitionGoalsRequest (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['addNewCustomerAcquisitionGoals'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function addNewCustomerAcquisitionGoalsAsync($AddNewCustomerAcquisitionGoalsRequest, string $contentType = self::contentTypes['addNewCustomerAcquisitionGoals'][0])
    {
        return $this->addNewCustomerAcquisitionGoalsAsyncWithHttpInfo($AddNewCustomerAcquisitionGoalsRequest, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation addNewCustomerAcquisitionGoalsAsyncWithHttpInfo
     *
     * @param  \Microsoft\MsAds\Rest\Model\CampaignManagementService\AddNewCustomerAcquisitionGoalsRequest $AddNewCustomerAcquisitionGoalsRequest (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['addNewCustomerAcquisitionGoals'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function addNewCustomerAcquisitionGoalsAsyncWithHttpInfo($AddNewCustomerAcquisitionGoalsRequest, string $contentType = self::contentTypes['addNewCustomerAcquisitionGoals'][0])
    {
        $returnType = '\Microsoft\MsAds\Rest\Model\CampaignManagementService\AddNewCustomerAcquisitionGoalsResponse';
        $request = $this->addNewCustomerAcquisitionGoalsRequest($AddNewCustomerAcquisitionGoalsRequest, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return $this->onFulfilledResponse($response, $returnType);
                },
                function ($exception) {
                    $this->onRejectedResponse($exception);
                }
            );
    }

    /**
     * Create request for operation 'addNewCustomerAcquisitionGoals'
     *
     * @param  \Microsoft\MsAds\Rest\Model\CampaignManagementService\AddNewCustomerAcquisitionGoalsRequest $AddNewCustomerAcquisitionGoalsRequest (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['addNewCustomerAcquisitionGoals'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function addNewCustomerAcquisitionGoalsRequest($AddNewCustomerAcquisitionGoalsRequest, string $contentType = self::contentTypes['addNewCustomerAcquisitionGoals'][0])
    {

        // verify the required parameter 'AddNewCustomerAcquisitionGoalsRequest' is set
        if ($AddNewCustomerAcquisitionGoalsRequest === null || (is_array($AddNewCustomerAcquisitionGoalsRequest) && count($AddNewCustomerAcquisitionGoalsRequest) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $AddNewCustomerAcquisitionGoalsRequest when calling addNewCustomerAcquisitionGoals'
            );
        }


        $resourcePath = '/CampaignManagement/v13/NewCustomerAcquisitionGoals';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $multipart = false;

        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        return $this->setupAndSendRequest(
            'POST',
            $resourcePath,
            $headers,
            $headerParams,
            $AddNewCustomerAcquisitionGoalsRequest,
            $formParams,
            $multipart,
            true,
            true,
            false,
            'getHostSettingsForaddNewCustomerAcquisitionGoals',
            null,
            [],
            $queryParams
        );
    }

    /**
     * Operation addSeasonalityAdjustments
     *
     * @param  \Microsoft\MsAds\Rest\Model\CampaignManagementService\AddSeasonalityAdjustmentsRequest $AddSeasonalityAdjustmentsRequest AddSeasonalityAdjustmentsRequest (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['addSeasonalityAdjustments'] to see the possible values for this operation
     *
     * @throws \Microsoft\MsAds\Rest\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \Microsoft\MsAds\Rest\Model\CampaignManagementService\AddSeasonalityAdjustmentsResponse|\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault|\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault|\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault|\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault
     */
    public function addSeasonalityAdjustments($AddSeasonalityAdjustmentsRequest, string $contentType = self::contentTypes['addSeasonalityAdjustments'][0])
    {
        list($response) = $this->addSeasonalityAdjustmentsWithHttpInfo($AddSeasonalityAdjustmentsRequest, $contentType);
        return $response;
    }

    /**
     * Operation addSeasonalityAdjustmentsWithHttpInfo
     *
     * @param  \Microsoft\MsAds\Rest\Model\CampaignManagementService\AddSeasonalityAdjustmentsRequest $AddSeasonalityAdjustmentsRequest (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['addSeasonalityAdjustments'] to see the possible values for this operation
     *
     * @throws \Microsoft\MsAds\Rest\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \Microsoft\MsAds\Rest\Model\CampaignManagementService\AddSeasonalityAdjustmentsResponse|\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault|\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault|\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault|\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault, HTTP status code, HTTP response headers (array of strings)
     */
    public function addSeasonalityAdjustmentsWithHttpInfo($AddSeasonalityAdjustmentsRequest, string $contentType = self::contentTypes['addSeasonalityAdjustments'][0])
    {
        $request = $this->addSeasonalityAdjustmentsRequest($AddSeasonalityAdjustmentsRequest, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                $response = $e->getResponse();
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            switch($statusCode) {
                case 200:
                    return $this->getResponseContent($request, $response, '\Microsoft\MsAds\Rest\Model\CampaignManagementService\AddSeasonalityAdjustmentsResponse');
                case 400:
                    return $this->getResponseContent($request, $response, '\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault');
                case 500:
                    return $this->getResponseContent($request, $response, '\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault');
                case 401:
                    return $this->getResponseContent($request, $response, '\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault');
                case 403:
                    return $this->getResponseContent($request, $response, '\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault');
            }

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            $returnType = '\Microsoft\MsAds\Rest\Model\CampaignManagementService\AddSeasonalityAdjustmentsResponse';
            return $this->getResponseContent($request, $response, $returnType);

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Microsoft\MsAds\Rest\Model\CampaignManagementService\AddSeasonalityAdjustmentsResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 500:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 403:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation addSeasonalityAdjustmentsAsync
     *
     * @param  \Microsoft\MsAds\Rest\Model\CampaignManagementService\AddSeasonalityAdjustmentsRequest $AddSeasonalityAdjustmentsRequest (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['addSeasonalityAdjustments'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function addSeasonalityAdjustmentsAsync($AddSeasonalityAdjustmentsRequest, string $contentType = self::contentTypes['addSeasonalityAdjustments'][0])
    {
        return $this->addSeasonalityAdjustmentsAsyncWithHttpInfo($AddSeasonalityAdjustmentsRequest, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation addSeasonalityAdjustmentsAsyncWithHttpInfo
     *
     * @param  \Microsoft\MsAds\Rest\Model\CampaignManagementService\AddSeasonalityAdjustmentsRequest $AddSeasonalityAdjustmentsRequest (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['addSeasonalityAdjustments'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function addSeasonalityAdjustmentsAsyncWithHttpInfo($AddSeasonalityAdjustmentsRequest, string $contentType = self::contentTypes['addSeasonalityAdjustments'][0])
    {
        $returnType = '\Microsoft\MsAds\Rest\Model\CampaignManagementService\AddSeasonalityAdjustmentsResponse';
        $request = $this->addSeasonalityAdjustmentsRequest($AddSeasonalityAdjustmentsRequest, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return $this->onFulfilledResponse($response, $returnType);
                },
                function ($exception) {
                    $this->onRejectedResponse($exception);
                }
            );
    }

    /**
     * Create request for operation 'addSeasonalityAdjustments'
     *
     * @param  \Microsoft\MsAds\Rest\Model\CampaignManagementService\AddSeasonalityAdjustmentsRequest $AddSeasonalityAdjustmentsRequest (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['addSeasonalityAdjustments'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function addSeasonalityAdjustmentsRequest($AddSeasonalityAdjustmentsRequest, string $contentType = self::contentTypes['addSeasonalityAdjustments'][0])
    {

        // verify the required parameter 'AddSeasonalityAdjustmentsRequest' is set
        if ($AddSeasonalityAdjustmentsRequest === null || (is_array($AddSeasonalityAdjustmentsRequest) && count($AddSeasonalityAdjustmentsRequest) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $AddSeasonalityAdjustmentsRequest when calling addSeasonalityAdjustments'
            );
        }


        $resourcePath = '/CampaignManagement/v13/SeasonalityAdjustments';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $multipart = false;

        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        return $this->setupAndSendRequest(
            'POST',
            $resourcePath,
            $headers,
            $headerParams,
            $AddSeasonalityAdjustmentsRequest,
            $formParams,
            $multipart,
            true,
            true,
            false,
            'getHostSettingsForaddSeasonalityAdjustments',
            null,
            [],
            $queryParams
        );
    }

    /**
     * Operation addSharedEntity
     *
     * @param  \Microsoft\MsAds\Rest\Model\CampaignManagementService\AddSharedEntityRequest $AddSharedEntityRequest AddSharedEntityRequest (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['addSharedEntity'] to see the possible values for this operation
     *
     * @throws \Microsoft\MsAds\Rest\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \Microsoft\MsAds\Rest\Model\CampaignManagementService\AddSharedEntityResponse|\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault|\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault|\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault|\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault
     */
    public function addSharedEntity($AddSharedEntityRequest, string $contentType = self::contentTypes['addSharedEntity'][0])
    {
        list($response) = $this->addSharedEntityWithHttpInfo($AddSharedEntityRequest, $contentType);
        return $response;
    }

    /**
     * Operation addSharedEntityWithHttpInfo
     *
     * @param  \Microsoft\MsAds\Rest\Model\CampaignManagementService\AddSharedEntityRequest $AddSharedEntityRequest (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['addSharedEntity'] to see the possible values for this operation
     *
     * @throws \Microsoft\MsAds\Rest\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \Microsoft\MsAds\Rest\Model\CampaignManagementService\AddSharedEntityResponse|\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault|\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault|\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault|\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault, HTTP status code, HTTP response headers (array of strings)
     */
    public function addSharedEntityWithHttpInfo($AddSharedEntityRequest, string $contentType = self::contentTypes['addSharedEntity'][0])
    {
        $request = $this->addSharedEntityRequest($AddSharedEntityRequest, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                $response = $e->getResponse();
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            switch($statusCode) {
                case 200:
                    return $this->getResponseContent($request, $response, '\Microsoft\MsAds\Rest\Model\CampaignManagementService\AddSharedEntityResponse');
                case 400:
                    return $this->getResponseContent($request, $response, '\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault');
                case 500:
                    return $this->getResponseContent($request, $response, '\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault');
                case 401:
                    return $this->getResponseContent($request, $response, '\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault');
                case 403:
                    return $this->getResponseContent($request, $response, '\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault');
            }

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            $returnType = '\Microsoft\MsAds\Rest\Model\CampaignManagementService\AddSharedEntityResponse';
            return $this->getResponseContent($request, $response, $returnType);

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Microsoft\MsAds\Rest\Model\CampaignManagementService\AddSharedEntityResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 500:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 403:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation addSharedEntityAsync
     *
     * @param  \Microsoft\MsAds\Rest\Model\CampaignManagementService\AddSharedEntityRequest $AddSharedEntityRequest (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['addSharedEntity'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function addSharedEntityAsync($AddSharedEntityRequest, string $contentType = self::contentTypes['addSharedEntity'][0])
    {
        return $this->addSharedEntityAsyncWithHttpInfo($AddSharedEntityRequest, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation addSharedEntityAsyncWithHttpInfo
     *
     * @param  \Microsoft\MsAds\Rest\Model\CampaignManagementService\AddSharedEntityRequest $AddSharedEntityRequest (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['addSharedEntity'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function addSharedEntityAsyncWithHttpInfo($AddSharedEntityRequest, string $contentType = self::contentTypes['addSharedEntity'][0])
    {
        $returnType = '\Microsoft\MsAds\Rest\Model\CampaignManagementService\AddSharedEntityResponse';
        $request = $this->addSharedEntityRequest($AddSharedEntityRequest, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return $this->onFulfilledResponse($response, $returnType);
                },
                function ($exception) {
                    $this->onRejectedResponse($exception);
                }
            );
    }

    /**
     * Create request for operation 'addSharedEntity'
     *
     * @param  \Microsoft\MsAds\Rest\Model\CampaignManagementService\AddSharedEntityRequest $AddSharedEntityRequest (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['addSharedEntity'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function addSharedEntityRequest($AddSharedEntityRequest, string $contentType = self::contentTypes['addSharedEntity'][0])
    {

        // verify the required parameter 'AddSharedEntityRequest' is set
        if ($AddSharedEntityRequest === null || (is_array($AddSharedEntityRequest) && count($AddSharedEntityRequest) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $AddSharedEntityRequest when calling addSharedEntity'
            );
        }


        $resourcePath = '/CampaignManagement/v13/SharedEntity';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $multipart = false;

        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        return $this->setupAndSendRequest(
            'POST',
            $resourcePath,
            $headers,
            $headerParams,
            $AddSharedEntityRequest,
            $formParams,
            $multipart,
            true,
            true,
            false,
            'getHostSettingsForaddSharedEntity',
            null,
            [],
            $queryParams
        );
    }

    /**
     * Operation addUetTags
     *
     * @param  \Microsoft\MsAds\Rest\Model\CampaignManagementService\AddUetTagsRequest $AddUetTagsRequest AddUetTagsRequest (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['addUetTags'] to see the possible values for this operation
     *
     * @throws \Microsoft\MsAds\Rest\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \Microsoft\MsAds\Rest\Model\CampaignManagementService\AddUetTagsResponse|\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault|\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault|\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault|\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault
     */
    public function addUetTags($AddUetTagsRequest, string $contentType = self::contentTypes['addUetTags'][0])
    {
        list($response) = $this->addUetTagsWithHttpInfo($AddUetTagsRequest, $contentType);
        return $response;
    }

    /**
     * Operation addUetTagsWithHttpInfo
     *
     * @param  \Microsoft\MsAds\Rest\Model\CampaignManagementService\AddUetTagsRequest $AddUetTagsRequest (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['addUetTags'] to see the possible values for this operation
     *
     * @throws \Microsoft\MsAds\Rest\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \Microsoft\MsAds\Rest\Model\CampaignManagementService\AddUetTagsResponse|\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault|\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault|\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault|\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault, HTTP status code, HTTP response headers (array of strings)
     */
    public function addUetTagsWithHttpInfo($AddUetTagsRequest, string $contentType = self::contentTypes['addUetTags'][0])
    {
        $request = $this->addUetTagsRequest($AddUetTagsRequest, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                $response = $e->getResponse();
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            switch($statusCode) {
                case 200:
                    return $this->getResponseContent($request, $response, '\Microsoft\MsAds\Rest\Model\CampaignManagementService\AddUetTagsResponse');
                case 400:
                    return $this->getResponseContent($request, $response, '\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault');
                case 500:
                    return $this->getResponseContent($request, $response, '\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault');
                case 401:
                    return $this->getResponseContent($request, $response, '\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault');
                case 403:
                    return $this->getResponseContent($request, $response, '\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault');
            }

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            $returnType = '\Microsoft\MsAds\Rest\Model\CampaignManagementService\AddUetTagsResponse';
            return $this->getResponseContent($request, $response, $returnType);

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Microsoft\MsAds\Rest\Model\CampaignManagementService\AddUetTagsResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 500:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 403:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation addUetTagsAsync
     *
     * @param  \Microsoft\MsAds\Rest\Model\CampaignManagementService\AddUetTagsRequest $AddUetTagsRequest (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['addUetTags'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function addUetTagsAsync($AddUetTagsRequest, string $contentType = self::contentTypes['addUetTags'][0])
    {
        return $this->addUetTagsAsyncWithHttpInfo($AddUetTagsRequest, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation addUetTagsAsyncWithHttpInfo
     *
     * @param  \Microsoft\MsAds\Rest\Model\CampaignManagementService\AddUetTagsRequest $AddUetTagsRequest (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['addUetTags'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function addUetTagsAsyncWithHttpInfo($AddUetTagsRequest, string $contentType = self::contentTypes['addUetTags'][0])
    {
        $returnType = '\Microsoft\MsAds\Rest\Model\CampaignManagementService\AddUetTagsResponse';
        $request = $this->addUetTagsRequest($AddUetTagsRequest, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return $this->onFulfilledResponse($response, $returnType);
                },
                function ($exception) {
                    $this->onRejectedResponse($exception);
                }
            );
    }

    /**
     * Create request for operation 'addUetTags'
     *
     * @param  \Microsoft\MsAds\Rest\Model\CampaignManagementService\AddUetTagsRequest $AddUetTagsRequest (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['addUetTags'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function addUetTagsRequest($AddUetTagsRequest, string $contentType = self::contentTypes['addUetTags'][0])
    {

        // verify the required parameter 'AddUetTagsRequest' is set
        if ($AddUetTagsRequest === null || (is_array($AddUetTagsRequest) && count($AddUetTagsRequest) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $AddUetTagsRequest when calling addUetTags'
            );
        }


        $resourcePath = '/CampaignManagement/v13/UetTags';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $multipart = false;

        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        return $this->setupAndSendRequest(
            'POST',
            $resourcePath,
            $headers,
            $headerParams,
            $AddUetTagsRequest,
            $formParams,
            $multipart,
            true,
            true,
            false,
            'getHostSettingsForaddUetTags',
            null,
            [],
            $queryParams
        );
    }

    /**
     * Operation addVideos
     *
     * @param  \Microsoft\MsAds\Rest\Model\CampaignManagementService\AddVideosRequest $AddVideosRequest AddVideosRequest (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['addVideos'] to see the possible values for this operation
     *
     * @throws \Microsoft\MsAds\Rest\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \Microsoft\MsAds\Rest\Model\CampaignManagementService\AddVideosResponse|\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault|\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault|\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault|\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault
     */
    public function addVideos($AddVideosRequest, string $contentType = self::contentTypes['addVideos'][0])
    {
        list($response) = $this->addVideosWithHttpInfo($AddVideosRequest, $contentType);
        return $response;
    }

    /**
     * Operation addVideosWithHttpInfo
     *
     * @param  \Microsoft\MsAds\Rest\Model\CampaignManagementService\AddVideosRequest $AddVideosRequest (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['addVideos'] to see the possible values for this operation
     *
     * @throws \Microsoft\MsAds\Rest\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \Microsoft\MsAds\Rest\Model\CampaignManagementService\AddVideosResponse|\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault|\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault|\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault|\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault, HTTP status code, HTTP response headers (array of strings)
     */
    public function addVideosWithHttpInfo($AddVideosRequest, string $contentType = self::contentTypes['addVideos'][0])
    {
        $request = $this->addVideosRequest($AddVideosRequest, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                $response = $e->getResponse();
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            switch($statusCode) {
                case 200:
                    return $this->getResponseContent($request, $response, '\Microsoft\MsAds\Rest\Model\CampaignManagementService\AddVideosResponse');
                case 400:
                    return $this->getResponseContent($request, $response, '\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault');
                case 500:
                    return $this->getResponseContent($request, $response, '\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault');
                case 401:
                    return $this->getResponseContent($request, $response, '\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault');
                case 403:
                    return $this->getResponseContent($request, $response, '\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault');
            }

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            $returnType = '\Microsoft\MsAds\Rest\Model\CampaignManagementService\AddVideosResponse';
            return $this->getResponseContent($request, $response, $returnType);

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Microsoft\MsAds\Rest\Model\CampaignManagementService\AddVideosResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 500:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 403:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation addVideosAsync
     *
     * @param  \Microsoft\MsAds\Rest\Model\CampaignManagementService\AddVideosRequest $AddVideosRequest (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['addVideos'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function addVideosAsync($AddVideosRequest, string $contentType = self::contentTypes['addVideos'][0])
    {
        return $this->addVideosAsyncWithHttpInfo($AddVideosRequest, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation addVideosAsyncWithHttpInfo
     *
     * @param  \Microsoft\MsAds\Rest\Model\CampaignManagementService\AddVideosRequest $AddVideosRequest (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['addVideos'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function addVideosAsyncWithHttpInfo($AddVideosRequest, string $contentType = self::contentTypes['addVideos'][0])
    {
        $returnType = '\Microsoft\MsAds\Rest\Model\CampaignManagementService\AddVideosResponse';
        $request = $this->addVideosRequest($AddVideosRequest, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return $this->onFulfilledResponse($response, $returnType);
                },
                function ($exception) {
                    $this->onRejectedResponse($exception);
                }
            );
    }

    /**
     * Create request for operation 'addVideos'
     *
     * @param  \Microsoft\MsAds\Rest\Model\CampaignManagementService\AddVideosRequest $AddVideosRequest (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['addVideos'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function addVideosRequest($AddVideosRequest, string $contentType = self::contentTypes['addVideos'][0])
    {

        // verify the required parameter 'AddVideosRequest' is set
        if ($AddVideosRequest === null || (is_array($AddVideosRequest) && count($AddVideosRequest) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $AddVideosRequest when calling addVideos'
            );
        }


        $resourcePath = '/CampaignManagement/v13/Videos';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $multipart = false;

        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        return $this->setupAndSendRequest(
            'POST',
            $resourcePath,
            $headers,
            $headerParams,
            $AddVideosRequest,
            $formParams,
            $multipart,
            true,
            true,
            false,
            'getHostSettingsForaddVideos',
            null,
            [],
            $queryParams
        );
    }

    /**
     * Operation appealEditorialRejections
     *
     * @param  \Microsoft\MsAds\Rest\Model\CampaignManagementService\AppealEditorialRejectionsRequest $AppealEditorialRejectionsRequest AppealEditorialRejectionsRequest (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['appealEditorialRejections'] to see the possible values for this operation
     *
     * @throws \Microsoft\MsAds\Rest\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \Microsoft\MsAds\Rest\Model\CampaignManagementService\AppealEditorialRejectionsResponse|\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault|\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault|\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault|\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault
     */
    public function appealEditorialRejections($AppealEditorialRejectionsRequest, string $contentType = self::contentTypes['appealEditorialRejections'][0])
    {
        list($response) = $this->appealEditorialRejectionsWithHttpInfo($AppealEditorialRejectionsRequest, $contentType);
        return $response;
    }

    /**
     * Operation appealEditorialRejectionsWithHttpInfo
     *
     * @param  \Microsoft\MsAds\Rest\Model\CampaignManagementService\AppealEditorialRejectionsRequest $AppealEditorialRejectionsRequest (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['appealEditorialRejections'] to see the possible values for this operation
     *
     * @throws \Microsoft\MsAds\Rest\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \Microsoft\MsAds\Rest\Model\CampaignManagementService\AppealEditorialRejectionsResponse|\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault|\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault|\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault|\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault, HTTP status code, HTTP response headers (array of strings)
     */
    public function appealEditorialRejectionsWithHttpInfo($AppealEditorialRejectionsRequest, string $contentType = self::contentTypes['appealEditorialRejections'][0])
    {
        $request = $this->appealEditorialRejectionsRequest($AppealEditorialRejectionsRequest, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                $response = $e->getResponse();
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            switch($statusCode) {
                case 200:
                    return $this->getResponseContent($request, $response, '\Microsoft\MsAds\Rest\Model\CampaignManagementService\AppealEditorialRejectionsResponse');
                case 400:
                    return $this->getResponseContent($request, $response, '\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault');
                case 500:
                    return $this->getResponseContent($request, $response, '\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault');
                case 401:
                    return $this->getResponseContent($request, $response, '\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault');
                case 403:
                    return $this->getResponseContent($request, $response, '\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault');
            }

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            $returnType = '\Microsoft\MsAds\Rest\Model\CampaignManagementService\AppealEditorialRejectionsResponse';
            return $this->getResponseContent($request, $response, $returnType);

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Microsoft\MsAds\Rest\Model\CampaignManagementService\AppealEditorialRejectionsResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 500:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 403:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation appealEditorialRejectionsAsync
     *
     * @param  \Microsoft\MsAds\Rest\Model\CampaignManagementService\AppealEditorialRejectionsRequest $AppealEditorialRejectionsRequest (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['appealEditorialRejections'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function appealEditorialRejectionsAsync($AppealEditorialRejectionsRequest, string $contentType = self::contentTypes['appealEditorialRejections'][0])
    {
        return $this->appealEditorialRejectionsAsyncWithHttpInfo($AppealEditorialRejectionsRequest, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation appealEditorialRejectionsAsyncWithHttpInfo
     *
     * @param  \Microsoft\MsAds\Rest\Model\CampaignManagementService\AppealEditorialRejectionsRequest $AppealEditorialRejectionsRequest (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['appealEditorialRejections'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function appealEditorialRejectionsAsyncWithHttpInfo($AppealEditorialRejectionsRequest, string $contentType = self::contentTypes['appealEditorialRejections'][0])
    {
        $returnType = '\Microsoft\MsAds\Rest\Model\CampaignManagementService\AppealEditorialRejectionsResponse';
        $request = $this->appealEditorialRejectionsRequest($AppealEditorialRejectionsRequest, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return $this->onFulfilledResponse($response, $returnType);
                },
                function ($exception) {
                    $this->onRejectedResponse($exception);
                }
            );
    }

    /**
     * Create request for operation 'appealEditorialRejections'
     *
     * @param  \Microsoft\MsAds\Rest\Model\CampaignManagementService\AppealEditorialRejectionsRequest $AppealEditorialRejectionsRequest (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['appealEditorialRejections'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function appealEditorialRejectionsRequest($AppealEditorialRejectionsRequest, string $contentType = self::contentTypes['appealEditorialRejections'][0])
    {

        // verify the required parameter 'AppealEditorialRejectionsRequest' is set
        if ($AppealEditorialRejectionsRequest === null || (is_array($AppealEditorialRejectionsRequest) && count($AppealEditorialRejectionsRequest) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $AppealEditorialRejectionsRequest when calling appealEditorialRejections'
            );
        }


        $resourcePath = '/CampaignManagement/v13/EditorialRejections/Appeal';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $multipart = false;

        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        return $this->setupAndSendRequest(
            'POST',
            $resourcePath,
            $headers,
            $headerParams,
            $AppealEditorialRejectionsRequest,
            $formParams,
            $multipart,
            true,
            true,
            false,
            'getHostSettingsForappealEditorialRejections',
            null,
            [],
            $queryParams
        );
    }

    /**
     * Operation applyAssetGroupListingGroupActions
     *
     * @param  \Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplyAssetGroupListingGroupActionsRequest $ApplyAssetGroupListingGroupActionsRequest ApplyAssetGroupListingGroupActionsRequest (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['applyAssetGroupListingGroupActions'] to see the possible values for this operation
     *
     * @throws \Microsoft\MsAds\Rest\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplyAssetGroupListingGroupActionsResponse|\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault|\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault|\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault|\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault
     */
    public function applyAssetGroupListingGroupActions($ApplyAssetGroupListingGroupActionsRequest, string $contentType = self::contentTypes['applyAssetGroupListingGroupActions'][0])
    {
        list($response) = $this->applyAssetGroupListingGroupActionsWithHttpInfo($ApplyAssetGroupListingGroupActionsRequest, $contentType);
        return $response;
    }

    /**
     * Operation applyAssetGroupListingGroupActionsWithHttpInfo
     *
     * @param  \Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplyAssetGroupListingGroupActionsRequest $ApplyAssetGroupListingGroupActionsRequest (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['applyAssetGroupListingGroupActions'] to see the possible values for this operation
     *
     * @throws \Microsoft\MsAds\Rest\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplyAssetGroupListingGroupActionsResponse|\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault|\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault|\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault|\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault, HTTP status code, HTTP response headers (array of strings)
     */
    public function applyAssetGroupListingGroupActionsWithHttpInfo($ApplyAssetGroupListingGroupActionsRequest, string $contentType = self::contentTypes['applyAssetGroupListingGroupActions'][0])
    {
        $request = $this->applyAssetGroupListingGroupActionsRequest($ApplyAssetGroupListingGroupActionsRequest, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                $response = $e->getResponse();
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            switch($statusCode) {
                case 200:
                    return $this->getResponseContent($request, $response, '\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplyAssetGroupListingGroupActionsResponse');
                case 400:
                    return $this->getResponseContent($request, $response, '\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault');
                case 500:
                    return $this->getResponseContent($request, $response, '\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault');
                case 401:
                    return $this->getResponseContent($request, $response, '\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault');
                case 403:
                    return $this->getResponseContent($request, $response, '\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault');
            }

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            $returnType = '\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplyAssetGroupListingGroupActionsResponse';
            return $this->getResponseContent($request, $response, $returnType);

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplyAssetGroupListingGroupActionsResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 500:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 403:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation applyAssetGroupListingGroupActionsAsync
     *
     * @param  \Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplyAssetGroupListingGroupActionsRequest $ApplyAssetGroupListingGroupActionsRequest (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['applyAssetGroupListingGroupActions'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function applyAssetGroupListingGroupActionsAsync($ApplyAssetGroupListingGroupActionsRequest, string $contentType = self::contentTypes['applyAssetGroupListingGroupActions'][0])
    {
        return $this->applyAssetGroupListingGroupActionsAsyncWithHttpInfo($ApplyAssetGroupListingGroupActionsRequest, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation applyAssetGroupListingGroupActionsAsyncWithHttpInfo
     *
     * @param  \Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplyAssetGroupListingGroupActionsRequest $ApplyAssetGroupListingGroupActionsRequest (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['applyAssetGroupListingGroupActions'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function applyAssetGroupListingGroupActionsAsyncWithHttpInfo($ApplyAssetGroupListingGroupActionsRequest, string $contentType = self::contentTypes['applyAssetGroupListingGroupActions'][0])
    {
        $returnType = '\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplyAssetGroupListingGroupActionsResponse';
        $request = $this->applyAssetGroupListingGroupActionsRequest($ApplyAssetGroupListingGroupActionsRequest, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return $this->onFulfilledResponse($response, $returnType);
                },
                function ($exception) {
                    $this->onRejectedResponse($exception);
                }
            );
    }

    /**
     * Create request for operation 'applyAssetGroupListingGroupActions'
     *
     * @param  \Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplyAssetGroupListingGroupActionsRequest $ApplyAssetGroupListingGroupActionsRequest (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['applyAssetGroupListingGroupActions'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function applyAssetGroupListingGroupActionsRequest($ApplyAssetGroupListingGroupActionsRequest, string $contentType = self::contentTypes['applyAssetGroupListingGroupActions'][0])
    {

        // verify the required parameter 'ApplyAssetGroupListingGroupActionsRequest' is set
        if ($ApplyAssetGroupListingGroupActionsRequest === null || (is_array($ApplyAssetGroupListingGroupActionsRequest) && count($ApplyAssetGroupListingGroupActionsRequest) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $ApplyAssetGroupListingGroupActionsRequest when calling applyAssetGroupListingGroupActions'
            );
        }


        $resourcePath = '/CampaignManagement/v13/AssetGroupListingGroupActions/Apply';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $multipart = false;

        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        return $this->setupAndSendRequest(
            'POST',
            $resourcePath,
            $headers,
            $headerParams,
            $ApplyAssetGroupListingGroupActionsRequest,
            $formParams,
            $multipart,
            true,
            true,
            false,
            'getHostSettingsForapplyAssetGroupListingGroupActions',
            null,
            [],
            $queryParams
        );
    }

    /**
     * Operation applyCustomerListItems
     *
     * @param  \Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplyCustomerListItemsRequest $ApplyCustomerListItemsRequest ApplyCustomerListItemsRequest (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['applyCustomerListItems'] to see the possible values for this operation
     *
     * @throws \Microsoft\MsAds\Rest\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplyCustomerListItemsResponse|\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault|\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault|\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault|\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault
     */
    public function applyCustomerListItems($ApplyCustomerListItemsRequest, string $contentType = self::contentTypes['applyCustomerListItems'][0])
    {
        list($response) = $this->applyCustomerListItemsWithHttpInfo($ApplyCustomerListItemsRequest, $contentType);
        return $response;
    }

    /**
     * Operation applyCustomerListItemsWithHttpInfo
     *
     * @param  \Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplyCustomerListItemsRequest $ApplyCustomerListItemsRequest (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['applyCustomerListItems'] to see the possible values for this operation
     *
     * @throws \Microsoft\MsAds\Rest\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplyCustomerListItemsResponse|\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault|\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault|\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault|\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault, HTTP status code, HTTP response headers (array of strings)
     */
    public function applyCustomerListItemsWithHttpInfo($ApplyCustomerListItemsRequest, string $contentType = self::contentTypes['applyCustomerListItems'][0])
    {
        $request = $this->applyCustomerListItemsRequest($ApplyCustomerListItemsRequest, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                $response = $e->getResponse();
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            switch($statusCode) {
                case 200:
                    return $this->getResponseContent($request, $response, '\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplyCustomerListItemsResponse');
                case 400:
                    return $this->getResponseContent($request, $response, '\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault');
                case 500:
                    return $this->getResponseContent($request, $response, '\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault');
                case 401:
                    return $this->getResponseContent($request, $response, '\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault');
                case 403:
                    return $this->getResponseContent($request, $response, '\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault');
            }

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            $returnType = '\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplyCustomerListItemsResponse';
            return $this->getResponseContent($request, $response, $returnType);

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplyCustomerListItemsResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 500:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 403:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation applyCustomerListItemsAsync
     *
     * @param  \Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplyCustomerListItemsRequest $ApplyCustomerListItemsRequest (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['applyCustomerListItems'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function applyCustomerListItemsAsync($ApplyCustomerListItemsRequest, string $contentType = self::contentTypes['applyCustomerListItems'][0])
    {
        return $this->applyCustomerListItemsAsyncWithHttpInfo($ApplyCustomerListItemsRequest, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation applyCustomerListItemsAsyncWithHttpInfo
     *
     * @param  \Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplyCustomerListItemsRequest $ApplyCustomerListItemsRequest (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['applyCustomerListItems'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function applyCustomerListItemsAsyncWithHttpInfo($ApplyCustomerListItemsRequest, string $contentType = self::contentTypes['applyCustomerListItems'][0])
    {
        $returnType = '\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplyCustomerListItemsResponse';
        $request = $this->applyCustomerListItemsRequest($ApplyCustomerListItemsRequest, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return $this->onFulfilledResponse($response, $returnType);
                },
                function ($exception) {
                    $this->onRejectedResponse($exception);
                }
            );
    }

    /**
     * Create request for operation 'applyCustomerListItems'
     *
     * @param  \Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplyCustomerListItemsRequest $ApplyCustomerListItemsRequest (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['applyCustomerListItems'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function applyCustomerListItemsRequest($ApplyCustomerListItemsRequest, string $contentType = self::contentTypes['applyCustomerListItems'][0])
    {

        // verify the required parameter 'ApplyCustomerListItemsRequest' is set
        if ($ApplyCustomerListItemsRequest === null || (is_array($ApplyCustomerListItemsRequest) && count($ApplyCustomerListItemsRequest) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $ApplyCustomerListItemsRequest when calling applyCustomerListItems'
            );
        }


        $resourcePath = '/CampaignManagement/v13/CustomerListItems/Apply';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $multipart = false;

        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        return $this->setupAndSendRequest(
            'POST',
            $resourcePath,
            $headers,
            $headerParams,
            $ApplyCustomerListItemsRequest,
            $formParams,
            $multipart,
            true,
            true,
            false,
            'getHostSettingsForapplyCustomerListItems',
            null,
            [],
            $queryParams
        );
    }

    /**
     * Operation applyCustomerListUserData
     *
     * @param  \Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplyCustomerListUserDataRequest $ApplyCustomerListUserDataRequest ApplyCustomerListUserDataRequest (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['applyCustomerListUserData'] to see the possible values for this operation
     *
     * @throws \Microsoft\MsAds\Rest\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplyCustomerListUserDataResponse|\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault|\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault|\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault|\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault
     */
    public function applyCustomerListUserData($ApplyCustomerListUserDataRequest, string $contentType = self::contentTypes['applyCustomerListUserData'][0])
    {
        list($response) = $this->applyCustomerListUserDataWithHttpInfo($ApplyCustomerListUserDataRequest, $contentType);
        return $response;
    }

    /**
     * Operation applyCustomerListUserDataWithHttpInfo
     *
     * @param  \Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplyCustomerListUserDataRequest $ApplyCustomerListUserDataRequest (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['applyCustomerListUserData'] to see the possible values for this operation
     *
     * @throws \Microsoft\MsAds\Rest\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplyCustomerListUserDataResponse|\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault|\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault|\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault|\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault, HTTP status code, HTTP response headers (array of strings)
     */
    public function applyCustomerListUserDataWithHttpInfo($ApplyCustomerListUserDataRequest, string $contentType = self::contentTypes['applyCustomerListUserData'][0])
    {
        $request = $this->applyCustomerListUserDataRequest($ApplyCustomerListUserDataRequest, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                $response = $e->getResponse();
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            switch($statusCode) {
                case 200:
                    return $this->getResponseContent($request, $response, '\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplyCustomerListUserDataResponse');
                case 400:
                    return $this->getResponseContent($request, $response, '\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault');
                case 500:
                    return $this->getResponseContent($request, $response, '\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault');
                case 401:
                    return $this->getResponseContent($request, $response, '\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault');
                case 403:
                    return $this->getResponseContent($request, $response, '\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault');
            }

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            $returnType = '\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplyCustomerListUserDataResponse';
            return $this->getResponseContent($request, $response, $returnType);

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplyCustomerListUserDataResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 500:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 403:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation applyCustomerListUserDataAsync
     *
     * @param  \Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplyCustomerListUserDataRequest $ApplyCustomerListUserDataRequest (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['applyCustomerListUserData'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function applyCustomerListUserDataAsync($ApplyCustomerListUserDataRequest, string $contentType = self::contentTypes['applyCustomerListUserData'][0])
    {
        return $this->applyCustomerListUserDataAsyncWithHttpInfo($ApplyCustomerListUserDataRequest, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation applyCustomerListUserDataAsyncWithHttpInfo
     *
     * @param  \Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplyCustomerListUserDataRequest $ApplyCustomerListUserDataRequest (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['applyCustomerListUserData'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function applyCustomerListUserDataAsyncWithHttpInfo($ApplyCustomerListUserDataRequest, string $contentType = self::contentTypes['applyCustomerListUserData'][0])
    {
        $returnType = '\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplyCustomerListUserDataResponse';
        $request = $this->applyCustomerListUserDataRequest($ApplyCustomerListUserDataRequest, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return $this->onFulfilledResponse($response, $returnType);
                },
                function ($exception) {
                    $this->onRejectedResponse($exception);
                }
            );
    }

    /**
     * Create request for operation 'applyCustomerListUserData'
     *
     * @param  \Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplyCustomerListUserDataRequest $ApplyCustomerListUserDataRequest (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['applyCustomerListUserData'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function applyCustomerListUserDataRequest($ApplyCustomerListUserDataRequest, string $contentType = self::contentTypes['applyCustomerListUserData'][0])
    {

        // verify the required parameter 'ApplyCustomerListUserDataRequest' is set
        if ($ApplyCustomerListUserDataRequest === null || (is_array($ApplyCustomerListUserDataRequest) && count($ApplyCustomerListUserDataRequest) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $ApplyCustomerListUserDataRequest when calling applyCustomerListUserData'
            );
        }


        $resourcePath = '/CampaignManagement/v13/CustomerListUserData/Apply';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $multipart = false;

        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        return $this->setupAndSendRequest(
            'POST',
            $resourcePath,
            $headers,
            $headerParams,
            $ApplyCustomerListUserDataRequest,
            $formParams,
            $multipart,
            true,
            true,
            false,
            'getHostSettingsForapplyCustomerListUserData',
            null,
            [],
            $queryParams
        );
    }

    /**
     * Operation applyHotelGroupActions
     *
     * @param  \Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplyHotelGroupActionsRequest $ApplyHotelGroupActionsRequest ApplyHotelGroupActionsRequest (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['applyHotelGroupActions'] to see the possible values for this operation
     *
     * @throws \Microsoft\MsAds\Rest\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplyHotelGroupActionsResponse|\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault|\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault|\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault|\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault
     */
    public function applyHotelGroupActions($ApplyHotelGroupActionsRequest, string $contentType = self::contentTypes['applyHotelGroupActions'][0])
    {
        list($response) = $this->applyHotelGroupActionsWithHttpInfo($ApplyHotelGroupActionsRequest, $contentType);
        return $response;
    }

    /**
     * Operation applyHotelGroupActionsWithHttpInfo
     *
     * @param  \Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplyHotelGroupActionsRequest $ApplyHotelGroupActionsRequest (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['applyHotelGroupActions'] to see the possible values for this operation
     *
     * @throws \Microsoft\MsAds\Rest\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplyHotelGroupActionsResponse|\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault|\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault|\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault|\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault, HTTP status code, HTTP response headers (array of strings)
     */
    public function applyHotelGroupActionsWithHttpInfo($ApplyHotelGroupActionsRequest, string $contentType = self::contentTypes['applyHotelGroupActions'][0])
    {
        $request = $this->applyHotelGroupActionsRequest($ApplyHotelGroupActionsRequest, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                $response = $e->getResponse();
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            switch($statusCode) {
                case 200:
                    return $this->getResponseContent($request, $response, '\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplyHotelGroupActionsResponse');
                case 400:
                    return $this->getResponseContent($request, $response, '\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault');
                case 500:
                    return $this->getResponseContent($request, $response, '\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault');
                case 401:
                    return $this->getResponseContent($request, $response, '\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault');
                case 403:
                    return $this->getResponseContent($request, $response, '\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault');
            }

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            $returnType = '\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplyHotelGroupActionsResponse';
            return $this->getResponseContent($request, $response, $returnType);

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplyHotelGroupActionsResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 500:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 403:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation applyHotelGroupActionsAsync
     *
     * @param  \Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplyHotelGroupActionsRequest $ApplyHotelGroupActionsRequest (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['applyHotelGroupActions'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function applyHotelGroupActionsAsync($ApplyHotelGroupActionsRequest, string $contentType = self::contentTypes['applyHotelGroupActions'][0])
    {
        return $this->applyHotelGroupActionsAsyncWithHttpInfo($ApplyHotelGroupActionsRequest, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation applyHotelGroupActionsAsyncWithHttpInfo
     *
     * @param  \Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplyHotelGroupActionsRequest $ApplyHotelGroupActionsRequest (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['applyHotelGroupActions'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function applyHotelGroupActionsAsyncWithHttpInfo($ApplyHotelGroupActionsRequest, string $contentType = self::contentTypes['applyHotelGroupActions'][0])
    {
        $returnType = '\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplyHotelGroupActionsResponse';
        $request = $this->applyHotelGroupActionsRequest($ApplyHotelGroupActionsRequest, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return $this->onFulfilledResponse($response, $returnType);
                },
                function ($exception) {
                    $this->onRejectedResponse($exception);
                }
            );
    }

    /**
     * Create request for operation 'applyHotelGroupActions'
     *
     * @param  \Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplyHotelGroupActionsRequest $ApplyHotelGroupActionsRequest (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['applyHotelGroupActions'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function applyHotelGroupActionsRequest($ApplyHotelGroupActionsRequest, string $contentType = self::contentTypes['applyHotelGroupActions'][0])
    {

        // verify the required parameter 'ApplyHotelGroupActionsRequest' is set
        if ($ApplyHotelGroupActionsRequest === null || (is_array($ApplyHotelGroupActionsRequest) && count($ApplyHotelGroupActionsRequest) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $ApplyHotelGroupActionsRequest when calling applyHotelGroupActions'
            );
        }


        $resourcePath = '/CampaignManagement/v13/HotelGroupActions/Apply';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $multipart = false;

        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        return $this->setupAndSendRequest(
            'POST',
            $resourcePath,
            $headers,
            $headerParams,
            $ApplyHotelGroupActionsRequest,
            $formParams,
            $multipart,
            true,
            true,
            false,
            'getHostSettingsForapplyHotelGroupActions',
            null,
            [],
            $queryParams
        );
    }

    /**
     * Operation applyOfflineConversionAdjustments
     *
     * @param  \Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplyOfflineConversionAdjustmentsRequest $ApplyOfflineConversionAdjustmentsRequest ApplyOfflineConversionAdjustmentsRequest (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['applyOfflineConversionAdjustments'] to see the possible values for this operation
     *
     * @throws \Microsoft\MsAds\Rest\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplyOfflineConversionAdjustmentsResponse|\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault|\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault|\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault|\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault
     */
    public function applyOfflineConversionAdjustments($ApplyOfflineConversionAdjustmentsRequest, string $contentType = self::contentTypes['applyOfflineConversionAdjustments'][0])
    {
        list($response) = $this->applyOfflineConversionAdjustmentsWithHttpInfo($ApplyOfflineConversionAdjustmentsRequest, $contentType);
        return $response;
    }

    /**
     * Operation applyOfflineConversionAdjustmentsWithHttpInfo
     *
     * @param  \Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplyOfflineConversionAdjustmentsRequest $ApplyOfflineConversionAdjustmentsRequest (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['applyOfflineConversionAdjustments'] to see the possible values for this operation
     *
     * @throws \Microsoft\MsAds\Rest\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplyOfflineConversionAdjustmentsResponse|\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault|\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault|\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault|\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault, HTTP status code, HTTP response headers (array of strings)
     */
    public function applyOfflineConversionAdjustmentsWithHttpInfo($ApplyOfflineConversionAdjustmentsRequest, string $contentType = self::contentTypes['applyOfflineConversionAdjustments'][0])
    {
        $request = $this->applyOfflineConversionAdjustmentsRequest($ApplyOfflineConversionAdjustmentsRequest, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                $response = $e->getResponse();
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            switch($statusCode) {
                case 200:
                    return $this->getResponseContent($request, $response, '\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplyOfflineConversionAdjustmentsResponse');
                case 400:
                    return $this->getResponseContent($request, $response, '\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault');
                case 500:
                    return $this->getResponseContent($request, $response, '\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault');
                case 401:
                    return $this->getResponseContent($request, $response, '\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault');
                case 403:
                    return $this->getResponseContent($request, $response, '\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault');
            }

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            $returnType = '\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplyOfflineConversionAdjustmentsResponse';
            return $this->getResponseContent($request, $response, $returnType);

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplyOfflineConversionAdjustmentsResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 500:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 403:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation applyOfflineConversionAdjustmentsAsync
     *
     * @param  \Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplyOfflineConversionAdjustmentsRequest $ApplyOfflineConversionAdjustmentsRequest (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['applyOfflineConversionAdjustments'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function applyOfflineConversionAdjustmentsAsync($ApplyOfflineConversionAdjustmentsRequest, string $contentType = self::contentTypes['applyOfflineConversionAdjustments'][0])
    {
        return $this->applyOfflineConversionAdjustmentsAsyncWithHttpInfo($ApplyOfflineConversionAdjustmentsRequest, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation applyOfflineConversionAdjustmentsAsyncWithHttpInfo
     *
     * @param  \Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplyOfflineConversionAdjustmentsRequest $ApplyOfflineConversionAdjustmentsRequest (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['applyOfflineConversionAdjustments'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function applyOfflineConversionAdjustmentsAsyncWithHttpInfo($ApplyOfflineConversionAdjustmentsRequest, string $contentType = self::contentTypes['applyOfflineConversionAdjustments'][0])
    {
        $returnType = '\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplyOfflineConversionAdjustmentsResponse';
        $request = $this->applyOfflineConversionAdjustmentsRequest($ApplyOfflineConversionAdjustmentsRequest, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return $this->onFulfilledResponse($response, $returnType);
                },
                function ($exception) {
                    $this->onRejectedResponse($exception);
                }
            );
    }

    /**
     * Create request for operation 'applyOfflineConversionAdjustments'
     *
     * @param  \Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplyOfflineConversionAdjustmentsRequest $ApplyOfflineConversionAdjustmentsRequest (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['applyOfflineConversionAdjustments'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function applyOfflineConversionAdjustmentsRequest($ApplyOfflineConversionAdjustmentsRequest, string $contentType = self::contentTypes['applyOfflineConversionAdjustments'][0])
    {

        // verify the required parameter 'ApplyOfflineConversionAdjustmentsRequest' is set
        if ($ApplyOfflineConversionAdjustmentsRequest === null || (is_array($ApplyOfflineConversionAdjustmentsRequest) && count($ApplyOfflineConversionAdjustmentsRequest) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $ApplyOfflineConversionAdjustmentsRequest when calling applyOfflineConversionAdjustments'
            );
        }


        $resourcePath = '/CampaignManagement/v13/OfflineConversionAdjustments/Apply';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $multipart = false;

        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        return $this->setupAndSendRequest(
            'POST',
            $resourcePath,
            $headers,
            $headerParams,
            $ApplyOfflineConversionAdjustmentsRequest,
            $formParams,
            $multipart,
            true,
            true,
            false,
            'getHostSettingsForapplyOfflineConversionAdjustments',
            null,
            [],
            $queryParams
        );
    }

    /**
     * Operation applyOfflineConversions
     *
     * @param  \Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplyOfflineConversionsRequest $ApplyOfflineConversionsRequest ApplyOfflineConversionsRequest (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['applyOfflineConversions'] to see the possible values for this operation
     *
     * @throws \Microsoft\MsAds\Rest\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplyOfflineConversionsResponse|\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault|\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault|\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault|\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault
     */
    public function applyOfflineConversions($ApplyOfflineConversionsRequest, string $contentType = self::contentTypes['applyOfflineConversions'][0])
    {
        list($response) = $this->applyOfflineConversionsWithHttpInfo($ApplyOfflineConversionsRequest, $contentType);
        return $response;
    }

    /**
     * Operation applyOfflineConversionsWithHttpInfo
     *
     * @param  \Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplyOfflineConversionsRequest $ApplyOfflineConversionsRequest (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['applyOfflineConversions'] to see the possible values for this operation
     *
     * @throws \Microsoft\MsAds\Rest\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplyOfflineConversionsResponse|\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault|\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault|\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault|\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault, HTTP status code, HTTP response headers (array of strings)
     */
    public function applyOfflineConversionsWithHttpInfo($ApplyOfflineConversionsRequest, string $contentType = self::contentTypes['applyOfflineConversions'][0])
    {
        $request = $this->applyOfflineConversionsRequest($ApplyOfflineConversionsRequest, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                $response = $e->getResponse();
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            switch($statusCode) {
                case 200:
                    return $this->getResponseContent($request, $response, '\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplyOfflineConversionsResponse');
                case 400:
                    return $this->getResponseContent($request, $response, '\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault');
                case 500:
                    return $this->getResponseContent($request, $response, '\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault');
                case 401:
                    return $this->getResponseContent($request, $response, '\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault');
                case 403:
                    return $this->getResponseContent($request, $response, '\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault');
            }

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            $returnType = '\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplyOfflineConversionsResponse';
            return $this->getResponseContent($request, $response, $returnType);

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplyOfflineConversionsResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 500:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 403:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation applyOfflineConversionsAsync
     *
     * @param  \Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplyOfflineConversionsRequest $ApplyOfflineConversionsRequest (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['applyOfflineConversions'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function applyOfflineConversionsAsync($ApplyOfflineConversionsRequest, string $contentType = self::contentTypes['applyOfflineConversions'][0])
    {
        return $this->applyOfflineConversionsAsyncWithHttpInfo($ApplyOfflineConversionsRequest, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation applyOfflineConversionsAsyncWithHttpInfo
     *
     * @param  \Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplyOfflineConversionsRequest $ApplyOfflineConversionsRequest (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['applyOfflineConversions'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function applyOfflineConversionsAsyncWithHttpInfo($ApplyOfflineConversionsRequest, string $contentType = self::contentTypes['applyOfflineConversions'][0])
    {
        $returnType = '\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplyOfflineConversionsResponse';
        $request = $this->applyOfflineConversionsRequest($ApplyOfflineConversionsRequest, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return $this->onFulfilledResponse($response, $returnType);
                },
                function ($exception) {
                    $this->onRejectedResponse($exception);
                }
            );
    }

    /**
     * Create request for operation 'applyOfflineConversions'
     *
     * @param  \Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplyOfflineConversionsRequest $ApplyOfflineConversionsRequest (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['applyOfflineConversions'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function applyOfflineConversionsRequest($ApplyOfflineConversionsRequest, string $contentType = self::contentTypes['applyOfflineConversions'][0])
    {

        // verify the required parameter 'ApplyOfflineConversionsRequest' is set
        if ($ApplyOfflineConversionsRequest === null || (is_array($ApplyOfflineConversionsRequest) && count($ApplyOfflineConversionsRequest) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $ApplyOfflineConversionsRequest when calling applyOfflineConversions'
            );
        }


        $resourcePath = '/CampaignManagement/v13/OfflineConversions/Apply';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $multipart = false;

        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        return $this->setupAndSendRequest(
            'POST',
            $resourcePath,
            $headers,
            $headerParams,
            $ApplyOfflineConversionsRequest,
            $formParams,
            $multipart,
            true,
            true,
            false,
            'getHostSettingsForapplyOfflineConversions',
            null,
            [],
            $queryParams
        );
    }

    /**
     * Operation applyOnlineConversionAdjustments
     *
     * @param  \Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplyOnlineConversionAdjustmentsRequest $ApplyOnlineConversionAdjustmentsRequest ApplyOnlineConversionAdjustmentsRequest (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['applyOnlineConversionAdjustments'] to see the possible values for this operation
     *
     * @throws \Microsoft\MsAds\Rest\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplyOnlineConversionAdjustmentsResponse|\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault|\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault|\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault|\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault
     */
    public function applyOnlineConversionAdjustments($ApplyOnlineConversionAdjustmentsRequest, string $contentType = self::contentTypes['applyOnlineConversionAdjustments'][0])
    {
        list($response) = $this->applyOnlineConversionAdjustmentsWithHttpInfo($ApplyOnlineConversionAdjustmentsRequest, $contentType);
        return $response;
    }

    /**
     * Operation applyOnlineConversionAdjustmentsWithHttpInfo
     *
     * @param  \Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplyOnlineConversionAdjustmentsRequest $ApplyOnlineConversionAdjustmentsRequest (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['applyOnlineConversionAdjustments'] to see the possible values for this operation
     *
     * @throws \Microsoft\MsAds\Rest\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplyOnlineConversionAdjustmentsResponse|\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault|\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault|\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault|\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault, HTTP status code, HTTP response headers (array of strings)
     */
    public function applyOnlineConversionAdjustmentsWithHttpInfo($ApplyOnlineConversionAdjustmentsRequest, string $contentType = self::contentTypes['applyOnlineConversionAdjustments'][0])
    {
        $request = $this->applyOnlineConversionAdjustmentsRequest($ApplyOnlineConversionAdjustmentsRequest, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                $response = $e->getResponse();
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            switch($statusCode) {
                case 200:
                    return $this->getResponseContent($request, $response, '\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplyOnlineConversionAdjustmentsResponse');
                case 400:
                    return $this->getResponseContent($request, $response, '\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault');
                case 500:
                    return $this->getResponseContent($request, $response, '\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault');
                case 401:
                    return $this->getResponseContent($request, $response, '\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault');
                case 403:
                    return $this->getResponseContent($request, $response, '\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault');
            }

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            $returnType = '\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplyOnlineConversionAdjustmentsResponse';
            return $this->getResponseContent($request, $response, $returnType);

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplyOnlineConversionAdjustmentsResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 500:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 403:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation applyOnlineConversionAdjustmentsAsync
     *
     * @param  \Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplyOnlineConversionAdjustmentsRequest $ApplyOnlineConversionAdjustmentsRequest (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['applyOnlineConversionAdjustments'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function applyOnlineConversionAdjustmentsAsync($ApplyOnlineConversionAdjustmentsRequest, string $contentType = self::contentTypes['applyOnlineConversionAdjustments'][0])
    {
        return $this->applyOnlineConversionAdjustmentsAsyncWithHttpInfo($ApplyOnlineConversionAdjustmentsRequest, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation applyOnlineConversionAdjustmentsAsyncWithHttpInfo
     *
     * @param  \Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplyOnlineConversionAdjustmentsRequest $ApplyOnlineConversionAdjustmentsRequest (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['applyOnlineConversionAdjustments'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function applyOnlineConversionAdjustmentsAsyncWithHttpInfo($ApplyOnlineConversionAdjustmentsRequest, string $contentType = self::contentTypes['applyOnlineConversionAdjustments'][0])
    {
        $returnType = '\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplyOnlineConversionAdjustmentsResponse';
        $request = $this->applyOnlineConversionAdjustmentsRequest($ApplyOnlineConversionAdjustmentsRequest, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return $this->onFulfilledResponse($response, $returnType);
                },
                function ($exception) {
                    $this->onRejectedResponse($exception);
                }
            );
    }

    /**
     * Create request for operation 'applyOnlineConversionAdjustments'
     *
     * @param  \Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplyOnlineConversionAdjustmentsRequest $ApplyOnlineConversionAdjustmentsRequest (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['applyOnlineConversionAdjustments'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function applyOnlineConversionAdjustmentsRequest($ApplyOnlineConversionAdjustmentsRequest, string $contentType = self::contentTypes['applyOnlineConversionAdjustments'][0])
    {

        // verify the required parameter 'ApplyOnlineConversionAdjustmentsRequest' is set
        if ($ApplyOnlineConversionAdjustmentsRequest === null || (is_array($ApplyOnlineConversionAdjustmentsRequest) && count($ApplyOnlineConversionAdjustmentsRequest) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $ApplyOnlineConversionAdjustmentsRequest when calling applyOnlineConversionAdjustments'
            );
        }


        $resourcePath = '/CampaignManagement/v13/OnlineConversionAdjustments/Apply';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $multipart = false;

        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        return $this->setupAndSendRequest(
            'POST',
            $resourcePath,
            $headers,
            $headerParams,
            $ApplyOnlineConversionAdjustmentsRequest,
            $formParams,
            $multipart,
            true,
            true,
            false,
            'getHostSettingsForapplyOnlineConversionAdjustments',
            null,
            [],
            $queryParams
        );
    }

    /**
     * Operation applyProductPartitionActions
     *
     * @param  \Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplyProductPartitionActionsRequest $ApplyProductPartitionActionsRequest ApplyProductPartitionActionsRequest (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['applyProductPartitionActions'] to see the possible values for this operation
     *
     * @throws \Microsoft\MsAds\Rest\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplyProductPartitionActionsResponse|\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault|\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault|\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault|\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault
     */
    public function applyProductPartitionActions($ApplyProductPartitionActionsRequest, string $contentType = self::contentTypes['applyProductPartitionActions'][0])
    {
        list($response) = $this->applyProductPartitionActionsWithHttpInfo($ApplyProductPartitionActionsRequest, $contentType);
        return $response;
    }

    /**
     * Operation applyProductPartitionActionsWithHttpInfo
     *
     * @param  \Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplyProductPartitionActionsRequest $ApplyProductPartitionActionsRequest (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['applyProductPartitionActions'] to see the possible values for this operation
     *
     * @throws \Microsoft\MsAds\Rest\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplyProductPartitionActionsResponse|\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault|\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault|\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault|\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault, HTTP status code, HTTP response headers (array of strings)
     */
    public function applyProductPartitionActionsWithHttpInfo($ApplyProductPartitionActionsRequest, string $contentType = self::contentTypes['applyProductPartitionActions'][0])
    {
        $request = $this->applyProductPartitionActionsRequest($ApplyProductPartitionActionsRequest, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                $response = $e->getResponse();
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            switch($statusCode) {
                case 200:
                    return $this->getResponseContent($request, $response, '\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplyProductPartitionActionsResponse');
                case 400:
                    return $this->getResponseContent($request, $response, '\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault');
                case 500:
                    return $this->getResponseContent($request, $response, '\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault');
                case 401:
                    return $this->getResponseContent($request, $response, '\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault');
                case 403:
                    return $this->getResponseContent($request, $response, '\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault');
            }

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            $returnType = '\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplyProductPartitionActionsResponse';
            return $this->getResponseContent($request, $response, $returnType);

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplyProductPartitionActionsResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 500:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 403:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation applyProductPartitionActionsAsync
     *
     * @param  \Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplyProductPartitionActionsRequest $ApplyProductPartitionActionsRequest (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['applyProductPartitionActions'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function applyProductPartitionActionsAsync($ApplyProductPartitionActionsRequest, string $contentType = self::contentTypes['applyProductPartitionActions'][0])
    {
        return $this->applyProductPartitionActionsAsyncWithHttpInfo($ApplyProductPartitionActionsRequest, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation applyProductPartitionActionsAsyncWithHttpInfo
     *
     * @param  \Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplyProductPartitionActionsRequest $ApplyProductPartitionActionsRequest (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['applyProductPartitionActions'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function applyProductPartitionActionsAsyncWithHttpInfo($ApplyProductPartitionActionsRequest, string $contentType = self::contentTypes['applyProductPartitionActions'][0])
    {
        $returnType = '\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplyProductPartitionActionsResponse';
        $request = $this->applyProductPartitionActionsRequest($ApplyProductPartitionActionsRequest, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return $this->onFulfilledResponse($response, $returnType);
                },
                function ($exception) {
                    $this->onRejectedResponse($exception);
                }
            );
    }

    /**
     * Create request for operation 'applyProductPartitionActions'
     *
     * @param  \Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplyProductPartitionActionsRequest $ApplyProductPartitionActionsRequest (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['applyProductPartitionActions'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function applyProductPartitionActionsRequest($ApplyProductPartitionActionsRequest, string $contentType = self::contentTypes['applyProductPartitionActions'][0])
    {

        // verify the required parameter 'ApplyProductPartitionActionsRequest' is set
        if ($ApplyProductPartitionActionsRequest === null || (is_array($ApplyProductPartitionActionsRequest) && count($ApplyProductPartitionActionsRequest) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $ApplyProductPartitionActionsRequest when calling applyProductPartitionActions'
            );
        }


        $resourcePath = '/CampaignManagement/v13/ProductPartitionActions/Apply';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $multipart = false;

        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        return $this->setupAndSendRequest(
            'POST',
            $resourcePath,
            $headers,
            $headerParams,
            $ApplyProductPartitionActionsRequest,
            $formParams,
            $multipart,
            true,
            true,
            false,
            'getHostSettingsForapplyProductPartitionActions',
            null,
            [],
            $queryParams
        );
    }

    /**
     * Operation createAssetGroupRecommendation
     *
     * @param  \Microsoft\MsAds\Rest\Model\CampaignManagementService\CreateAssetGroupRecommendationRequest $CreateAssetGroupRecommendationRequest CreateAssetGroupRecommendationRequest (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['createAssetGroupRecommendation'] to see the possible values for this operation
     *
     * @throws \Microsoft\MsAds\Rest\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \Microsoft\MsAds\Rest\Model\CampaignManagementService\CreateAssetGroupRecommendationResponse|\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault|\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault|\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault|\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault
     */
    public function createAssetGroupRecommendation($CreateAssetGroupRecommendationRequest, string $contentType = self::contentTypes['createAssetGroupRecommendation'][0])
    {
        list($response) = $this->createAssetGroupRecommendationWithHttpInfo($CreateAssetGroupRecommendationRequest, $contentType);
        return $response;
    }

    /**
     * Operation createAssetGroupRecommendationWithHttpInfo
     *
     * @param  \Microsoft\MsAds\Rest\Model\CampaignManagementService\CreateAssetGroupRecommendationRequest $CreateAssetGroupRecommendationRequest (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['createAssetGroupRecommendation'] to see the possible values for this operation
     *
     * @throws \Microsoft\MsAds\Rest\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \Microsoft\MsAds\Rest\Model\CampaignManagementService\CreateAssetGroupRecommendationResponse|\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault|\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault|\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault|\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault, HTTP status code, HTTP response headers (array of strings)
     */
    public function createAssetGroupRecommendationWithHttpInfo($CreateAssetGroupRecommendationRequest, string $contentType = self::contentTypes['createAssetGroupRecommendation'][0])
    {
        $request = $this->createAssetGroupRecommendationRequest($CreateAssetGroupRecommendationRequest, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                $response = $e->getResponse();
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            switch($statusCode) {
                case 200:
                    return $this->getResponseContent($request, $response, '\Microsoft\MsAds\Rest\Model\CampaignManagementService\CreateAssetGroupRecommendationResponse');
                case 400:
                    return $this->getResponseContent($request, $response, '\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault');
                case 500:
                    return $this->getResponseContent($request, $response, '\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault');
                case 401:
                    return $this->getResponseContent($request, $response, '\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault');
                case 403:
                    return $this->getResponseContent($request, $response, '\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault');
            }

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            $returnType = '\Microsoft\MsAds\Rest\Model\CampaignManagementService\CreateAssetGroupRecommendationResponse';
            return $this->getResponseContent($request, $response, $returnType);

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Microsoft\MsAds\Rest\Model\CampaignManagementService\CreateAssetGroupRecommendationResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 500:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 403:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation createAssetGroupRecommendationAsync
     *
     * @param  \Microsoft\MsAds\Rest\Model\CampaignManagementService\CreateAssetGroupRecommendationRequest $CreateAssetGroupRecommendationRequest (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['createAssetGroupRecommendation'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function createAssetGroupRecommendationAsync($CreateAssetGroupRecommendationRequest, string $contentType = self::contentTypes['createAssetGroupRecommendation'][0])
    {
        return $this->createAssetGroupRecommendationAsyncWithHttpInfo($CreateAssetGroupRecommendationRequest, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation createAssetGroupRecommendationAsyncWithHttpInfo
     *
     * @param  \Microsoft\MsAds\Rest\Model\CampaignManagementService\CreateAssetGroupRecommendationRequest $CreateAssetGroupRecommendationRequest (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['createAssetGroupRecommendation'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function createAssetGroupRecommendationAsyncWithHttpInfo($CreateAssetGroupRecommendationRequest, string $contentType = self::contentTypes['createAssetGroupRecommendation'][0])
    {
        $returnType = '\Microsoft\MsAds\Rest\Model\CampaignManagementService\CreateAssetGroupRecommendationResponse';
        $request = $this->createAssetGroupRecommendationRequest($CreateAssetGroupRecommendationRequest, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return $this->onFulfilledResponse($response, $returnType);
                },
                function ($exception) {
                    $this->onRejectedResponse($exception);
                }
            );
    }

    /**
     * Create request for operation 'createAssetGroupRecommendation'
     *
     * @param  \Microsoft\MsAds\Rest\Model\CampaignManagementService\CreateAssetGroupRecommendationRequest $CreateAssetGroupRecommendationRequest (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['createAssetGroupRecommendation'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function createAssetGroupRecommendationRequest($CreateAssetGroupRecommendationRequest, string $contentType = self::contentTypes['createAssetGroupRecommendation'][0])
    {

        // verify the required parameter 'CreateAssetGroupRecommendationRequest' is set
        if ($CreateAssetGroupRecommendationRequest === null || (is_array($CreateAssetGroupRecommendationRequest) && count($CreateAssetGroupRecommendationRequest) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $CreateAssetGroupRecommendationRequest when calling createAssetGroupRecommendation'
            );
        }


        $resourcePath = '/CampaignManagement/v13/AssetGroupRecommendation/Create';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $multipart = false;

        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        return $this->setupAndSendRequest(
            'POST',
            $resourcePath,
            $headers,
            $headerParams,
            $CreateAssetGroupRecommendationRequest,
            $formParams,
            $multipart,
            true,
            true,
            false,
            'getHostSettingsForcreateAssetGroupRecommendation',
            null,
            [],
            $queryParams
        );
    }

    /**
     * Operation createResponsiveAdRecommendation
     *
     * @param  \Microsoft\MsAds\Rest\Model\CampaignManagementService\CreateResponsiveAdRecommendationRequest $CreateResponsiveAdRecommendationRequest CreateResponsiveAdRecommendationRequest (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['createResponsiveAdRecommendation'] to see the possible values for this operation
     *
     * @throws \Microsoft\MsAds\Rest\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \Microsoft\MsAds\Rest\Model\CampaignManagementService\CreateResponsiveAdRecommendationResponse|\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault|\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault|\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault|\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault
     */
    public function createResponsiveAdRecommendation($CreateResponsiveAdRecommendationRequest, string $contentType = self::contentTypes['createResponsiveAdRecommendation'][0])
    {
        list($response) = $this->createResponsiveAdRecommendationWithHttpInfo($CreateResponsiveAdRecommendationRequest, $contentType);
        return $response;
    }

    /**
     * Operation createResponsiveAdRecommendationWithHttpInfo
     *
     * @param  \Microsoft\MsAds\Rest\Model\CampaignManagementService\CreateResponsiveAdRecommendationRequest $CreateResponsiveAdRecommendationRequest (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['createResponsiveAdRecommendation'] to see the possible values for this operation
     *
     * @throws \Microsoft\MsAds\Rest\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \Microsoft\MsAds\Rest\Model\CampaignManagementService\CreateResponsiveAdRecommendationResponse|\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault|\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault|\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault|\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault, HTTP status code, HTTP response headers (array of strings)
     */
    public function createResponsiveAdRecommendationWithHttpInfo($CreateResponsiveAdRecommendationRequest, string $contentType = self::contentTypes['createResponsiveAdRecommendation'][0])
    {
        $request = $this->createResponsiveAdRecommendationRequest($CreateResponsiveAdRecommendationRequest, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                $response = $e->getResponse();
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            switch($statusCode) {
                case 200:
                    return $this->getResponseContent($request, $response, '\Microsoft\MsAds\Rest\Model\CampaignManagementService\CreateResponsiveAdRecommendationResponse');
                case 400:
                    return $this->getResponseContent($request, $response, '\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault');
                case 500:
                    return $this->getResponseContent($request, $response, '\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault');
                case 401:
                    return $this->getResponseContent($request, $response, '\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault');
                case 403:
                    return $this->getResponseContent($request, $response, '\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault');
            }

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            $returnType = '\Microsoft\MsAds\Rest\Model\CampaignManagementService\CreateResponsiveAdRecommendationResponse';
            return $this->getResponseContent($request, $response, $returnType);

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Microsoft\MsAds\Rest\Model\CampaignManagementService\CreateResponsiveAdRecommendationResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 500:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 403:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation createResponsiveAdRecommendationAsync
     *
     * @param  \Microsoft\MsAds\Rest\Model\CampaignManagementService\CreateResponsiveAdRecommendationRequest $CreateResponsiveAdRecommendationRequest (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['createResponsiveAdRecommendation'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function createResponsiveAdRecommendationAsync($CreateResponsiveAdRecommendationRequest, string $contentType = self::contentTypes['createResponsiveAdRecommendation'][0])
    {
        return $this->createResponsiveAdRecommendationAsyncWithHttpInfo($CreateResponsiveAdRecommendationRequest, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation createResponsiveAdRecommendationAsyncWithHttpInfo
     *
     * @param  \Microsoft\MsAds\Rest\Model\CampaignManagementService\CreateResponsiveAdRecommendationRequest $CreateResponsiveAdRecommendationRequest (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['createResponsiveAdRecommendation'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function createResponsiveAdRecommendationAsyncWithHttpInfo($CreateResponsiveAdRecommendationRequest, string $contentType = self::contentTypes['createResponsiveAdRecommendation'][0])
    {
        $returnType = '\Microsoft\MsAds\Rest\Model\CampaignManagementService\CreateResponsiveAdRecommendationResponse';
        $request = $this->createResponsiveAdRecommendationRequest($CreateResponsiveAdRecommendationRequest, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return $this->onFulfilledResponse($response, $returnType);
                },
                function ($exception) {
                    $this->onRejectedResponse($exception);
                }
            );
    }

    /**
     * Create request for operation 'createResponsiveAdRecommendation'
     *
     * @param  \Microsoft\MsAds\Rest\Model\CampaignManagementService\CreateResponsiveAdRecommendationRequest $CreateResponsiveAdRecommendationRequest (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['createResponsiveAdRecommendation'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function createResponsiveAdRecommendationRequest($CreateResponsiveAdRecommendationRequest, string $contentType = self::contentTypes['createResponsiveAdRecommendation'][0])
    {

        // verify the required parameter 'CreateResponsiveAdRecommendationRequest' is set
        if ($CreateResponsiveAdRecommendationRequest === null || (is_array($CreateResponsiveAdRecommendationRequest) && count($CreateResponsiveAdRecommendationRequest) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $CreateResponsiveAdRecommendationRequest when calling createResponsiveAdRecommendation'
            );
        }


        $resourcePath = '/CampaignManagement/v13/ResponsiveAdRecommendation/Create';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $multipart = false;

        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        return $this->setupAndSendRequest(
            'POST',
            $resourcePath,
            $headers,
            $headerParams,
            $CreateResponsiveAdRecommendationRequest,
            $formParams,
            $multipart,
            true,
            true,
            false,
            'getHostSettingsForcreateResponsiveAdRecommendation',
            null,
            [],
            $queryParams
        );
    }

    /**
     * Operation createResponsiveSearchAdRecommendation
     *
     * @param  \Microsoft\MsAds\Rest\Model\CampaignManagementService\CreateResponsiveSearchAdRecommendationRequest $CreateResponsiveSearchAdRecommendationRequest CreateResponsiveSearchAdRecommendationRequest (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['createResponsiveSearchAdRecommendation'] to see the possible values for this operation
     *
     * @throws \Microsoft\MsAds\Rest\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \Microsoft\MsAds\Rest\Model\CampaignManagementService\CreateResponsiveSearchAdRecommendationResponse|\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault|\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault|\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault|\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault
     */
    public function createResponsiveSearchAdRecommendation($CreateResponsiveSearchAdRecommendationRequest, string $contentType = self::contentTypes['createResponsiveSearchAdRecommendation'][0])
    {
        list($response) = $this->createResponsiveSearchAdRecommendationWithHttpInfo($CreateResponsiveSearchAdRecommendationRequest, $contentType);
        return $response;
    }

    /**
     * Operation createResponsiveSearchAdRecommendationWithHttpInfo
     *
     * @param  \Microsoft\MsAds\Rest\Model\CampaignManagementService\CreateResponsiveSearchAdRecommendationRequest $CreateResponsiveSearchAdRecommendationRequest (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['createResponsiveSearchAdRecommendation'] to see the possible values for this operation
     *
     * @throws \Microsoft\MsAds\Rest\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \Microsoft\MsAds\Rest\Model\CampaignManagementService\CreateResponsiveSearchAdRecommendationResponse|\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault|\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault|\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault|\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault, HTTP status code, HTTP response headers (array of strings)
     */
    public function createResponsiveSearchAdRecommendationWithHttpInfo($CreateResponsiveSearchAdRecommendationRequest, string $contentType = self::contentTypes['createResponsiveSearchAdRecommendation'][0])
    {
        $request = $this->createResponsiveSearchAdRecommendationRequest($CreateResponsiveSearchAdRecommendationRequest, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                $response = $e->getResponse();
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            switch($statusCode) {
                case 200:
                    return $this->getResponseContent($request, $response, '\Microsoft\MsAds\Rest\Model\CampaignManagementService\CreateResponsiveSearchAdRecommendationResponse');
                case 400:
                    return $this->getResponseContent($request, $response, '\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault');
                case 500:
                    return $this->getResponseContent($request, $response, '\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault');
                case 401:
                    return $this->getResponseContent($request, $response, '\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault');
                case 403:
                    return $this->getResponseContent($request, $response, '\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault');
            }

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            $returnType = '\Microsoft\MsAds\Rest\Model\CampaignManagementService\CreateResponsiveSearchAdRecommendationResponse';
            return $this->getResponseContent($request, $response, $returnType);

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Microsoft\MsAds\Rest\Model\CampaignManagementService\CreateResponsiveSearchAdRecommendationResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 500:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 403:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation createResponsiveSearchAdRecommendationAsync
     *
     * @param  \Microsoft\MsAds\Rest\Model\CampaignManagementService\CreateResponsiveSearchAdRecommendationRequest $CreateResponsiveSearchAdRecommendationRequest (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['createResponsiveSearchAdRecommendation'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function createResponsiveSearchAdRecommendationAsync($CreateResponsiveSearchAdRecommendationRequest, string $contentType = self::contentTypes['createResponsiveSearchAdRecommendation'][0])
    {
        return $this->createResponsiveSearchAdRecommendationAsyncWithHttpInfo($CreateResponsiveSearchAdRecommendationRequest, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation createResponsiveSearchAdRecommendationAsyncWithHttpInfo
     *
     * @param  \Microsoft\MsAds\Rest\Model\CampaignManagementService\CreateResponsiveSearchAdRecommendationRequest $CreateResponsiveSearchAdRecommendationRequest (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['createResponsiveSearchAdRecommendation'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function createResponsiveSearchAdRecommendationAsyncWithHttpInfo($CreateResponsiveSearchAdRecommendationRequest, string $contentType = self::contentTypes['createResponsiveSearchAdRecommendation'][0])
    {
        $returnType = '\Microsoft\MsAds\Rest\Model\CampaignManagementService\CreateResponsiveSearchAdRecommendationResponse';
        $request = $this->createResponsiveSearchAdRecommendationRequest($CreateResponsiveSearchAdRecommendationRequest, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return $this->onFulfilledResponse($response, $returnType);
                },
                function ($exception) {
                    $this->onRejectedResponse($exception);
                }
            );
    }

    /**
     * Create request for operation 'createResponsiveSearchAdRecommendation'
     *
     * @param  \Microsoft\MsAds\Rest\Model\CampaignManagementService\CreateResponsiveSearchAdRecommendationRequest $CreateResponsiveSearchAdRecommendationRequest (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['createResponsiveSearchAdRecommendation'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function createResponsiveSearchAdRecommendationRequest($CreateResponsiveSearchAdRecommendationRequest, string $contentType = self::contentTypes['createResponsiveSearchAdRecommendation'][0])
    {

        // verify the required parameter 'CreateResponsiveSearchAdRecommendationRequest' is set
        if ($CreateResponsiveSearchAdRecommendationRequest === null || (is_array($CreateResponsiveSearchAdRecommendationRequest) && count($CreateResponsiveSearchAdRecommendationRequest) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $CreateResponsiveSearchAdRecommendationRequest when calling createResponsiveSearchAdRecommendation'
            );
        }


        $resourcePath = '/CampaignManagement/v13/ResponsiveSearchAdRecommendation/Create';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $multipart = false;

        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        return $this->setupAndSendRequest(
            'POST',
            $resourcePath,
            $headers,
            $headerParams,
            $CreateResponsiveSearchAdRecommendationRequest,
            $formParams,
            $multipart,
            true,
            true,
            false,
            'getHostSettingsForcreateResponsiveSearchAdRecommendation',
            null,
            [],
            $queryParams
        );
    }

    /**
     * Operation deleteAdExtensions
     *
     * @param  \Microsoft\MsAds\Rest\Model\CampaignManagementService\DeleteAdExtensionsRequest $DeleteAdExtensionsRequest DeleteAdExtensionsRequest (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['deleteAdExtensions'] to see the possible values for this operation
     *
     * @throws \Microsoft\MsAds\Rest\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \Microsoft\MsAds\Rest\Model\CampaignManagementService\DeleteAdExtensionsResponse|\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault|\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault|\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault|\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault
     */
    public function deleteAdExtensions($DeleteAdExtensionsRequest, string $contentType = self::contentTypes['deleteAdExtensions'][0])
    {
        list($response) = $this->deleteAdExtensionsWithHttpInfo($DeleteAdExtensionsRequest, $contentType);
        return $response;
    }

    /**
     * Operation deleteAdExtensionsWithHttpInfo
     *
     * @param  \Microsoft\MsAds\Rest\Model\CampaignManagementService\DeleteAdExtensionsRequest $DeleteAdExtensionsRequest (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['deleteAdExtensions'] to see the possible values for this operation
     *
     * @throws \Microsoft\MsAds\Rest\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \Microsoft\MsAds\Rest\Model\CampaignManagementService\DeleteAdExtensionsResponse|\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault|\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault|\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault|\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault, HTTP status code, HTTP response headers (array of strings)
     */
    public function deleteAdExtensionsWithHttpInfo($DeleteAdExtensionsRequest, string $contentType = self::contentTypes['deleteAdExtensions'][0])
    {
        $request = $this->deleteAdExtensionsRequest($DeleteAdExtensionsRequest, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                $response = $e->getResponse();
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            switch($statusCode) {
                case 200:
                    return $this->getResponseContent($request, $response, '\Microsoft\MsAds\Rest\Model\CampaignManagementService\DeleteAdExtensionsResponse');
                case 400:
                    return $this->getResponseContent($request, $response, '\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault');
                case 500:
                    return $this->getResponseContent($request, $response, '\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault');
                case 401:
                    return $this->getResponseContent($request, $response, '\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault');
                case 403:
                    return $this->getResponseContent($request, $response, '\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault');
            }

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            $returnType = '\Microsoft\MsAds\Rest\Model\CampaignManagementService\DeleteAdExtensionsResponse';
            return $this->getResponseContent($request, $response, $returnType);

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Microsoft\MsAds\Rest\Model\CampaignManagementService\DeleteAdExtensionsResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 500:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 403:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation deleteAdExtensionsAsync
     *
     * @param  \Microsoft\MsAds\Rest\Model\CampaignManagementService\DeleteAdExtensionsRequest $DeleteAdExtensionsRequest (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['deleteAdExtensions'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function deleteAdExtensionsAsync($DeleteAdExtensionsRequest, string $contentType = self::contentTypes['deleteAdExtensions'][0])
    {
        return $this->deleteAdExtensionsAsyncWithHttpInfo($DeleteAdExtensionsRequest, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation deleteAdExtensionsAsyncWithHttpInfo
     *
     * @param  \Microsoft\MsAds\Rest\Model\CampaignManagementService\DeleteAdExtensionsRequest $DeleteAdExtensionsRequest (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['deleteAdExtensions'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function deleteAdExtensionsAsyncWithHttpInfo($DeleteAdExtensionsRequest, string $contentType = self::contentTypes['deleteAdExtensions'][0])
    {
        $returnType = '\Microsoft\MsAds\Rest\Model\CampaignManagementService\DeleteAdExtensionsResponse';
        $request = $this->deleteAdExtensionsRequest($DeleteAdExtensionsRequest, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return $this->onFulfilledResponse($response, $returnType);
                },
                function ($exception) {
                    $this->onRejectedResponse($exception);
                }
            );
    }

    /**
     * Create request for operation 'deleteAdExtensions'
     *
     * @param  \Microsoft\MsAds\Rest\Model\CampaignManagementService\DeleteAdExtensionsRequest $DeleteAdExtensionsRequest (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['deleteAdExtensions'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function deleteAdExtensionsRequest($DeleteAdExtensionsRequest, string $contentType = self::contentTypes['deleteAdExtensions'][0])
    {

        // verify the required parameter 'DeleteAdExtensionsRequest' is set
        if ($DeleteAdExtensionsRequest === null || (is_array($DeleteAdExtensionsRequest) && count($DeleteAdExtensionsRequest) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $DeleteAdExtensionsRequest when calling deleteAdExtensions'
            );
        }


        $resourcePath = '/CampaignManagement/v13/AdExtensions';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $multipart = false;

        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        return $this->setupAndSendRequest(
            'DELETE',
            $resourcePath,
            $headers,
            $headerParams,
            $DeleteAdExtensionsRequest,
            $formParams,
            $multipart,
            true,
            true,
            false,
            'getHostSettingsFordeleteAdExtensions',
            null,
            [],
            $queryParams
        );
    }

    /**
     * Operation deleteAdExtensionsAssociations
     *
     * @param  \Microsoft\MsAds\Rest\Model\CampaignManagementService\DeleteAdExtensionsAssociationsRequest $DeleteAdExtensionsAssociationsRequest DeleteAdExtensionsAssociationsRequest (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['deleteAdExtensionsAssociations'] to see the possible values for this operation
     *
     * @throws \Microsoft\MsAds\Rest\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \Microsoft\MsAds\Rest\Model\CampaignManagementService\DeleteAdExtensionsAssociationsResponse|\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault|\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault|\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault|\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault
     */
    public function deleteAdExtensionsAssociations($DeleteAdExtensionsAssociationsRequest, string $contentType = self::contentTypes['deleteAdExtensionsAssociations'][0])
    {
        list($response) = $this->deleteAdExtensionsAssociationsWithHttpInfo($DeleteAdExtensionsAssociationsRequest, $contentType);
        return $response;
    }

    /**
     * Operation deleteAdExtensionsAssociationsWithHttpInfo
     *
     * @param  \Microsoft\MsAds\Rest\Model\CampaignManagementService\DeleteAdExtensionsAssociationsRequest $DeleteAdExtensionsAssociationsRequest (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['deleteAdExtensionsAssociations'] to see the possible values for this operation
     *
     * @throws \Microsoft\MsAds\Rest\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \Microsoft\MsAds\Rest\Model\CampaignManagementService\DeleteAdExtensionsAssociationsResponse|\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault|\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault|\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault|\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault, HTTP status code, HTTP response headers (array of strings)
     */
    public function deleteAdExtensionsAssociationsWithHttpInfo($DeleteAdExtensionsAssociationsRequest, string $contentType = self::contentTypes['deleteAdExtensionsAssociations'][0])
    {
        $request = $this->deleteAdExtensionsAssociationsRequest($DeleteAdExtensionsAssociationsRequest, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                $response = $e->getResponse();
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            switch($statusCode) {
                case 200:
                    return $this->getResponseContent($request, $response, '\Microsoft\MsAds\Rest\Model\CampaignManagementService\DeleteAdExtensionsAssociationsResponse');
                case 400:
                    return $this->getResponseContent($request, $response, '\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault');
                case 500:
                    return $this->getResponseContent($request, $response, '\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault');
                case 401:
                    return $this->getResponseContent($request, $response, '\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault');
                case 403:
                    return $this->getResponseContent($request, $response, '\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault');
            }

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            $returnType = '\Microsoft\MsAds\Rest\Model\CampaignManagementService\DeleteAdExtensionsAssociationsResponse';
            return $this->getResponseContent($request, $response, $returnType);

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Microsoft\MsAds\Rest\Model\CampaignManagementService\DeleteAdExtensionsAssociationsResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 500:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 403:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation deleteAdExtensionsAssociationsAsync
     *
     * @param  \Microsoft\MsAds\Rest\Model\CampaignManagementService\DeleteAdExtensionsAssociationsRequest $DeleteAdExtensionsAssociationsRequest (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['deleteAdExtensionsAssociations'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function deleteAdExtensionsAssociationsAsync($DeleteAdExtensionsAssociationsRequest, string $contentType = self::contentTypes['deleteAdExtensionsAssociations'][0])
    {
        return $this->deleteAdExtensionsAssociationsAsyncWithHttpInfo($DeleteAdExtensionsAssociationsRequest, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation deleteAdExtensionsAssociationsAsyncWithHttpInfo
     *
     * @param  \Microsoft\MsAds\Rest\Model\CampaignManagementService\DeleteAdExtensionsAssociationsRequest $DeleteAdExtensionsAssociationsRequest (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['deleteAdExtensionsAssociations'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function deleteAdExtensionsAssociationsAsyncWithHttpInfo($DeleteAdExtensionsAssociationsRequest, string $contentType = self::contentTypes['deleteAdExtensionsAssociations'][0])
    {
        $returnType = '\Microsoft\MsAds\Rest\Model\CampaignManagementService\DeleteAdExtensionsAssociationsResponse';
        $request = $this->deleteAdExtensionsAssociationsRequest($DeleteAdExtensionsAssociationsRequest, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return $this->onFulfilledResponse($response, $returnType);
                },
                function ($exception) {
                    $this->onRejectedResponse($exception);
                }
            );
    }

    /**
     * Create request for operation 'deleteAdExtensionsAssociations'
     *
     * @param  \Microsoft\MsAds\Rest\Model\CampaignManagementService\DeleteAdExtensionsAssociationsRequest $DeleteAdExtensionsAssociationsRequest (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['deleteAdExtensionsAssociations'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function deleteAdExtensionsAssociationsRequest($DeleteAdExtensionsAssociationsRequest, string $contentType = self::contentTypes['deleteAdExtensionsAssociations'][0])
    {

        // verify the required parameter 'DeleteAdExtensionsAssociationsRequest' is set
        if ($DeleteAdExtensionsAssociationsRequest === null || (is_array($DeleteAdExtensionsAssociationsRequest) && count($DeleteAdExtensionsAssociationsRequest) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $DeleteAdExtensionsAssociationsRequest when calling deleteAdExtensionsAssociations'
            );
        }


        $resourcePath = '/CampaignManagement/v13/AdExtensionsAssociations';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $multipart = false;

        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        return $this->setupAndSendRequest(
            'DELETE',
            $resourcePath,
            $headers,
            $headerParams,
            $DeleteAdExtensionsAssociationsRequest,
            $formParams,
            $multipart,
            true,
            true,
            false,
            'getHostSettingsFordeleteAdExtensionsAssociations',
            null,
            [],
            $queryParams
        );
    }

    /**
     * Operation deleteAdGroupCriterions
     *
     * @param  \Microsoft\MsAds\Rest\Model\CampaignManagementService\DeleteAdGroupCriterionsRequest $DeleteAdGroupCriterionsRequest DeleteAdGroupCriterionsRequest (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['deleteAdGroupCriterions'] to see the possible values for this operation
     *
     * @throws \Microsoft\MsAds\Rest\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \Microsoft\MsAds\Rest\Model\CampaignManagementService\DeleteAdGroupCriterionsResponse|\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault|\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault|\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault|\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault
     */
    public function deleteAdGroupCriterions($DeleteAdGroupCriterionsRequest, string $contentType = self::contentTypes['deleteAdGroupCriterions'][0])
    {
        list($response) = $this->deleteAdGroupCriterionsWithHttpInfo($DeleteAdGroupCriterionsRequest, $contentType);
        return $response;
    }

    /**
     * Operation deleteAdGroupCriterionsWithHttpInfo
     *
     * @param  \Microsoft\MsAds\Rest\Model\CampaignManagementService\DeleteAdGroupCriterionsRequest $DeleteAdGroupCriterionsRequest (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['deleteAdGroupCriterions'] to see the possible values for this operation
     *
     * @throws \Microsoft\MsAds\Rest\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \Microsoft\MsAds\Rest\Model\CampaignManagementService\DeleteAdGroupCriterionsResponse|\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault|\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault|\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault|\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault, HTTP status code, HTTP response headers (array of strings)
     */
    public function deleteAdGroupCriterionsWithHttpInfo($DeleteAdGroupCriterionsRequest, string $contentType = self::contentTypes['deleteAdGroupCriterions'][0])
    {
        $request = $this->deleteAdGroupCriterionsRequest($DeleteAdGroupCriterionsRequest, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                $response = $e->getResponse();
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            switch($statusCode) {
                case 200:
                    return $this->getResponseContent($request, $response, '\Microsoft\MsAds\Rest\Model\CampaignManagementService\DeleteAdGroupCriterionsResponse');
                case 400:
                    return $this->getResponseContent($request, $response, '\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault');
                case 500:
                    return $this->getResponseContent($request, $response, '\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault');
                case 401:
                    return $this->getResponseContent($request, $response, '\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault');
                case 403:
                    return $this->getResponseContent($request, $response, '\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault');
            }

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            $returnType = '\Microsoft\MsAds\Rest\Model\CampaignManagementService\DeleteAdGroupCriterionsResponse';
            return $this->getResponseContent($request, $response, $returnType);

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Microsoft\MsAds\Rest\Model\CampaignManagementService\DeleteAdGroupCriterionsResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 500:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 403:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation deleteAdGroupCriterionsAsync
     *
     * @param  \Microsoft\MsAds\Rest\Model\CampaignManagementService\DeleteAdGroupCriterionsRequest $DeleteAdGroupCriterionsRequest (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['deleteAdGroupCriterions'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function deleteAdGroupCriterionsAsync($DeleteAdGroupCriterionsRequest, string $contentType = self::contentTypes['deleteAdGroupCriterions'][0])
    {
        return $this->deleteAdGroupCriterionsAsyncWithHttpInfo($DeleteAdGroupCriterionsRequest, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation deleteAdGroupCriterionsAsyncWithHttpInfo
     *
     * @param  \Microsoft\MsAds\Rest\Model\CampaignManagementService\DeleteAdGroupCriterionsRequest $DeleteAdGroupCriterionsRequest (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['deleteAdGroupCriterions'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function deleteAdGroupCriterionsAsyncWithHttpInfo($DeleteAdGroupCriterionsRequest, string $contentType = self::contentTypes['deleteAdGroupCriterions'][0])
    {
        $returnType = '\Microsoft\MsAds\Rest\Model\CampaignManagementService\DeleteAdGroupCriterionsResponse';
        $request = $this->deleteAdGroupCriterionsRequest($DeleteAdGroupCriterionsRequest, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return $this->onFulfilledResponse($response, $returnType);
                },
                function ($exception) {
                    $this->onRejectedResponse($exception);
                }
            );
    }

    /**
     * Create request for operation 'deleteAdGroupCriterions'
     *
     * @param  \Microsoft\MsAds\Rest\Model\CampaignManagementService\DeleteAdGroupCriterionsRequest $DeleteAdGroupCriterionsRequest (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['deleteAdGroupCriterions'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function deleteAdGroupCriterionsRequest($DeleteAdGroupCriterionsRequest, string $contentType = self::contentTypes['deleteAdGroupCriterions'][0])
    {

        // verify the required parameter 'DeleteAdGroupCriterionsRequest' is set
        if ($DeleteAdGroupCriterionsRequest === null || (is_array($DeleteAdGroupCriterionsRequest) && count($DeleteAdGroupCriterionsRequest) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $DeleteAdGroupCriterionsRequest when calling deleteAdGroupCriterions'
            );
        }


        $resourcePath = '/CampaignManagement/v13/AdGroupCriterions';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $multipart = false;

        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        return $this->setupAndSendRequest(
            'DELETE',
            $resourcePath,
            $headers,
            $headerParams,
            $DeleteAdGroupCriterionsRequest,
            $formParams,
            $multipart,
            true,
            true,
            false,
            'getHostSettingsFordeleteAdGroupCriterions',
            null,
            [],
            $queryParams
        );
    }

    /**
     * Operation deleteAdGroups
     *
     * @param  \Microsoft\MsAds\Rest\Model\CampaignManagementService\DeleteAdGroupsRequest $DeleteAdGroupsRequest DeleteAdGroupsRequest (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['deleteAdGroups'] to see the possible values for this operation
     *
     * @throws \Microsoft\MsAds\Rest\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \Microsoft\MsAds\Rest\Model\CampaignManagementService\DeleteAdGroupsResponse|\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault|\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault|\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault|\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault
     */
    public function deleteAdGroups($DeleteAdGroupsRequest, string $contentType = self::contentTypes['deleteAdGroups'][0])
    {
        list($response) = $this->deleteAdGroupsWithHttpInfo($DeleteAdGroupsRequest, $contentType);
        return $response;
    }

    /**
     * Operation deleteAdGroupsWithHttpInfo
     *
     * @param  \Microsoft\MsAds\Rest\Model\CampaignManagementService\DeleteAdGroupsRequest $DeleteAdGroupsRequest (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['deleteAdGroups'] to see the possible values for this operation
     *
     * @throws \Microsoft\MsAds\Rest\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \Microsoft\MsAds\Rest\Model\CampaignManagementService\DeleteAdGroupsResponse|\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault|\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault|\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault|\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault, HTTP status code, HTTP response headers (array of strings)
     */
    public function deleteAdGroupsWithHttpInfo($DeleteAdGroupsRequest, string $contentType = self::contentTypes['deleteAdGroups'][0])
    {
        $request = $this->deleteAdGroupsRequest($DeleteAdGroupsRequest, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                $response = $e->getResponse();
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            switch($statusCode) {
                case 200:
                    return $this->getResponseContent($request, $response, '\Microsoft\MsAds\Rest\Model\CampaignManagementService\DeleteAdGroupsResponse');
                case 400:
                    return $this->getResponseContent($request, $response, '\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault');
                case 500:
                    return $this->getResponseContent($request, $response, '\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault');
                case 401:
                    return $this->getResponseContent($request, $response, '\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault');
                case 403:
                    return $this->getResponseContent($request, $response, '\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault');
            }

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            $returnType = '\Microsoft\MsAds\Rest\Model\CampaignManagementService\DeleteAdGroupsResponse';
            return $this->getResponseContent($request, $response, $returnType);

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Microsoft\MsAds\Rest\Model\CampaignManagementService\DeleteAdGroupsResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 500:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 403:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation deleteAdGroupsAsync
     *
     * @param  \Microsoft\MsAds\Rest\Model\CampaignManagementService\DeleteAdGroupsRequest $DeleteAdGroupsRequest (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['deleteAdGroups'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function deleteAdGroupsAsync($DeleteAdGroupsRequest, string $contentType = self::contentTypes['deleteAdGroups'][0])
    {
        return $this->deleteAdGroupsAsyncWithHttpInfo($DeleteAdGroupsRequest, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation deleteAdGroupsAsyncWithHttpInfo
     *
     * @param  \Microsoft\MsAds\Rest\Model\CampaignManagementService\DeleteAdGroupsRequest $DeleteAdGroupsRequest (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['deleteAdGroups'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function deleteAdGroupsAsyncWithHttpInfo($DeleteAdGroupsRequest, string $contentType = self::contentTypes['deleteAdGroups'][0])
    {
        $returnType = '\Microsoft\MsAds\Rest\Model\CampaignManagementService\DeleteAdGroupsResponse';
        $request = $this->deleteAdGroupsRequest($DeleteAdGroupsRequest, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return $this->onFulfilledResponse($response, $returnType);
                },
                function ($exception) {
                    $this->onRejectedResponse($exception);
                }
            );
    }

    /**
     * Create request for operation 'deleteAdGroups'
     *
     * @param  \Microsoft\MsAds\Rest\Model\CampaignManagementService\DeleteAdGroupsRequest $DeleteAdGroupsRequest (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['deleteAdGroups'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function deleteAdGroupsRequest($DeleteAdGroupsRequest, string $contentType = self::contentTypes['deleteAdGroups'][0])
    {

        // verify the required parameter 'DeleteAdGroupsRequest' is set
        if ($DeleteAdGroupsRequest === null || (is_array($DeleteAdGroupsRequest) && count($DeleteAdGroupsRequest) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $DeleteAdGroupsRequest when calling deleteAdGroups'
            );
        }


        $resourcePath = '/CampaignManagement/v13/AdGroups';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $multipart = false;

        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        return $this->setupAndSendRequest(
            'DELETE',
            $resourcePath,
            $headers,
            $headerParams,
            $DeleteAdGroupsRequest,
            $formParams,
            $multipart,
            true,
            true,
            false,
            'getHostSettingsFordeleteAdGroups',
            null,
            [],
            $queryParams
        );
    }

    /**
     * Operation deleteAds
     *
     * @param  \Microsoft\MsAds\Rest\Model\CampaignManagementService\DeleteAdsRequest $DeleteAdsRequest DeleteAdsRequest (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['deleteAds'] to see the possible values for this operation
     *
     * @throws \Microsoft\MsAds\Rest\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \Microsoft\MsAds\Rest\Model\CampaignManagementService\DeleteAdsResponse|\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault|\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault|\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault|\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault
     */
    public function deleteAds($DeleteAdsRequest, string $contentType = self::contentTypes['deleteAds'][0])
    {
        list($response) = $this->deleteAdsWithHttpInfo($DeleteAdsRequest, $contentType);
        return $response;
    }

    /**
     * Operation deleteAdsWithHttpInfo
     *
     * @param  \Microsoft\MsAds\Rest\Model\CampaignManagementService\DeleteAdsRequest $DeleteAdsRequest (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['deleteAds'] to see the possible values for this operation
     *
     * @throws \Microsoft\MsAds\Rest\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \Microsoft\MsAds\Rest\Model\CampaignManagementService\DeleteAdsResponse|\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault|\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault|\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault|\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault, HTTP status code, HTTP response headers (array of strings)
     */
    public function deleteAdsWithHttpInfo($DeleteAdsRequest, string $contentType = self::contentTypes['deleteAds'][0])
    {
        $request = $this->deleteAdsRequest($DeleteAdsRequest, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                $response = $e->getResponse();
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            switch($statusCode) {
                case 200:
                    return $this->getResponseContent($request, $response, '\Microsoft\MsAds\Rest\Model\CampaignManagementService\DeleteAdsResponse');
                case 400:
                    return $this->getResponseContent($request, $response, '\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault');
                case 500:
                    return $this->getResponseContent($request, $response, '\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault');
                case 401:
                    return $this->getResponseContent($request, $response, '\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault');
                case 403:
                    return $this->getResponseContent($request, $response, '\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault');
            }

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            $returnType = '\Microsoft\MsAds\Rest\Model\CampaignManagementService\DeleteAdsResponse';
            return $this->getResponseContent($request, $response, $returnType);

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Microsoft\MsAds\Rest\Model\CampaignManagementService\DeleteAdsResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 500:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 403:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation deleteAdsAsync
     *
     * @param  \Microsoft\MsAds\Rest\Model\CampaignManagementService\DeleteAdsRequest $DeleteAdsRequest (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['deleteAds'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function deleteAdsAsync($DeleteAdsRequest, string $contentType = self::contentTypes['deleteAds'][0])
    {
        return $this->deleteAdsAsyncWithHttpInfo($DeleteAdsRequest, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation deleteAdsAsyncWithHttpInfo
     *
     * @param  \Microsoft\MsAds\Rest\Model\CampaignManagementService\DeleteAdsRequest $DeleteAdsRequest (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['deleteAds'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function deleteAdsAsyncWithHttpInfo($DeleteAdsRequest, string $contentType = self::contentTypes['deleteAds'][0])
    {
        $returnType = '\Microsoft\MsAds\Rest\Model\CampaignManagementService\DeleteAdsResponse';
        $request = $this->deleteAdsRequest($DeleteAdsRequest, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return $this->onFulfilledResponse($response, $returnType);
                },
                function ($exception) {
                    $this->onRejectedResponse($exception);
                }
            );
    }

    /**
     * Create request for operation 'deleteAds'
     *
     * @param  \Microsoft\MsAds\Rest\Model\CampaignManagementService\DeleteAdsRequest $DeleteAdsRequest (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['deleteAds'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function deleteAdsRequest($DeleteAdsRequest, string $contentType = self::contentTypes['deleteAds'][0])
    {

        // verify the required parameter 'DeleteAdsRequest' is set
        if ($DeleteAdsRequest === null || (is_array($DeleteAdsRequest) && count($DeleteAdsRequest) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $DeleteAdsRequest when calling deleteAds'
            );
        }


        $resourcePath = '/CampaignManagement/v13/Ads';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $multipart = false;

        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        return $this->setupAndSendRequest(
            'DELETE',
            $resourcePath,
            $headers,
            $headerParams,
            $DeleteAdsRequest,
            $formParams,
            $multipart,
            true,
            true,
            false,
            'getHostSettingsFordeleteAds',
            null,
            [],
            $queryParams
        );
    }

    /**
     * Operation deleteAssetGroups
     *
     * @param  \Microsoft\MsAds\Rest\Model\CampaignManagementService\DeleteAssetGroupsRequest $DeleteAssetGroupsRequest DeleteAssetGroupsRequest (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['deleteAssetGroups'] to see the possible values for this operation
     *
     * @throws \Microsoft\MsAds\Rest\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \Microsoft\MsAds\Rest\Model\CampaignManagementService\DeleteAssetGroupsResponse|\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault|\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault|\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault|\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault
     */
    public function deleteAssetGroups($DeleteAssetGroupsRequest, string $contentType = self::contentTypes['deleteAssetGroups'][0])
    {
        list($response) = $this->deleteAssetGroupsWithHttpInfo($DeleteAssetGroupsRequest, $contentType);
        return $response;
    }

    /**
     * Operation deleteAssetGroupsWithHttpInfo
     *
     * @param  \Microsoft\MsAds\Rest\Model\CampaignManagementService\DeleteAssetGroupsRequest $DeleteAssetGroupsRequest (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['deleteAssetGroups'] to see the possible values for this operation
     *
     * @throws \Microsoft\MsAds\Rest\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \Microsoft\MsAds\Rest\Model\CampaignManagementService\DeleteAssetGroupsResponse|\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault|\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault|\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault|\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault, HTTP status code, HTTP response headers (array of strings)
     */
    public function deleteAssetGroupsWithHttpInfo($DeleteAssetGroupsRequest, string $contentType = self::contentTypes['deleteAssetGroups'][0])
    {
        $request = $this->deleteAssetGroupsRequest($DeleteAssetGroupsRequest, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                $response = $e->getResponse();
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            switch($statusCode) {
                case 200:
                    return $this->getResponseContent($request, $response, '\Microsoft\MsAds\Rest\Model\CampaignManagementService\DeleteAssetGroupsResponse');
                case 400:
                    return $this->getResponseContent($request, $response, '\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault');
                case 500:
                    return $this->getResponseContent($request, $response, '\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault');
                case 401:
                    return $this->getResponseContent($request, $response, '\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault');
                case 403:
                    return $this->getResponseContent($request, $response, '\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault');
            }

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            $returnType = '\Microsoft\MsAds\Rest\Model\CampaignManagementService\DeleteAssetGroupsResponse';
            return $this->getResponseContent($request, $response, $returnType);

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Microsoft\MsAds\Rest\Model\CampaignManagementService\DeleteAssetGroupsResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 500:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 403:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation deleteAssetGroupsAsync
     *
     * @param  \Microsoft\MsAds\Rest\Model\CampaignManagementService\DeleteAssetGroupsRequest $DeleteAssetGroupsRequest (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['deleteAssetGroups'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function deleteAssetGroupsAsync($DeleteAssetGroupsRequest, string $contentType = self::contentTypes['deleteAssetGroups'][0])
    {
        return $this->deleteAssetGroupsAsyncWithHttpInfo($DeleteAssetGroupsRequest, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation deleteAssetGroupsAsyncWithHttpInfo
     *
     * @param  \Microsoft\MsAds\Rest\Model\CampaignManagementService\DeleteAssetGroupsRequest $DeleteAssetGroupsRequest (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['deleteAssetGroups'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function deleteAssetGroupsAsyncWithHttpInfo($DeleteAssetGroupsRequest, string $contentType = self::contentTypes['deleteAssetGroups'][0])
    {
        $returnType = '\Microsoft\MsAds\Rest\Model\CampaignManagementService\DeleteAssetGroupsResponse';
        $request = $this->deleteAssetGroupsRequest($DeleteAssetGroupsRequest, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return $this->onFulfilledResponse($response, $returnType);
                },
                function ($exception) {
                    $this->onRejectedResponse($exception);
                }
            );
    }

    /**
     * Create request for operation 'deleteAssetGroups'
     *
     * @param  \Microsoft\MsAds\Rest\Model\CampaignManagementService\DeleteAssetGroupsRequest $DeleteAssetGroupsRequest (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['deleteAssetGroups'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function deleteAssetGroupsRequest($DeleteAssetGroupsRequest, string $contentType = self::contentTypes['deleteAssetGroups'][0])
    {

        // verify the required parameter 'DeleteAssetGroupsRequest' is set
        if ($DeleteAssetGroupsRequest === null || (is_array($DeleteAssetGroupsRequest) && count($DeleteAssetGroupsRequest) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $DeleteAssetGroupsRequest when calling deleteAssetGroups'
            );
        }


        $resourcePath = '/CampaignManagement/v13/AssetGroups';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $multipart = false;

        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        return $this->setupAndSendRequest(
            'DELETE',
            $resourcePath,
            $headers,
            $headerParams,
            $DeleteAssetGroupsRequest,
            $formParams,
            $multipart,
            true,
            true,
            false,
            'getHostSettingsFordeleteAssetGroups',
            null,
            [],
            $queryParams
        );
    }

    /**
     * Operation deleteAudienceGroupAssetGroupAssociations
     *
     * @param  \Microsoft\MsAds\Rest\Model\CampaignManagementService\DeleteAudienceGroupAssetGroupAssociationsRequest $DeleteAudienceGroupAssetGroupAssociationsRequest DeleteAudienceGroupAssetGroupAssociationsRequest (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['deleteAudienceGroupAssetGroupAssociations'] to see the possible values for this operation
     *
     * @throws \Microsoft\MsAds\Rest\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \Microsoft\MsAds\Rest\Model\CampaignManagementService\DeleteAudienceGroupAssetGroupAssociationsResponse|\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault|\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault|\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault|\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault
     */
    public function deleteAudienceGroupAssetGroupAssociations($DeleteAudienceGroupAssetGroupAssociationsRequest, string $contentType = self::contentTypes['deleteAudienceGroupAssetGroupAssociations'][0])
    {
        list($response) = $this->deleteAudienceGroupAssetGroupAssociationsWithHttpInfo($DeleteAudienceGroupAssetGroupAssociationsRequest, $contentType);
        return $response;
    }

    /**
     * Operation deleteAudienceGroupAssetGroupAssociationsWithHttpInfo
     *
     * @param  \Microsoft\MsAds\Rest\Model\CampaignManagementService\DeleteAudienceGroupAssetGroupAssociationsRequest $DeleteAudienceGroupAssetGroupAssociationsRequest (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['deleteAudienceGroupAssetGroupAssociations'] to see the possible values for this operation
     *
     * @throws \Microsoft\MsAds\Rest\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \Microsoft\MsAds\Rest\Model\CampaignManagementService\DeleteAudienceGroupAssetGroupAssociationsResponse|\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault|\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault|\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault|\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault, HTTP status code, HTTP response headers (array of strings)
     */
    public function deleteAudienceGroupAssetGroupAssociationsWithHttpInfo($DeleteAudienceGroupAssetGroupAssociationsRequest, string $contentType = self::contentTypes['deleteAudienceGroupAssetGroupAssociations'][0])
    {
        $request = $this->deleteAudienceGroupAssetGroupAssociationsRequest($DeleteAudienceGroupAssetGroupAssociationsRequest, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                $response = $e->getResponse();
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            switch($statusCode) {
                case 200:
                    return $this->getResponseContent($request, $response, '\Microsoft\MsAds\Rest\Model\CampaignManagementService\DeleteAudienceGroupAssetGroupAssociationsResponse');
                case 400:
                    return $this->getResponseContent($request, $response, '\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault');
                case 500:
                    return $this->getResponseContent($request, $response, '\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault');
                case 401:
                    return $this->getResponseContent($request, $response, '\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault');
                case 403:
                    return $this->getResponseContent($request, $response, '\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault');
            }

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            $returnType = '\Microsoft\MsAds\Rest\Model\CampaignManagementService\DeleteAudienceGroupAssetGroupAssociationsResponse';
            return $this->getResponseContent($request, $response, $returnType);

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Microsoft\MsAds\Rest\Model\CampaignManagementService\DeleteAudienceGroupAssetGroupAssociationsResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 500:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 403:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation deleteAudienceGroupAssetGroupAssociationsAsync
     *
     * @param  \Microsoft\MsAds\Rest\Model\CampaignManagementService\DeleteAudienceGroupAssetGroupAssociationsRequest $DeleteAudienceGroupAssetGroupAssociationsRequest (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['deleteAudienceGroupAssetGroupAssociations'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function deleteAudienceGroupAssetGroupAssociationsAsync($DeleteAudienceGroupAssetGroupAssociationsRequest, string $contentType = self::contentTypes['deleteAudienceGroupAssetGroupAssociations'][0])
    {
        return $this->deleteAudienceGroupAssetGroupAssociationsAsyncWithHttpInfo($DeleteAudienceGroupAssetGroupAssociationsRequest, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation deleteAudienceGroupAssetGroupAssociationsAsyncWithHttpInfo
     *
     * @param  \Microsoft\MsAds\Rest\Model\CampaignManagementService\DeleteAudienceGroupAssetGroupAssociationsRequest $DeleteAudienceGroupAssetGroupAssociationsRequest (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['deleteAudienceGroupAssetGroupAssociations'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function deleteAudienceGroupAssetGroupAssociationsAsyncWithHttpInfo($DeleteAudienceGroupAssetGroupAssociationsRequest, string $contentType = self::contentTypes['deleteAudienceGroupAssetGroupAssociations'][0])
    {
        $returnType = '\Microsoft\MsAds\Rest\Model\CampaignManagementService\DeleteAudienceGroupAssetGroupAssociationsResponse';
        $request = $this->deleteAudienceGroupAssetGroupAssociationsRequest($DeleteAudienceGroupAssetGroupAssociationsRequest, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return $this->onFulfilledResponse($response, $returnType);
                },
                function ($exception) {
                    $this->onRejectedResponse($exception);
                }
            );
    }

    /**
     * Create request for operation 'deleteAudienceGroupAssetGroupAssociations'
     *
     * @param  \Microsoft\MsAds\Rest\Model\CampaignManagementService\DeleteAudienceGroupAssetGroupAssociationsRequest $DeleteAudienceGroupAssetGroupAssociationsRequest (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['deleteAudienceGroupAssetGroupAssociations'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function deleteAudienceGroupAssetGroupAssociationsRequest($DeleteAudienceGroupAssetGroupAssociationsRequest, string $contentType = self::contentTypes['deleteAudienceGroupAssetGroupAssociations'][0])
    {

        // verify the required parameter 'DeleteAudienceGroupAssetGroupAssociationsRequest' is set
        if ($DeleteAudienceGroupAssetGroupAssociationsRequest === null || (is_array($DeleteAudienceGroupAssetGroupAssociationsRequest) && count($DeleteAudienceGroupAssetGroupAssociationsRequest) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $DeleteAudienceGroupAssetGroupAssociationsRequest when calling deleteAudienceGroupAssetGroupAssociations'
            );
        }


        $resourcePath = '/CampaignManagement/v13/AudienceGroupAssetGroupAssociations';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $multipart = false;

        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        return $this->setupAndSendRequest(
            'DELETE',
            $resourcePath,
            $headers,
            $headerParams,
            $DeleteAudienceGroupAssetGroupAssociationsRequest,
            $formParams,
            $multipart,
            true,
            true,
            false,
            'getHostSettingsFordeleteAudienceGroupAssetGroupAssociations',
            null,
            [],
            $queryParams
        );
    }

    /**
     * Operation deleteAudienceGroups
     *
     * @param  \Microsoft\MsAds\Rest\Model\CampaignManagementService\DeleteAudienceGroupsRequest $DeleteAudienceGroupsRequest DeleteAudienceGroupsRequest (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['deleteAudienceGroups'] to see the possible values for this operation
     *
     * @throws \Microsoft\MsAds\Rest\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \Microsoft\MsAds\Rest\Model\CampaignManagementService\DeleteAudienceGroupsResponse|\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault|\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault|\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault|\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault
     */
    public function deleteAudienceGroups($DeleteAudienceGroupsRequest, string $contentType = self::contentTypes['deleteAudienceGroups'][0])
    {
        list($response) = $this->deleteAudienceGroupsWithHttpInfo($DeleteAudienceGroupsRequest, $contentType);
        return $response;
    }

    /**
     * Operation deleteAudienceGroupsWithHttpInfo
     *
     * @param  \Microsoft\MsAds\Rest\Model\CampaignManagementService\DeleteAudienceGroupsRequest $DeleteAudienceGroupsRequest (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['deleteAudienceGroups'] to see the possible values for this operation
     *
     * @throws \Microsoft\MsAds\Rest\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \Microsoft\MsAds\Rest\Model\CampaignManagementService\DeleteAudienceGroupsResponse|\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault|\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault|\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault|\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault, HTTP status code, HTTP response headers (array of strings)
     */
    public function deleteAudienceGroupsWithHttpInfo($DeleteAudienceGroupsRequest, string $contentType = self::contentTypes['deleteAudienceGroups'][0])
    {
        $request = $this->deleteAudienceGroupsRequest($DeleteAudienceGroupsRequest, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                $response = $e->getResponse();
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            switch($statusCode) {
                case 200:
                    return $this->getResponseContent($request, $response, '\Microsoft\MsAds\Rest\Model\CampaignManagementService\DeleteAudienceGroupsResponse');
                case 400:
                    return $this->getResponseContent($request, $response, '\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault');
                case 500:
                    return $this->getResponseContent($request, $response, '\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault');
                case 401:
                    return $this->getResponseContent($request, $response, '\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault');
                case 403:
                    return $this->getResponseContent($request, $response, '\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault');
            }

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            $returnType = '\Microsoft\MsAds\Rest\Model\CampaignManagementService\DeleteAudienceGroupsResponse';
            return $this->getResponseContent($request, $response, $returnType);

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Microsoft\MsAds\Rest\Model\CampaignManagementService\DeleteAudienceGroupsResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 500:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 403:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation deleteAudienceGroupsAsync
     *
     * @param  \Microsoft\MsAds\Rest\Model\CampaignManagementService\DeleteAudienceGroupsRequest $DeleteAudienceGroupsRequest (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['deleteAudienceGroups'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function deleteAudienceGroupsAsync($DeleteAudienceGroupsRequest, string $contentType = self::contentTypes['deleteAudienceGroups'][0])
    {
        return $this->deleteAudienceGroupsAsyncWithHttpInfo($DeleteAudienceGroupsRequest, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation deleteAudienceGroupsAsyncWithHttpInfo
     *
     * @param  \Microsoft\MsAds\Rest\Model\CampaignManagementService\DeleteAudienceGroupsRequest $DeleteAudienceGroupsRequest (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['deleteAudienceGroups'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function deleteAudienceGroupsAsyncWithHttpInfo($DeleteAudienceGroupsRequest, string $contentType = self::contentTypes['deleteAudienceGroups'][0])
    {
        $returnType = '\Microsoft\MsAds\Rest\Model\CampaignManagementService\DeleteAudienceGroupsResponse';
        $request = $this->deleteAudienceGroupsRequest($DeleteAudienceGroupsRequest, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return $this->onFulfilledResponse($response, $returnType);
                },
                function ($exception) {
                    $this->onRejectedResponse($exception);
                }
            );
    }

    /**
     * Create request for operation 'deleteAudienceGroups'
     *
     * @param  \Microsoft\MsAds\Rest\Model\CampaignManagementService\DeleteAudienceGroupsRequest $DeleteAudienceGroupsRequest (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['deleteAudienceGroups'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function deleteAudienceGroupsRequest($DeleteAudienceGroupsRequest, string $contentType = self::contentTypes['deleteAudienceGroups'][0])
    {

        // verify the required parameter 'DeleteAudienceGroupsRequest' is set
        if ($DeleteAudienceGroupsRequest === null || (is_array($DeleteAudienceGroupsRequest) && count($DeleteAudienceGroupsRequest) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $DeleteAudienceGroupsRequest when calling deleteAudienceGroups'
            );
        }


        $resourcePath = '/CampaignManagement/v13/AudienceGroups';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $multipart = false;

        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        return $this->setupAndSendRequest(
            'DELETE',
            $resourcePath,
            $headers,
            $headerParams,
            $DeleteAudienceGroupsRequest,
            $formParams,
            $multipart,
            true,
            true,
            false,
            'getHostSettingsFordeleteAudienceGroups',
            null,
            [],
            $queryParams
        );
    }

    /**
     * Operation deleteAudiences
     *
     * @param  \Microsoft\MsAds\Rest\Model\CampaignManagementService\DeleteAudiencesRequest $DeleteAudiencesRequest DeleteAudiencesRequest (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['deleteAudiences'] to see the possible values for this operation
     *
     * @throws \Microsoft\MsAds\Rest\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \Microsoft\MsAds\Rest\Model\CampaignManagementService\DeleteAudiencesResponse|\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault|\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault|\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault|\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault
     */
    public function deleteAudiences($DeleteAudiencesRequest, string $contentType = self::contentTypes['deleteAudiences'][0])
    {
        list($response) = $this->deleteAudiencesWithHttpInfo($DeleteAudiencesRequest, $contentType);
        return $response;
    }

    /**
     * Operation deleteAudiencesWithHttpInfo
     *
     * @param  \Microsoft\MsAds\Rest\Model\CampaignManagementService\DeleteAudiencesRequest $DeleteAudiencesRequest (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['deleteAudiences'] to see the possible values for this operation
     *
     * @throws \Microsoft\MsAds\Rest\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \Microsoft\MsAds\Rest\Model\CampaignManagementService\DeleteAudiencesResponse|\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault|\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault|\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault|\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault, HTTP status code, HTTP response headers (array of strings)
     */
    public function deleteAudiencesWithHttpInfo($DeleteAudiencesRequest, string $contentType = self::contentTypes['deleteAudiences'][0])
    {
        $request = $this->deleteAudiencesRequest($DeleteAudiencesRequest, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                $response = $e->getResponse();
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            switch($statusCode) {
                case 200:
                    return $this->getResponseContent($request, $response, '\Microsoft\MsAds\Rest\Model\CampaignManagementService\DeleteAudiencesResponse');
                case 400:
                    return $this->getResponseContent($request, $response, '\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault');
                case 500:
                    return $this->getResponseContent($request, $response, '\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault');
                case 401:
                    return $this->getResponseContent($request, $response, '\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault');
                case 403:
                    return $this->getResponseContent($request, $response, '\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault');
            }

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            $returnType = '\Microsoft\MsAds\Rest\Model\CampaignManagementService\DeleteAudiencesResponse';
            return $this->getResponseContent($request, $response, $returnType);

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Microsoft\MsAds\Rest\Model\CampaignManagementService\DeleteAudiencesResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 500:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 403:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation deleteAudiencesAsync
     *
     * @param  \Microsoft\MsAds\Rest\Model\CampaignManagementService\DeleteAudiencesRequest $DeleteAudiencesRequest (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['deleteAudiences'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function deleteAudiencesAsync($DeleteAudiencesRequest, string $contentType = self::contentTypes['deleteAudiences'][0])
    {
        return $this->deleteAudiencesAsyncWithHttpInfo($DeleteAudiencesRequest, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation deleteAudiencesAsyncWithHttpInfo
     *
     * @param  \Microsoft\MsAds\Rest\Model\CampaignManagementService\DeleteAudiencesRequest $DeleteAudiencesRequest (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['deleteAudiences'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function deleteAudiencesAsyncWithHttpInfo($DeleteAudiencesRequest, string $contentType = self::contentTypes['deleteAudiences'][0])
    {
        $returnType = '\Microsoft\MsAds\Rest\Model\CampaignManagementService\DeleteAudiencesResponse';
        $request = $this->deleteAudiencesRequest($DeleteAudiencesRequest, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return $this->onFulfilledResponse($response, $returnType);
                },
                function ($exception) {
                    $this->onRejectedResponse($exception);
                }
            );
    }

    /**
     * Create request for operation 'deleteAudiences'
     *
     * @param  \Microsoft\MsAds\Rest\Model\CampaignManagementService\DeleteAudiencesRequest $DeleteAudiencesRequest (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['deleteAudiences'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function deleteAudiencesRequest($DeleteAudiencesRequest, string $contentType = self::contentTypes['deleteAudiences'][0])
    {

        // verify the required parameter 'DeleteAudiencesRequest' is set
        if ($DeleteAudiencesRequest === null || (is_array($DeleteAudiencesRequest) && count($DeleteAudiencesRequest) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $DeleteAudiencesRequest when calling deleteAudiences'
            );
        }


        $resourcePath = '/CampaignManagement/v13/Audiences';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $multipart = false;

        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        return $this->setupAndSendRequest(
            'DELETE',
            $resourcePath,
            $headers,
            $headerParams,
            $DeleteAudiencesRequest,
            $formParams,
            $multipart,
            true,
            true,
            false,
            'getHostSettingsFordeleteAudiences',
            null,
            [],
            $queryParams
        );
    }

    /**
     * Operation deleteBidStrategies
     *
     * @param  \Microsoft\MsAds\Rest\Model\CampaignManagementService\DeleteBidStrategiesRequest $DeleteBidStrategiesRequest DeleteBidStrategiesRequest (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['deleteBidStrategies'] to see the possible values for this operation
     *
     * @throws \Microsoft\MsAds\Rest\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \Microsoft\MsAds\Rest\Model\CampaignManagementService\DeleteBidStrategiesResponse|\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault|\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault|\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault|\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault
     */
    public function deleteBidStrategies($DeleteBidStrategiesRequest, string $contentType = self::contentTypes['deleteBidStrategies'][0])
    {
        list($response) = $this->deleteBidStrategiesWithHttpInfo($DeleteBidStrategiesRequest, $contentType);
        return $response;
    }

    /**
     * Operation deleteBidStrategiesWithHttpInfo
     *
     * @param  \Microsoft\MsAds\Rest\Model\CampaignManagementService\DeleteBidStrategiesRequest $DeleteBidStrategiesRequest (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['deleteBidStrategies'] to see the possible values for this operation
     *
     * @throws \Microsoft\MsAds\Rest\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \Microsoft\MsAds\Rest\Model\CampaignManagementService\DeleteBidStrategiesResponse|\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault|\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault|\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault|\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault, HTTP status code, HTTP response headers (array of strings)
     */
    public function deleteBidStrategiesWithHttpInfo($DeleteBidStrategiesRequest, string $contentType = self::contentTypes['deleteBidStrategies'][0])
    {
        $request = $this->deleteBidStrategiesRequest($DeleteBidStrategiesRequest, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                $response = $e->getResponse();
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            switch($statusCode) {
                case 200:
                    return $this->getResponseContent($request, $response, '\Microsoft\MsAds\Rest\Model\CampaignManagementService\DeleteBidStrategiesResponse');
                case 400:
                    return $this->getResponseContent($request, $response, '\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault');
                case 500:
                    return $this->getResponseContent($request, $response, '\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault');
                case 401:
                    return $this->getResponseContent($request, $response, '\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault');
                case 403:
                    return $this->getResponseContent($request, $response, '\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault');
            }

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            $returnType = '\Microsoft\MsAds\Rest\Model\CampaignManagementService\DeleteBidStrategiesResponse';
            return $this->getResponseContent($request, $response, $returnType);

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Microsoft\MsAds\Rest\Model\CampaignManagementService\DeleteBidStrategiesResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 500:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 403:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation deleteBidStrategiesAsync
     *
     * @param  \Microsoft\MsAds\Rest\Model\CampaignManagementService\DeleteBidStrategiesRequest $DeleteBidStrategiesRequest (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['deleteBidStrategies'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function deleteBidStrategiesAsync($DeleteBidStrategiesRequest, string $contentType = self::contentTypes['deleteBidStrategies'][0])
    {
        return $this->deleteBidStrategiesAsyncWithHttpInfo($DeleteBidStrategiesRequest, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation deleteBidStrategiesAsyncWithHttpInfo
     *
     * @param  \Microsoft\MsAds\Rest\Model\CampaignManagementService\DeleteBidStrategiesRequest $DeleteBidStrategiesRequest (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['deleteBidStrategies'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function deleteBidStrategiesAsyncWithHttpInfo($DeleteBidStrategiesRequest, string $contentType = self::contentTypes['deleteBidStrategies'][0])
    {
        $returnType = '\Microsoft\MsAds\Rest\Model\CampaignManagementService\DeleteBidStrategiesResponse';
        $request = $this->deleteBidStrategiesRequest($DeleteBidStrategiesRequest, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return $this->onFulfilledResponse($response, $returnType);
                },
                function ($exception) {
                    $this->onRejectedResponse($exception);
                }
            );
    }

    /**
     * Create request for operation 'deleteBidStrategies'
     *
     * @param  \Microsoft\MsAds\Rest\Model\CampaignManagementService\DeleteBidStrategiesRequest $DeleteBidStrategiesRequest (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['deleteBidStrategies'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function deleteBidStrategiesRequest($DeleteBidStrategiesRequest, string $contentType = self::contentTypes['deleteBidStrategies'][0])
    {

        // verify the required parameter 'DeleteBidStrategiesRequest' is set
        if ($DeleteBidStrategiesRequest === null || (is_array($DeleteBidStrategiesRequest) && count($DeleteBidStrategiesRequest) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $DeleteBidStrategiesRequest when calling deleteBidStrategies'
            );
        }


        $resourcePath = '/CampaignManagement/v13/BidStrategies';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $multipart = false;

        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        return $this->setupAndSendRequest(
            'DELETE',
            $resourcePath,
            $headers,
            $headerParams,
            $DeleteBidStrategiesRequest,
            $formParams,
            $multipart,
            true,
            true,
            false,
            'getHostSettingsFordeleteBidStrategies',
            null,
            [],
            $queryParams
        );
    }

    /**
     * Operation deleteBrandKits
     *
     * @param  \Microsoft\MsAds\Rest\Model\CampaignManagementService\DeleteBrandKitsRequest $DeleteBrandKitsRequest DeleteBrandKitsRequest (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['deleteBrandKits'] to see the possible values for this operation
     *
     * @throws \Microsoft\MsAds\Rest\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \Microsoft\MsAds\Rest\Model\CampaignManagementService\DeleteBrandKitsResponse|\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault|\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault|\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault|\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault
     */
    public function deleteBrandKits($DeleteBrandKitsRequest, string $contentType = self::contentTypes['deleteBrandKits'][0])
    {
        list($response) = $this->deleteBrandKitsWithHttpInfo($DeleteBrandKitsRequest, $contentType);
        return $response;
    }

    /**
     * Operation deleteBrandKitsWithHttpInfo
     *
     * @param  \Microsoft\MsAds\Rest\Model\CampaignManagementService\DeleteBrandKitsRequest $DeleteBrandKitsRequest (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['deleteBrandKits'] to see the possible values for this operation
     *
     * @throws \Microsoft\MsAds\Rest\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \Microsoft\MsAds\Rest\Model\CampaignManagementService\DeleteBrandKitsResponse|\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault|\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault|\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault|\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault, HTTP status code, HTTP response headers (array of strings)
     */
    public function deleteBrandKitsWithHttpInfo($DeleteBrandKitsRequest, string $contentType = self::contentTypes['deleteBrandKits'][0])
    {
        $request = $this->deleteBrandKitsRequest($DeleteBrandKitsRequest, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                $response = $e->getResponse();
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            switch($statusCode) {
                case 200:
                    return $this->getResponseContent($request, $response, '\Microsoft\MsAds\Rest\Model\CampaignManagementService\DeleteBrandKitsResponse');
                case 400:
                    return $this->getResponseContent($request, $response, '\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault');
                case 500:
                    return $this->getResponseContent($request, $response, '\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault');
                case 401:
                    return $this->getResponseContent($request, $response, '\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault');
                case 403:
                    return $this->getResponseContent($request, $response, '\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault');
            }

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            $returnType = '\Microsoft\MsAds\Rest\Model\CampaignManagementService\DeleteBrandKitsResponse';
            return $this->getResponseContent($request, $response, $returnType);

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Microsoft\MsAds\Rest\Model\CampaignManagementService\DeleteBrandKitsResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 500:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 403:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation deleteBrandKitsAsync
     *
     * @param  \Microsoft\MsAds\Rest\Model\CampaignManagementService\DeleteBrandKitsRequest $DeleteBrandKitsRequest (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['deleteBrandKits'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function deleteBrandKitsAsync($DeleteBrandKitsRequest, string $contentType = self::contentTypes['deleteBrandKits'][0])
    {
        return $this->deleteBrandKitsAsyncWithHttpInfo($DeleteBrandKitsRequest, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation deleteBrandKitsAsyncWithHttpInfo
     *
     * @param  \Microsoft\MsAds\Rest\Model\CampaignManagementService\DeleteBrandKitsRequest $DeleteBrandKitsRequest (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['deleteBrandKits'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function deleteBrandKitsAsyncWithHttpInfo($DeleteBrandKitsRequest, string $contentType = self::contentTypes['deleteBrandKits'][0])
    {
        $returnType = '\Microsoft\MsAds\Rest\Model\CampaignManagementService\DeleteBrandKitsResponse';
        $request = $this->deleteBrandKitsRequest($DeleteBrandKitsRequest, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return $this->onFulfilledResponse($response, $returnType);
                },
                function ($exception) {
                    $this->onRejectedResponse($exception);
                }
            );
    }

    /**
     * Create request for operation 'deleteBrandKits'
     *
     * @param  \Microsoft\MsAds\Rest\Model\CampaignManagementService\DeleteBrandKitsRequest $DeleteBrandKitsRequest (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['deleteBrandKits'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function deleteBrandKitsRequest($DeleteBrandKitsRequest, string $contentType = self::contentTypes['deleteBrandKits'][0])
    {

        // verify the required parameter 'DeleteBrandKitsRequest' is set
        if ($DeleteBrandKitsRequest === null || (is_array($DeleteBrandKitsRequest) && count($DeleteBrandKitsRequest) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $DeleteBrandKitsRequest when calling deleteBrandKits'
            );
        }


        $resourcePath = '/CampaignManagement/v13/BrandKits';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $multipart = false;

        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        return $this->setupAndSendRequest(
            'DELETE',
            $resourcePath,
            $headers,
            $headerParams,
            $DeleteBrandKitsRequest,
            $formParams,
            $multipart,
            true,
            true,
            false,
            'getHostSettingsFordeleteBrandKits',
            null,
            [],
            $queryParams
        );
    }

    /**
     * Operation deleteBudgets
     *
     * @param  \Microsoft\MsAds\Rest\Model\CampaignManagementService\DeleteBudgetsRequest $DeleteBudgetsRequest DeleteBudgetsRequest (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['deleteBudgets'] to see the possible values for this operation
     *
     * @throws \Microsoft\MsAds\Rest\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \Microsoft\MsAds\Rest\Model\CampaignManagementService\DeleteBudgetsResponse|\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault|\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault|\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault|\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault
     */
    public function deleteBudgets($DeleteBudgetsRequest, string $contentType = self::contentTypes['deleteBudgets'][0])
    {
        list($response) = $this->deleteBudgetsWithHttpInfo($DeleteBudgetsRequest, $contentType);
        return $response;
    }

    /**
     * Operation deleteBudgetsWithHttpInfo
     *
     * @param  \Microsoft\MsAds\Rest\Model\CampaignManagementService\DeleteBudgetsRequest $DeleteBudgetsRequest (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['deleteBudgets'] to see the possible values for this operation
     *
     * @throws \Microsoft\MsAds\Rest\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \Microsoft\MsAds\Rest\Model\CampaignManagementService\DeleteBudgetsResponse|\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault|\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault|\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault|\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault, HTTP status code, HTTP response headers (array of strings)
     */
    public function deleteBudgetsWithHttpInfo($DeleteBudgetsRequest, string $contentType = self::contentTypes['deleteBudgets'][0])
    {
        $request = $this->deleteBudgetsRequest($DeleteBudgetsRequest, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                $response = $e->getResponse();
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            switch($statusCode) {
                case 200:
                    return $this->getResponseContent($request, $response, '\Microsoft\MsAds\Rest\Model\CampaignManagementService\DeleteBudgetsResponse');
                case 400:
                    return $this->getResponseContent($request, $response, '\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault');
                case 500:
                    return $this->getResponseContent($request, $response, '\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault');
                case 401:
                    return $this->getResponseContent($request, $response, '\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault');
                case 403:
                    return $this->getResponseContent($request, $response, '\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault');
            }

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            $returnType = '\Microsoft\MsAds\Rest\Model\CampaignManagementService\DeleteBudgetsResponse';
            return $this->getResponseContent($request, $response, $returnType);

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Microsoft\MsAds\Rest\Model\CampaignManagementService\DeleteBudgetsResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 500:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 403:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation deleteBudgetsAsync
     *
     * @param  \Microsoft\MsAds\Rest\Model\CampaignManagementService\DeleteBudgetsRequest $DeleteBudgetsRequest (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['deleteBudgets'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function deleteBudgetsAsync($DeleteBudgetsRequest, string $contentType = self::contentTypes['deleteBudgets'][0])
    {
        return $this->deleteBudgetsAsyncWithHttpInfo($DeleteBudgetsRequest, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation deleteBudgetsAsyncWithHttpInfo
     *
     * @param  \Microsoft\MsAds\Rest\Model\CampaignManagementService\DeleteBudgetsRequest $DeleteBudgetsRequest (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['deleteBudgets'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function deleteBudgetsAsyncWithHttpInfo($DeleteBudgetsRequest, string $contentType = self::contentTypes['deleteBudgets'][0])
    {
        $returnType = '\Microsoft\MsAds\Rest\Model\CampaignManagementService\DeleteBudgetsResponse';
        $request = $this->deleteBudgetsRequest($DeleteBudgetsRequest, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return $this->onFulfilledResponse($response, $returnType);
                },
                function ($exception) {
                    $this->onRejectedResponse($exception);
                }
            );
    }

    /**
     * Create request for operation 'deleteBudgets'
     *
     * @param  \Microsoft\MsAds\Rest\Model\CampaignManagementService\DeleteBudgetsRequest $DeleteBudgetsRequest (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['deleteBudgets'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function deleteBudgetsRequest($DeleteBudgetsRequest, string $contentType = self::contentTypes['deleteBudgets'][0])
    {

        // verify the required parameter 'DeleteBudgetsRequest' is set
        if ($DeleteBudgetsRequest === null || (is_array($DeleteBudgetsRequest) && count($DeleteBudgetsRequest) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $DeleteBudgetsRequest when calling deleteBudgets'
            );
        }


        $resourcePath = '/CampaignManagement/v13/Budgets';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $multipart = false;

        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        return $this->setupAndSendRequest(
            'DELETE',
            $resourcePath,
            $headers,
            $headerParams,
            $DeleteBudgetsRequest,
            $formParams,
            $multipart,
            true,
            true,
            false,
            'getHostSettingsFordeleteBudgets',
            null,
            [],
            $queryParams
        );
    }

    /**
     * Operation deleteCampaignConversionGoals
     *
     * @param  \Microsoft\MsAds\Rest\Model\CampaignManagementService\DeleteCampaignConversionGoalsRequest $DeleteCampaignConversionGoalsRequest DeleteCampaignConversionGoalsRequest (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['deleteCampaignConversionGoals'] to see the possible values for this operation
     *
     * @throws \Microsoft\MsAds\Rest\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \Microsoft\MsAds\Rest\Model\CampaignManagementService\DeleteCampaignConversionGoalsResponse|\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault|\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault|\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault|\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault
     */
    public function deleteCampaignConversionGoals($DeleteCampaignConversionGoalsRequest, string $contentType = self::contentTypes['deleteCampaignConversionGoals'][0])
    {
        list($response) = $this->deleteCampaignConversionGoalsWithHttpInfo($DeleteCampaignConversionGoalsRequest, $contentType);
        return $response;
    }

    /**
     * Operation deleteCampaignConversionGoalsWithHttpInfo
     *
     * @param  \Microsoft\MsAds\Rest\Model\CampaignManagementService\DeleteCampaignConversionGoalsRequest $DeleteCampaignConversionGoalsRequest (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['deleteCampaignConversionGoals'] to see the possible values for this operation
     *
     * @throws \Microsoft\MsAds\Rest\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \Microsoft\MsAds\Rest\Model\CampaignManagementService\DeleteCampaignConversionGoalsResponse|\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault|\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault|\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault|\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault, HTTP status code, HTTP response headers (array of strings)
     */
    public function deleteCampaignConversionGoalsWithHttpInfo($DeleteCampaignConversionGoalsRequest, string $contentType = self::contentTypes['deleteCampaignConversionGoals'][0])
    {
        $request = $this->deleteCampaignConversionGoalsRequest($DeleteCampaignConversionGoalsRequest, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                $response = $e->getResponse();
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            switch($statusCode) {
                case 200:
                    return $this->getResponseContent($request, $response, '\Microsoft\MsAds\Rest\Model\CampaignManagementService\DeleteCampaignConversionGoalsResponse');
                case 400:
                    return $this->getResponseContent($request, $response, '\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault');
                case 500:
                    return $this->getResponseContent($request, $response, '\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault');
                case 401:
                    return $this->getResponseContent($request, $response, '\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault');
                case 403:
                    return $this->getResponseContent($request, $response, '\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault');
            }

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            $returnType = '\Microsoft\MsAds\Rest\Model\CampaignManagementService\DeleteCampaignConversionGoalsResponse';
            return $this->getResponseContent($request, $response, $returnType);

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Microsoft\MsAds\Rest\Model\CampaignManagementService\DeleteCampaignConversionGoalsResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 500:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 403:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation deleteCampaignConversionGoalsAsync
     *
     * @param  \Microsoft\MsAds\Rest\Model\CampaignManagementService\DeleteCampaignConversionGoalsRequest $DeleteCampaignConversionGoalsRequest (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['deleteCampaignConversionGoals'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function deleteCampaignConversionGoalsAsync($DeleteCampaignConversionGoalsRequest, string $contentType = self::contentTypes['deleteCampaignConversionGoals'][0])
    {
        return $this->deleteCampaignConversionGoalsAsyncWithHttpInfo($DeleteCampaignConversionGoalsRequest, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation deleteCampaignConversionGoalsAsyncWithHttpInfo
     *
     * @param  \Microsoft\MsAds\Rest\Model\CampaignManagementService\DeleteCampaignConversionGoalsRequest $DeleteCampaignConversionGoalsRequest (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['deleteCampaignConversionGoals'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function deleteCampaignConversionGoalsAsyncWithHttpInfo($DeleteCampaignConversionGoalsRequest, string $contentType = self::contentTypes['deleteCampaignConversionGoals'][0])
    {
        $returnType = '\Microsoft\MsAds\Rest\Model\CampaignManagementService\DeleteCampaignConversionGoalsResponse';
        $request = $this->deleteCampaignConversionGoalsRequest($DeleteCampaignConversionGoalsRequest, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return $this->onFulfilledResponse($response, $returnType);
                },
                function ($exception) {
                    $this->onRejectedResponse($exception);
                }
            );
    }

    /**
     * Create request for operation 'deleteCampaignConversionGoals'
     *
     * @param  \Microsoft\MsAds\Rest\Model\CampaignManagementService\DeleteCampaignConversionGoalsRequest $DeleteCampaignConversionGoalsRequest (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['deleteCampaignConversionGoals'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function deleteCampaignConversionGoalsRequest($DeleteCampaignConversionGoalsRequest, string $contentType = self::contentTypes['deleteCampaignConversionGoals'][0])
    {

        // verify the required parameter 'DeleteCampaignConversionGoalsRequest' is set
        if ($DeleteCampaignConversionGoalsRequest === null || (is_array($DeleteCampaignConversionGoalsRequest) && count($DeleteCampaignConversionGoalsRequest) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $DeleteCampaignConversionGoalsRequest when calling deleteCampaignConversionGoals'
            );
        }


        $resourcePath = '/CampaignManagement/v13/CampaignConversionGoals';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $multipart = false;

        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        return $this->setupAndSendRequest(
            'DELETE',
            $resourcePath,
            $headers,
            $headerParams,
            $DeleteCampaignConversionGoalsRequest,
            $formParams,
            $multipart,
            true,
            true,
            false,
            'getHostSettingsFordeleteCampaignConversionGoals',
            null,
            [],
            $queryParams
        );
    }

    /**
     * Operation deleteCampaignCriterions
     *
     * @param  \Microsoft\MsAds\Rest\Model\CampaignManagementService\DeleteCampaignCriterionsRequest $DeleteCampaignCriterionsRequest DeleteCampaignCriterionsRequest (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['deleteCampaignCriterions'] to see the possible values for this operation
     *
     * @throws \Microsoft\MsAds\Rest\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \Microsoft\MsAds\Rest\Model\CampaignManagementService\DeleteCampaignCriterionsResponse|\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault|\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault|\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault|\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault
     */
    public function deleteCampaignCriterions($DeleteCampaignCriterionsRequest, string $contentType = self::contentTypes['deleteCampaignCriterions'][0])
    {
        list($response) = $this->deleteCampaignCriterionsWithHttpInfo($DeleteCampaignCriterionsRequest, $contentType);
        return $response;
    }

    /**
     * Operation deleteCampaignCriterionsWithHttpInfo
     *
     * @param  \Microsoft\MsAds\Rest\Model\CampaignManagementService\DeleteCampaignCriterionsRequest $DeleteCampaignCriterionsRequest (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['deleteCampaignCriterions'] to see the possible values for this operation
     *
     * @throws \Microsoft\MsAds\Rest\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \Microsoft\MsAds\Rest\Model\CampaignManagementService\DeleteCampaignCriterionsResponse|\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault|\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault|\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault|\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault, HTTP status code, HTTP response headers (array of strings)
     */
    public function deleteCampaignCriterionsWithHttpInfo($DeleteCampaignCriterionsRequest, string $contentType = self::contentTypes['deleteCampaignCriterions'][0])
    {
        $request = $this->deleteCampaignCriterionsRequest($DeleteCampaignCriterionsRequest, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                $response = $e->getResponse();
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            switch($statusCode) {
                case 200:
                    return $this->getResponseContent($request, $response, '\Microsoft\MsAds\Rest\Model\CampaignManagementService\DeleteCampaignCriterionsResponse');
                case 400:
                    return $this->getResponseContent($request, $response, '\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault');
                case 500:
                    return $this->getResponseContent($request, $response, '\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault');
                case 401:
                    return $this->getResponseContent($request, $response, '\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault');
                case 403:
                    return $this->getResponseContent($request, $response, '\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault');
            }

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            $returnType = '\Microsoft\MsAds\Rest\Model\CampaignManagementService\DeleteCampaignCriterionsResponse';
            return $this->getResponseContent($request, $response, $returnType);

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Microsoft\MsAds\Rest\Model\CampaignManagementService\DeleteCampaignCriterionsResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 500:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 403:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation deleteCampaignCriterionsAsync
     *
     * @param  \Microsoft\MsAds\Rest\Model\CampaignManagementService\DeleteCampaignCriterionsRequest $DeleteCampaignCriterionsRequest (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['deleteCampaignCriterions'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function deleteCampaignCriterionsAsync($DeleteCampaignCriterionsRequest, string $contentType = self::contentTypes['deleteCampaignCriterions'][0])
    {
        return $this->deleteCampaignCriterionsAsyncWithHttpInfo($DeleteCampaignCriterionsRequest, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation deleteCampaignCriterionsAsyncWithHttpInfo
     *
     * @param  \Microsoft\MsAds\Rest\Model\CampaignManagementService\DeleteCampaignCriterionsRequest $DeleteCampaignCriterionsRequest (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['deleteCampaignCriterions'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function deleteCampaignCriterionsAsyncWithHttpInfo($DeleteCampaignCriterionsRequest, string $contentType = self::contentTypes['deleteCampaignCriterions'][0])
    {
        $returnType = '\Microsoft\MsAds\Rest\Model\CampaignManagementService\DeleteCampaignCriterionsResponse';
        $request = $this->deleteCampaignCriterionsRequest($DeleteCampaignCriterionsRequest, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return $this->onFulfilledResponse($response, $returnType);
                },
                function ($exception) {
                    $this->onRejectedResponse($exception);
                }
            );
    }

    /**
     * Create request for operation 'deleteCampaignCriterions'
     *
     * @param  \Microsoft\MsAds\Rest\Model\CampaignManagementService\DeleteCampaignCriterionsRequest $DeleteCampaignCriterionsRequest (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['deleteCampaignCriterions'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function deleteCampaignCriterionsRequest($DeleteCampaignCriterionsRequest, string $contentType = self::contentTypes['deleteCampaignCriterions'][0])
    {

        // verify the required parameter 'DeleteCampaignCriterionsRequest' is set
        if ($DeleteCampaignCriterionsRequest === null || (is_array($DeleteCampaignCriterionsRequest) && count($DeleteCampaignCriterionsRequest) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $DeleteCampaignCriterionsRequest when calling deleteCampaignCriterions'
            );
        }


        $resourcePath = '/CampaignManagement/v13/CampaignCriterions';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $multipart = false;

        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        return $this->setupAndSendRequest(
            'DELETE',
            $resourcePath,
            $headers,
            $headerParams,
            $DeleteCampaignCriterionsRequest,
            $formParams,
            $multipart,
            true,
            true,
            false,
            'getHostSettingsFordeleteCampaignCriterions',
            null,
            [],
            $queryParams
        );
    }

    /**
     * Operation deleteCampaigns
     *
     * @param  \Microsoft\MsAds\Rest\Model\CampaignManagementService\DeleteCampaignsRequest $DeleteCampaignsRequest DeleteCampaignsRequest (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['deleteCampaigns'] to see the possible values for this operation
     *
     * @throws \Microsoft\MsAds\Rest\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \Microsoft\MsAds\Rest\Model\CampaignManagementService\DeleteCampaignsResponse|\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault|\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault|\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault|\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault
     */
    public function deleteCampaigns($DeleteCampaignsRequest, string $contentType = self::contentTypes['deleteCampaigns'][0])
    {
        list($response) = $this->deleteCampaignsWithHttpInfo($DeleteCampaignsRequest, $contentType);
        return $response;
    }

    /**
     * Operation deleteCampaignsWithHttpInfo
     *
     * @param  \Microsoft\MsAds\Rest\Model\CampaignManagementService\DeleteCampaignsRequest $DeleteCampaignsRequest (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['deleteCampaigns'] to see the possible values for this operation
     *
     * @throws \Microsoft\MsAds\Rest\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \Microsoft\MsAds\Rest\Model\CampaignManagementService\DeleteCampaignsResponse|\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault|\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault|\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault|\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault, HTTP status code, HTTP response headers (array of strings)
     */
    public function deleteCampaignsWithHttpInfo($DeleteCampaignsRequest, string $contentType = self::contentTypes['deleteCampaigns'][0])
    {
        $request = $this->deleteCampaignsRequest($DeleteCampaignsRequest, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                $response = $e->getResponse();
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            switch($statusCode) {
                case 200:
                    return $this->getResponseContent($request, $response, '\Microsoft\MsAds\Rest\Model\CampaignManagementService\DeleteCampaignsResponse');
                case 400:
                    return $this->getResponseContent($request, $response, '\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault');
                case 500:
                    return $this->getResponseContent($request, $response, '\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault');
                case 401:
                    return $this->getResponseContent($request, $response, '\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault');
                case 403:
                    return $this->getResponseContent($request, $response, '\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault');
            }

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            $returnType = '\Microsoft\MsAds\Rest\Model\CampaignManagementService\DeleteCampaignsResponse';
            return $this->getResponseContent($request, $response, $returnType);

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Microsoft\MsAds\Rest\Model\CampaignManagementService\DeleteCampaignsResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 500:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 403:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation deleteCampaignsAsync
     *
     * @param  \Microsoft\MsAds\Rest\Model\CampaignManagementService\DeleteCampaignsRequest $DeleteCampaignsRequest (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['deleteCampaigns'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function deleteCampaignsAsync($DeleteCampaignsRequest, string $contentType = self::contentTypes['deleteCampaigns'][0])
    {
        return $this->deleteCampaignsAsyncWithHttpInfo($DeleteCampaignsRequest, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation deleteCampaignsAsyncWithHttpInfo
     *
     * @param  \Microsoft\MsAds\Rest\Model\CampaignManagementService\DeleteCampaignsRequest $DeleteCampaignsRequest (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['deleteCampaigns'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function deleteCampaignsAsyncWithHttpInfo($DeleteCampaignsRequest, string $contentType = self::contentTypes['deleteCampaigns'][0])
    {
        $returnType = '\Microsoft\MsAds\Rest\Model\CampaignManagementService\DeleteCampaignsResponse';
        $request = $this->deleteCampaignsRequest($DeleteCampaignsRequest, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return $this->onFulfilledResponse($response, $returnType);
                },
                function ($exception) {
                    $this->onRejectedResponse($exception);
                }
            );
    }

    /**
     * Create request for operation 'deleteCampaigns'
     *
     * @param  \Microsoft\MsAds\Rest\Model\CampaignManagementService\DeleteCampaignsRequest $DeleteCampaignsRequest (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['deleteCampaigns'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function deleteCampaignsRequest($DeleteCampaignsRequest, string $contentType = self::contentTypes['deleteCampaigns'][0])
    {

        // verify the required parameter 'DeleteCampaignsRequest' is set
        if ($DeleteCampaignsRequest === null || (is_array($DeleteCampaignsRequest) && count($DeleteCampaignsRequest) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $DeleteCampaignsRequest when calling deleteCampaigns'
            );
        }


        $resourcePath = '/CampaignManagement/v13/Campaigns';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $multipart = false;

        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        return $this->setupAndSendRequest(
            'DELETE',
            $resourcePath,
            $headers,
            $headerParams,
            $DeleteCampaignsRequest,
            $formParams,
            $multipart,
            true,
            true,
            false,
            'getHostSettingsFordeleteCampaigns',
            null,
            [],
            $queryParams
        );
    }

    /**
     * Operation deleteDataExclusions
     *
     * @param  \Microsoft\MsAds\Rest\Model\CampaignManagementService\DeleteDataExclusionsRequest $DeleteDataExclusionsRequest DeleteDataExclusionsRequest (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['deleteDataExclusions'] to see the possible values for this operation
     *
     * @throws \Microsoft\MsAds\Rest\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \Microsoft\MsAds\Rest\Model\CampaignManagementService\DeleteDataExclusionsResponse|\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault|\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault|\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault|\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault
     */
    public function deleteDataExclusions($DeleteDataExclusionsRequest, string $contentType = self::contentTypes['deleteDataExclusions'][0])
    {
        list($response) = $this->deleteDataExclusionsWithHttpInfo($DeleteDataExclusionsRequest, $contentType);
        return $response;
    }

    /**
     * Operation deleteDataExclusionsWithHttpInfo
     *
     * @param  \Microsoft\MsAds\Rest\Model\CampaignManagementService\DeleteDataExclusionsRequest $DeleteDataExclusionsRequest (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['deleteDataExclusions'] to see the possible values for this operation
     *
     * @throws \Microsoft\MsAds\Rest\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \Microsoft\MsAds\Rest\Model\CampaignManagementService\DeleteDataExclusionsResponse|\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault|\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault|\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault|\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault, HTTP status code, HTTP response headers (array of strings)
     */
    public function deleteDataExclusionsWithHttpInfo($DeleteDataExclusionsRequest, string $contentType = self::contentTypes['deleteDataExclusions'][0])
    {
        $request = $this->deleteDataExclusionsRequest($DeleteDataExclusionsRequest, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                $response = $e->getResponse();
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            switch($statusCode) {
                case 200:
                    return $this->getResponseContent($request, $response, '\Microsoft\MsAds\Rest\Model\CampaignManagementService\DeleteDataExclusionsResponse');
                case 400:
                    return $this->getResponseContent($request, $response, '\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault');
                case 500:
                    return $this->getResponseContent($request, $response, '\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault');
                case 401:
                    return $this->getResponseContent($request, $response, '\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault');
                case 403:
                    return $this->getResponseContent($request, $response, '\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault');
            }

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            $returnType = '\Microsoft\MsAds\Rest\Model\CampaignManagementService\DeleteDataExclusionsResponse';
            return $this->getResponseContent($request, $response, $returnType);

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Microsoft\MsAds\Rest\Model\CampaignManagementService\DeleteDataExclusionsResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 500:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 403:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation deleteDataExclusionsAsync
     *
     * @param  \Microsoft\MsAds\Rest\Model\CampaignManagementService\DeleteDataExclusionsRequest $DeleteDataExclusionsRequest (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['deleteDataExclusions'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function deleteDataExclusionsAsync($DeleteDataExclusionsRequest, string $contentType = self::contentTypes['deleteDataExclusions'][0])
    {
        return $this->deleteDataExclusionsAsyncWithHttpInfo($DeleteDataExclusionsRequest, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation deleteDataExclusionsAsyncWithHttpInfo
     *
     * @param  \Microsoft\MsAds\Rest\Model\CampaignManagementService\DeleteDataExclusionsRequest $DeleteDataExclusionsRequest (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['deleteDataExclusions'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function deleteDataExclusionsAsyncWithHttpInfo($DeleteDataExclusionsRequest, string $contentType = self::contentTypes['deleteDataExclusions'][0])
    {
        $returnType = '\Microsoft\MsAds\Rest\Model\CampaignManagementService\DeleteDataExclusionsResponse';
        $request = $this->deleteDataExclusionsRequest($DeleteDataExclusionsRequest, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return $this->onFulfilledResponse($response, $returnType);
                },
                function ($exception) {
                    $this->onRejectedResponse($exception);
                }
            );
    }

    /**
     * Create request for operation 'deleteDataExclusions'
     *
     * @param  \Microsoft\MsAds\Rest\Model\CampaignManagementService\DeleteDataExclusionsRequest $DeleteDataExclusionsRequest (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['deleteDataExclusions'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function deleteDataExclusionsRequest($DeleteDataExclusionsRequest, string $contentType = self::contentTypes['deleteDataExclusions'][0])
    {

        // verify the required parameter 'DeleteDataExclusionsRequest' is set
        if ($DeleteDataExclusionsRequest === null || (is_array($DeleteDataExclusionsRequest) && count($DeleteDataExclusionsRequest) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $DeleteDataExclusionsRequest when calling deleteDataExclusions'
            );
        }


        $resourcePath = '/CampaignManagement/v13/DataExclusions';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $multipart = false;

        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        return $this->setupAndSendRequest(
            'DELETE',
            $resourcePath,
            $headers,
            $headerParams,
            $DeleteDataExclusionsRequest,
            $formParams,
            $multipart,
            true,
            true,
            false,
            'getHostSettingsFordeleteDataExclusions',
            null,
            [],
            $queryParams
        );
    }

    /**
     * Operation deleteExperiments
     *
     * @param  \Microsoft\MsAds\Rest\Model\CampaignManagementService\DeleteExperimentsRequest $DeleteExperimentsRequest DeleteExperimentsRequest (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['deleteExperiments'] to see the possible values for this operation
     *
     * @throws \Microsoft\MsAds\Rest\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \Microsoft\MsAds\Rest\Model\CampaignManagementService\DeleteExperimentsResponse|\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault|\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault|\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault|\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault
     */
    public function deleteExperiments($DeleteExperimentsRequest, string $contentType = self::contentTypes['deleteExperiments'][0])
    {
        list($response) = $this->deleteExperimentsWithHttpInfo($DeleteExperimentsRequest, $contentType);
        return $response;
    }

    /**
     * Operation deleteExperimentsWithHttpInfo
     *
     * @param  \Microsoft\MsAds\Rest\Model\CampaignManagementService\DeleteExperimentsRequest $DeleteExperimentsRequest (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['deleteExperiments'] to see the possible values for this operation
     *
     * @throws \Microsoft\MsAds\Rest\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \Microsoft\MsAds\Rest\Model\CampaignManagementService\DeleteExperimentsResponse|\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault|\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault|\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault|\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault, HTTP status code, HTTP response headers (array of strings)
     */
    public function deleteExperimentsWithHttpInfo($DeleteExperimentsRequest, string $contentType = self::contentTypes['deleteExperiments'][0])
    {
        $request = $this->deleteExperimentsRequest($DeleteExperimentsRequest, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                $response = $e->getResponse();
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            switch($statusCode) {
                case 200:
                    return $this->getResponseContent($request, $response, '\Microsoft\MsAds\Rest\Model\CampaignManagementService\DeleteExperimentsResponse');
                case 400:
                    return $this->getResponseContent($request, $response, '\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault');
                case 500:
                    return $this->getResponseContent($request, $response, '\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault');
                case 401:
                    return $this->getResponseContent($request, $response, '\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault');
                case 403:
                    return $this->getResponseContent($request, $response, '\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault');
            }

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            $returnType = '\Microsoft\MsAds\Rest\Model\CampaignManagementService\DeleteExperimentsResponse';
            return $this->getResponseContent($request, $response, $returnType);

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Microsoft\MsAds\Rest\Model\CampaignManagementService\DeleteExperimentsResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 500:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 403:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation deleteExperimentsAsync
     *
     * @param  \Microsoft\MsAds\Rest\Model\CampaignManagementService\DeleteExperimentsRequest $DeleteExperimentsRequest (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['deleteExperiments'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function deleteExperimentsAsync($DeleteExperimentsRequest, string $contentType = self::contentTypes['deleteExperiments'][0])
    {
        return $this->deleteExperimentsAsyncWithHttpInfo($DeleteExperimentsRequest, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation deleteExperimentsAsyncWithHttpInfo
     *
     * @param  \Microsoft\MsAds\Rest\Model\CampaignManagementService\DeleteExperimentsRequest $DeleteExperimentsRequest (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['deleteExperiments'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function deleteExperimentsAsyncWithHttpInfo($DeleteExperimentsRequest, string $contentType = self::contentTypes['deleteExperiments'][0])
    {
        $returnType = '\Microsoft\MsAds\Rest\Model\CampaignManagementService\DeleteExperimentsResponse';
        $request = $this->deleteExperimentsRequest($DeleteExperimentsRequest, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return $this->onFulfilledResponse($response, $returnType);
                },
                function ($exception) {
                    $this->onRejectedResponse($exception);
                }
            );
    }

    /**
     * Create request for operation 'deleteExperiments'
     *
     * @param  \Microsoft\MsAds\Rest\Model\CampaignManagementService\DeleteExperimentsRequest $DeleteExperimentsRequest (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['deleteExperiments'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function deleteExperimentsRequest($DeleteExperimentsRequest, string $contentType = self::contentTypes['deleteExperiments'][0])
    {

        // verify the required parameter 'DeleteExperimentsRequest' is set
        if ($DeleteExperimentsRequest === null || (is_array($DeleteExperimentsRequest) && count($DeleteExperimentsRequest) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $DeleteExperimentsRequest when calling deleteExperiments'
            );
        }


        $resourcePath = '/CampaignManagement/v13/Experiments';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $multipart = false;

        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        return $this->setupAndSendRequest(
            'DELETE',
            $resourcePath,
            $headers,
            $headerParams,
            $DeleteExperimentsRequest,
            $formParams,
            $multipart,
            true,
            true,
            false,
            'getHostSettingsFordeleteExperiments',
            null,
            [],
            $queryParams
        );
    }

    /**
     * Operation deleteImportJobs
     *
     * @param  \Microsoft\MsAds\Rest\Model\CampaignManagementService\DeleteImportJobsRequest $DeleteImportJobsRequest DeleteImportJobsRequest (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['deleteImportJobs'] to see the possible values for this operation
     *
     * @throws \Microsoft\MsAds\Rest\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \Microsoft\MsAds\Rest\Model\CampaignManagementService\DeleteImportJobsResponse|\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault|\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault|\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault|\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault
     */
    public function deleteImportJobs($DeleteImportJobsRequest, string $contentType = self::contentTypes['deleteImportJobs'][0])
    {
        list($response) = $this->deleteImportJobsWithHttpInfo($DeleteImportJobsRequest, $contentType);
        return $response;
    }

    /**
     * Operation deleteImportJobsWithHttpInfo
     *
     * @param  \Microsoft\MsAds\Rest\Model\CampaignManagementService\DeleteImportJobsRequest $DeleteImportJobsRequest (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['deleteImportJobs'] to see the possible values for this operation
     *
     * @throws \Microsoft\MsAds\Rest\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \Microsoft\MsAds\Rest\Model\CampaignManagementService\DeleteImportJobsResponse|\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault|\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault|\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault|\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault, HTTP status code, HTTP response headers (array of strings)
     */
    public function deleteImportJobsWithHttpInfo($DeleteImportJobsRequest, string $contentType = self::contentTypes['deleteImportJobs'][0])
    {
        $request = $this->deleteImportJobsRequest($DeleteImportJobsRequest, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                $response = $e->getResponse();
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            switch($statusCode) {
                case 200:
                    return $this->getResponseContent($request, $response, '\Microsoft\MsAds\Rest\Model\CampaignManagementService\DeleteImportJobsResponse');
                case 400:
                    return $this->getResponseContent($request, $response, '\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault');
                case 500:
                    return $this->getResponseContent($request, $response, '\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault');
                case 401:
                    return $this->getResponseContent($request, $response, '\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault');
                case 403:
                    return $this->getResponseContent($request, $response, '\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault');
            }

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            $returnType = '\Microsoft\MsAds\Rest\Model\CampaignManagementService\DeleteImportJobsResponse';
            return $this->getResponseContent($request, $response, $returnType);

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Microsoft\MsAds\Rest\Model\CampaignManagementService\DeleteImportJobsResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 500:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 403:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation deleteImportJobsAsync
     *
     * @param  \Microsoft\MsAds\Rest\Model\CampaignManagementService\DeleteImportJobsRequest $DeleteImportJobsRequest (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['deleteImportJobs'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function deleteImportJobsAsync($DeleteImportJobsRequest, string $contentType = self::contentTypes['deleteImportJobs'][0])
    {
        return $this->deleteImportJobsAsyncWithHttpInfo($DeleteImportJobsRequest, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation deleteImportJobsAsyncWithHttpInfo
     *
     * @param  \Microsoft\MsAds\Rest\Model\CampaignManagementService\DeleteImportJobsRequest $DeleteImportJobsRequest (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['deleteImportJobs'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function deleteImportJobsAsyncWithHttpInfo($DeleteImportJobsRequest, string $contentType = self::contentTypes['deleteImportJobs'][0])
    {
        $returnType = '\Microsoft\MsAds\Rest\Model\CampaignManagementService\DeleteImportJobsResponse';
        $request = $this->deleteImportJobsRequest($DeleteImportJobsRequest, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return $this->onFulfilledResponse($response, $returnType);
                },
                function ($exception) {
                    $this->onRejectedResponse($exception);
                }
            );
    }

    /**
     * Create request for operation 'deleteImportJobs'
     *
     * @param  \Microsoft\MsAds\Rest\Model\CampaignManagementService\DeleteImportJobsRequest $DeleteImportJobsRequest (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['deleteImportJobs'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function deleteImportJobsRequest($DeleteImportJobsRequest, string $contentType = self::contentTypes['deleteImportJobs'][0])
    {

        // verify the required parameter 'DeleteImportJobsRequest' is set
        if ($DeleteImportJobsRequest === null || (is_array($DeleteImportJobsRequest) && count($DeleteImportJobsRequest) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $DeleteImportJobsRequest when calling deleteImportJobs'
            );
        }


        $resourcePath = '/CampaignManagement/v13/ImportJobs';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $multipart = false;

        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        return $this->setupAndSendRequest(
            'DELETE',
            $resourcePath,
            $headers,
            $headerParams,
            $DeleteImportJobsRequest,
            $formParams,
            $multipart,
            true,
            true,
            false,
            'getHostSettingsFordeleteImportJobs',
            null,
            [],
            $queryParams
        );
    }

    /**
     * Operation deleteKeywords
     *
     * @param  \Microsoft\MsAds\Rest\Model\CampaignManagementService\DeleteKeywordsRequest $DeleteKeywordsRequest DeleteKeywordsRequest (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['deleteKeywords'] to see the possible values for this operation
     *
     * @throws \Microsoft\MsAds\Rest\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \Microsoft\MsAds\Rest\Model\CampaignManagementService\DeleteKeywordsResponse|\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault|\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault|\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault|\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault
     */
    public function deleteKeywords($DeleteKeywordsRequest, string $contentType = self::contentTypes['deleteKeywords'][0])
    {
        list($response) = $this->deleteKeywordsWithHttpInfo($DeleteKeywordsRequest, $contentType);
        return $response;
    }

    /**
     * Operation deleteKeywordsWithHttpInfo
     *
     * @param  \Microsoft\MsAds\Rest\Model\CampaignManagementService\DeleteKeywordsRequest $DeleteKeywordsRequest (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['deleteKeywords'] to see the possible values for this operation
     *
     * @throws \Microsoft\MsAds\Rest\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \Microsoft\MsAds\Rest\Model\CampaignManagementService\DeleteKeywordsResponse|\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault|\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault|\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault|\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault, HTTP status code, HTTP response headers (array of strings)
     */
    public function deleteKeywordsWithHttpInfo($DeleteKeywordsRequest, string $contentType = self::contentTypes['deleteKeywords'][0])
    {
        $request = $this->deleteKeywordsRequest($DeleteKeywordsRequest, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                $response = $e->getResponse();
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            switch($statusCode) {
                case 200:
                    return $this->getResponseContent($request, $response, '\Microsoft\MsAds\Rest\Model\CampaignManagementService\DeleteKeywordsResponse');
                case 400:
                    return $this->getResponseContent($request, $response, '\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault');
                case 500:
                    return $this->getResponseContent($request, $response, '\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault');
                case 401:
                    return $this->getResponseContent($request, $response, '\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault');
                case 403:
                    return $this->getResponseContent($request, $response, '\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault');
            }

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            $returnType = '\Microsoft\MsAds\Rest\Model\CampaignManagementService\DeleteKeywordsResponse';
            return $this->getResponseContent($request, $response, $returnType);

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Microsoft\MsAds\Rest\Model\CampaignManagementService\DeleteKeywordsResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 500:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 403:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation deleteKeywordsAsync
     *
     * @param  \Microsoft\MsAds\Rest\Model\CampaignManagementService\DeleteKeywordsRequest $DeleteKeywordsRequest (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['deleteKeywords'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function deleteKeywordsAsync($DeleteKeywordsRequest, string $contentType = self::contentTypes['deleteKeywords'][0])
    {
        return $this->deleteKeywordsAsyncWithHttpInfo($DeleteKeywordsRequest, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation deleteKeywordsAsyncWithHttpInfo
     *
     * @param  \Microsoft\MsAds\Rest\Model\CampaignManagementService\DeleteKeywordsRequest $DeleteKeywordsRequest (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['deleteKeywords'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function deleteKeywordsAsyncWithHttpInfo($DeleteKeywordsRequest, string $contentType = self::contentTypes['deleteKeywords'][0])
    {
        $returnType = '\Microsoft\MsAds\Rest\Model\CampaignManagementService\DeleteKeywordsResponse';
        $request = $this->deleteKeywordsRequest($DeleteKeywordsRequest, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return $this->onFulfilledResponse($response, $returnType);
                },
                function ($exception) {
                    $this->onRejectedResponse($exception);
                }
            );
    }

    /**
     * Create request for operation 'deleteKeywords'
     *
     * @param  \Microsoft\MsAds\Rest\Model\CampaignManagementService\DeleteKeywordsRequest $DeleteKeywordsRequest (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['deleteKeywords'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function deleteKeywordsRequest($DeleteKeywordsRequest, string $contentType = self::contentTypes['deleteKeywords'][0])
    {

        // verify the required parameter 'DeleteKeywordsRequest' is set
        if ($DeleteKeywordsRequest === null || (is_array($DeleteKeywordsRequest) && count($DeleteKeywordsRequest) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $DeleteKeywordsRequest when calling deleteKeywords'
            );
        }


        $resourcePath = '/CampaignManagement/v13/Keywords';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $multipart = false;

        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        return $this->setupAndSendRequest(
            'DELETE',
            $resourcePath,
            $headers,
            $headerParams,
            $DeleteKeywordsRequest,
            $formParams,
            $multipart,
            true,
            true,
            false,
            'getHostSettingsFordeleteKeywords',
            null,
            [],
            $queryParams
        );
    }

    /**
     * Operation deleteLabelAssociations
     *
     * @param  \Microsoft\MsAds\Rest\Model\CampaignManagementService\DeleteLabelAssociationsRequest $DeleteLabelAssociationsRequest DeleteLabelAssociationsRequest (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['deleteLabelAssociations'] to see the possible values for this operation
     *
     * @throws \Microsoft\MsAds\Rest\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \Microsoft\MsAds\Rest\Model\CampaignManagementService\DeleteLabelAssociationsResponse|\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault|\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault|\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault|\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault
     */
    public function deleteLabelAssociations($DeleteLabelAssociationsRequest, string $contentType = self::contentTypes['deleteLabelAssociations'][0])
    {
        list($response) = $this->deleteLabelAssociationsWithHttpInfo($DeleteLabelAssociationsRequest, $contentType);
        return $response;
    }

    /**
     * Operation deleteLabelAssociationsWithHttpInfo
     *
     * @param  \Microsoft\MsAds\Rest\Model\CampaignManagementService\DeleteLabelAssociationsRequest $DeleteLabelAssociationsRequest (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['deleteLabelAssociations'] to see the possible values for this operation
     *
     * @throws \Microsoft\MsAds\Rest\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \Microsoft\MsAds\Rest\Model\CampaignManagementService\DeleteLabelAssociationsResponse|\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault|\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault|\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault|\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault, HTTP status code, HTTP response headers (array of strings)
     */
    public function deleteLabelAssociationsWithHttpInfo($DeleteLabelAssociationsRequest, string $contentType = self::contentTypes['deleteLabelAssociations'][0])
    {
        $request = $this->deleteLabelAssociationsRequest($DeleteLabelAssociationsRequest, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                $response = $e->getResponse();
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            switch($statusCode) {
                case 200:
                    return $this->getResponseContent($request, $response, '\Microsoft\MsAds\Rest\Model\CampaignManagementService\DeleteLabelAssociationsResponse');
                case 400:
                    return $this->getResponseContent($request, $response, '\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault');
                case 500:
                    return $this->getResponseContent($request, $response, '\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault');
                case 401:
                    return $this->getResponseContent($request, $response, '\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault');
                case 403:
                    return $this->getResponseContent($request, $response, '\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault');
            }

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            $returnType = '\Microsoft\MsAds\Rest\Model\CampaignManagementService\DeleteLabelAssociationsResponse';
            return $this->getResponseContent($request, $response, $returnType);

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Microsoft\MsAds\Rest\Model\CampaignManagementService\DeleteLabelAssociationsResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 500:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 403:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation deleteLabelAssociationsAsync
     *
     * @param  \Microsoft\MsAds\Rest\Model\CampaignManagementService\DeleteLabelAssociationsRequest $DeleteLabelAssociationsRequest (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['deleteLabelAssociations'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function deleteLabelAssociationsAsync($DeleteLabelAssociationsRequest, string $contentType = self::contentTypes['deleteLabelAssociations'][0])
    {
        return $this->deleteLabelAssociationsAsyncWithHttpInfo($DeleteLabelAssociationsRequest, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation deleteLabelAssociationsAsyncWithHttpInfo
     *
     * @param  \Microsoft\MsAds\Rest\Model\CampaignManagementService\DeleteLabelAssociationsRequest $DeleteLabelAssociationsRequest (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['deleteLabelAssociations'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function deleteLabelAssociationsAsyncWithHttpInfo($DeleteLabelAssociationsRequest, string $contentType = self::contentTypes['deleteLabelAssociations'][0])
    {
        $returnType = '\Microsoft\MsAds\Rest\Model\CampaignManagementService\DeleteLabelAssociationsResponse';
        $request = $this->deleteLabelAssociationsRequest($DeleteLabelAssociationsRequest, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return $this->onFulfilledResponse($response, $returnType);
                },
                function ($exception) {
                    $this->onRejectedResponse($exception);
                }
            );
    }

    /**
     * Create request for operation 'deleteLabelAssociations'
     *
     * @param  \Microsoft\MsAds\Rest\Model\CampaignManagementService\DeleteLabelAssociationsRequest $DeleteLabelAssociationsRequest (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['deleteLabelAssociations'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function deleteLabelAssociationsRequest($DeleteLabelAssociationsRequest, string $contentType = self::contentTypes['deleteLabelAssociations'][0])
    {

        // verify the required parameter 'DeleteLabelAssociationsRequest' is set
        if ($DeleteLabelAssociationsRequest === null || (is_array($DeleteLabelAssociationsRequest) && count($DeleteLabelAssociationsRequest) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $DeleteLabelAssociationsRequest when calling deleteLabelAssociations'
            );
        }


        $resourcePath = '/CampaignManagement/v13/LabelAssociations';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $multipart = false;

        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        return $this->setupAndSendRequest(
            'DELETE',
            $resourcePath,
            $headers,
            $headerParams,
            $DeleteLabelAssociationsRequest,
            $formParams,
            $multipart,
            true,
            true,
            false,
            'getHostSettingsFordeleteLabelAssociations',
            null,
            [],
            $queryParams
        );
    }

    /**
     * Operation deleteLabels
     *
     * @param  \Microsoft\MsAds\Rest\Model\CampaignManagementService\DeleteLabelsRequest $DeleteLabelsRequest DeleteLabelsRequest (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['deleteLabels'] to see the possible values for this operation
     *
     * @throws \Microsoft\MsAds\Rest\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \Microsoft\MsAds\Rest\Model\CampaignManagementService\DeleteLabelsResponse|\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault|\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault|\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault|\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault
     */
    public function deleteLabels($DeleteLabelsRequest, string $contentType = self::contentTypes['deleteLabels'][0])
    {
        list($response) = $this->deleteLabelsWithHttpInfo($DeleteLabelsRequest, $contentType);
        return $response;
    }

    /**
     * Operation deleteLabelsWithHttpInfo
     *
     * @param  \Microsoft\MsAds\Rest\Model\CampaignManagementService\DeleteLabelsRequest $DeleteLabelsRequest (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['deleteLabels'] to see the possible values for this operation
     *
     * @throws \Microsoft\MsAds\Rest\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \Microsoft\MsAds\Rest\Model\CampaignManagementService\DeleteLabelsResponse|\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault|\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault|\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault|\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault, HTTP status code, HTTP response headers (array of strings)
     */
    public function deleteLabelsWithHttpInfo($DeleteLabelsRequest, string $contentType = self::contentTypes['deleteLabels'][0])
    {
        $request = $this->deleteLabelsRequest($DeleteLabelsRequest, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                $response = $e->getResponse();
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            switch($statusCode) {
                case 200:
                    return $this->getResponseContent($request, $response, '\Microsoft\MsAds\Rest\Model\CampaignManagementService\DeleteLabelsResponse');
                case 400:
                    return $this->getResponseContent($request, $response, '\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault');
                case 500:
                    return $this->getResponseContent($request, $response, '\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault');
                case 401:
                    return $this->getResponseContent($request, $response, '\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault');
                case 403:
                    return $this->getResponseContent($request, $response, '\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault');
            }

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            $returnType = '\Microsoft\MsAds\Rest\Model\CampaignManagementService\DeleteLabelsResponse';
            return $this->getResponseContent($request, $response, $returnType);

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Microsoft\MsAds\Rest\Model\CampaignManagementService\DeleteLabelsResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 500:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 403:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation deleteLabelsAsync
     *
     * @param  \Microsoft\MsAds\Rest\Model\CampaignManagementService\DeleteLabelsRequest $DeleteLabelsRequest (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['deleteLabels'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function deleteLabelsAsync($DeleteLabelsRequest, string $contentType = self::contentTypes['deleteLabels'][0])
    {
        return $this->deleteLabelsAsyncWithHttpInfo($DeleteLabelsRequest, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation deleteLabelsAsyncWithHttpInfo
     *
     * @param  \Microsoft\MsAds\Rest\Model\CampaignManagementService\DeleteLabelsRequest $DeleteLabelsRequest (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['deleteLabels'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function deleteLabelsAsyncWithHttpInfo($DeleteLabelsRequest, string $contentType = self::contentTypes['deleteLabels'][0])
    {
        $returnType = '\Microsoft\MsAds\Rest\Model\CampaignManagementService\DeleteLabelsResponse';
        $request = $this->deleteLabelsRequest($DeleteLabelsRequest, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return $this->onFulfilledResponse($response, $returnType);
                },
                function ($exception) {
                    $this->onRejectedResponse($exception);
                }
            );
    }

    /**
     * Create request for operation 'deleteLabels'
     *
     * @param  \Microsoft\MsAds\Rest\Model\CampaignManagementService\DeleteLabelsRequest $DeleteLabelsRequest (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['deleteLabels'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function deleteLabelsRequest($DeleteLabelsRequest, string $contentType = self::contentTypes['deleteLabels'][0])
    {

        // verify the required parameter 'DeleteLabelsRequest' is set
        if ($DeleteLabelsRequest === null || (is_array($DeleteLabelsRequest) && count($DeleteLabelsRequest) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $DeleteLabelsRequest when calling deleteLabels'
            );
        }


        $resourcePath = '/CampaignManagement/v13/Labels';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $multipart = false;

        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        return $this->setupAndSendRequest(
            'DELETE',
            $resourcePath,
            $headers,
            $headerParams,
            $DeleteLabelsRequest,
            $formParams,
            $multipart,
            true,
            true,
            false,
            'getHostSettingsFordeleteLabels',
            null,
            [],
            $queryParams
        );
    }

    /**
     * Operation deleteListItemsFromSharedList
     *
     * @param  \Microsoft\MsAds\Rest\Model\CampaignManagementService\DeleteListItemsFromSharedListRequest $DeleteListItemsFromSharedListRequest DeleteListItemsFromSharedListRequest (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['deleteListItemsFromSharedList'] to see the possible values for this operation
     *
     * @throws \Microsoft\MsAds\Rest\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \Microsoft\MsAds\Rest\Model\CampaignManagementService\DeleteListItemsFromSharedListResponse|\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault|\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault|\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault|\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault
     */
    public function deleteListItemsFromSharedList($DeleteListItemsFromSharedListRequest, string $contentType = self::contentTypes['deleteListItemsFromSharedList'][0])
    {
        list($response) = $this->deleteListItemsFromSharedListWithHttpInfo($DeleteListItemsFromSharedListRequest, $contentType);
        return $response;
    }

    /**
     * Operation deleteListItemsFromSharedListWithHttpInfo
     *
     * @param  \Microsoft\MsAds\Rest\Model\CampaignManagementService\DeleteListItemsFromSharedListRequest $DeleteListItemsFromSharedListRequest (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['deleteListItemsFromSharedList'] to see the possible values for this operation
     *
     * @throws \Microsoft\MsAds\Rest\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \Microsoft\MsAds\Rest\Model\CampaignManagementService\DeleteListItemsFromSharedListResponse|\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault|\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault|\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault|\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault, HTTP status code, HTTP response headers (array of strings)
     */
    public function deleteListItemsFromSharedListWithHttpInfo($DeleteListItemsFromSharedListRequest, string $contentType = self::contentTypes['deleteListItemsFromSharedList'][0])
    {
        $request = $this->deleteListItemsFromSharedListRequest($DeleteListItemsFromSharedListRequest, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                $response = $e->getResponse();
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            switch($statusCode) {
                case 200:
                    return $this->getResponseContent($request, $response, '\Microsoft\MsAds\Rest\Model\CampaignManagementService\DeleteListItemsFromSharedListResponse');
                case 400:
                    return $this->getResponseContent($request, $response, '\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault');
                case 500:
                    return $this->getResponseContent($request, $response, '\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault');
                case 401:
                    return $this->getResponseContent($request, $response, '\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault');
                case 403:
                    return $this->getResponseContent($request, $response, '\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault');
            }

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            $returnType = '\Microsoft\MsAds\Rest\Model\CampaignManagementService\DeleteListItemsFromSharedListResponse';
            return $this->getResponseContent($request, $response, $returnType);

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Microsoft\MsAds\Rest\Model\CampaignManagementService\DeleteListItemsFromSharedListResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 500:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 403:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation deleteListItemsFromSharedListAsync
     *
     * @param  \Microsoft\MsAds\Rest\Model\CampaignManagementService\DeleteListItemsFromSharedListRequest $DeleteListItemsFromSharedListRequest (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['deleteListItemsFromSharedList'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function deleteListItemsFromSharedListAsync($DeleteListItemsFromSharedListRequest, string $contentType = self::contentTypes['deleteListItemsFromSharedList'][0])
    {
        return $this->deleteListItemsFromSharedListAsyncWithHttpInfo($DeleteListItemsFromSharedListRequest, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation deleteListItemsFromSharedListAsyncWithHttpInfo
     *
     * @param  \Microsoft\MsAds\Rest\Model\CampaignManagementService\DeleteListItemsFromSharedListRequest $DeleteListItemsFromSharedListRequest (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['deleteListItemsFromSharedList'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function deleteListItemsFromSharedListAsyncWithHttpInfo($DeleteListItemsFromSharedListRequest, string $contentType = self::contentTypes['deleteListItemsFromSharedList'][0])
    {
        $returnType = '\Microsoft\MsAds\Rest\Model\CampaignManagementService\DeleteListItemsFromSharedListResponse';
        $request = $this->deleteListItemsFromSharedListRequest($DeleteListItemsFromSharedListRequest, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return $this->onFulfilledResponse($response, $returnType);
                },
                function ($exception) {
                    $this->onRejectedResponse($exception);
                }
            );
    }

    /**
     * Create request for operation 'deleteListItemsFromSharedList'
     *
     * @param  \Microsoft\MsAds\Rest\Model\CampaignManagementService\DeleteListItemsFromSharedListRequest $DeleteListItemsFromSharedListRequest (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['deleteListItemsFromSharedList'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function deleteListItemsFromSharedListRequest($DeleteListItemsFromSharedListRequest, string $contentType = self::contentTypes['deleteListItemsFromSharedList'][0])
    {

        // verify the required parameter 'DeleteListItemsFromSharedListRequest' is set
        if ($DeleteListItemsFromSharedListRequest === null || (is_array($DeleteListItemsFromSharedListRequest) && count($DeleteListItemsFromSharedListRequest) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $DeleteListItemsFromSharedListRequest when calling deleteListItemsFromSharedList'
            );
        }


        $resourcePath = '/CampaignManagement/v13/ListItems';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $multipart = false;

        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        return $this->setupAndSendRequest(
            'DELETE',
            $resourcePath,
            $headers,
            $headerParams,
            $DeleteListItemsFromSharedListRequest,
            $formParams,
            $multipart,
            true,
            true,
            false,
            'getHostSettingsFordeleteListItemsFromSharedList',
            null,
            [],
            $queryParams
        );
    }

    /**
     * Operation deleteMedia
     *
     * @param  \Microsoft\MsAds\Rest\Model\CampaignManagementService\DeleteMediaRequest $DeleteMediaRequest DeleteMediaRequest (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['deleteMedia'] to see the possible values for this operation
     *
     * @throws \Microsoft\MsAds\Rest\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \Microsoft\MsAds\Rest\Model\CampaignManagementService\DeleteMediaResponse|\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault|\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault|\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault|\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault
     */
    public function deleteMedia($DeleteMediaRequest, string $contentType = self::contentTypes['deleteMedia'][0])
    {
        list($response) = $this->deleteMediaWithHttpInfo($DeleteMediaRequest, $contentType);
        return $response;
    }

    /**
     * Operation deleteMediaWithHttpInfo
     *
     * @param  \Microsoft\MsAds\Rest\Model\CampaignManagementService\DeleteMediaRequest $DeleteMediaRequest (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['deleteMedia'] to see the possible values for this operation
     *
     * @throws \Microsoft\MsAds\Rest\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \Microsoft\MsAds\Rest\Model\CampaignManagementService\DeleteMediaResponse|\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault|\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault|\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault|\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault, HTTP status code, HTTP response headers (array of strings)
     */
    public function deleteMediaWithHttpInfo($DeleteMediaRequest, string $contentType = self::contentTypes['deleteMedia'][0])
    {
        $request = $this->deleteMediaRequest($DeleteMediaRequest, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                $response = $e->getResponse();
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            switch($statusCode) {
                case 200:
                    return $this->getResponseContent($request, $response, '\Microsoft\MsAds\Rest\Model\CampaignManagementService\DeleteMediaResponse');
                case 400:
                    return $this->getResponseContent($request, $response, '\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault');
                case 500:
                    return $this->getResponseContent($request, $response, '\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault');
                case 401:
                    return $this->getResponseContent($request, $response, '\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault');
                case 403:
                    return $this->getResponseContent($request, $response, '\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault');
            }

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            $returnType = '\Microsoft\MsAds\Rest\Model\CampaignManagementService\DeleteMediaResponse';
            return $this->getResponseContent($request, $response, $returnType);

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Microsoft\MsAds\Rest\Model\CampaignManagementService\DeleteMediaResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 500:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 403:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation deleteMediaAsync
     *
     * @param  \Microsoft\MsAds\Rest\Model\CampaignManagementService\DeleteMediaRequest $DeleteMediaRequest (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['deleteMedia'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function deleteMediaAsync($DeleteMediaRequest, string $contentType = self::contentTypes['deleteMedia'][0])
    {
        return $this->deleteMediaAsyncWithHttpInfo($DeleteMediaRequest, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation deleteMediaAsyncWithHttpInfo
     *
     * @param  \Microsoft\MsAds\Rest\Model\CampaignManagementService\DeleteMediaRequest $DeleteMediaRequest (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['deleteMedia'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function deleteMediaAsyncWithHttpInfo($DeleteMediaRequest, string $contentType = self::contentTypes['deleteMedia'][0])
    {
        $returnType = '\Microsoft\MsAds\Rest\Model\CampaignManagementService\DeleteMediaResponse';
        $request = $this->deleteMediaRequest($DeleteMediaRequest, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return $this->onFulfilledResponse($response, $returnType);
                },
                function ($exception) {
                    $this->onRejectedResponse($exception);
                }
            );
    }

    /**
     * Create request for operation 'deleteMedia'
     *
     * @param  \Microsoft\MsAds\Rest\Model\CampaignManagementService\DeleteMediaRequest $DeleteMediaRequest (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['deleteMedia'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function deleteMediaRequest($DeleteMediaRequest, string $contentType = self::contentTypes['deleteMedia'][0])
    {

        // verify the required parameter 'DeleteMediaRequest' is set
        if ($DeleteMediaRequest === null || (is_array($DeleteMediaRequest) && count($DeleteMediaRequest) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $DeleteMediaRequest when calling deleteMedia'
            );
        }


        $resourcePath = '/CampaignManagement/v13/Media';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $multipart = false;

        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        return $this->setupAndSendRequest(
            'DELETE',
            $resourcePath,
            $headers,
            $headerParams,
            $DeleteMediaRequest,
            $formParams,
            $multipart,
            true,
            true,
            false,
            'getHostSettingsFordeleteMedia',
            null,
            [],
            $queryParams
        );
    }

    /**
     * Operation deleteNegativeKeywordsFromEntities
     *
     * @param  \Microsoft\MsAds\Rest\Model\CampaignManagementService\DeleteNegativeKeywordsFromEntitiesRequest $DeleteNegativeKeywordsFromEntitiesRequest DeleteNegativeKeywordsFromEntitiesRequest (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['deleteNegativeKeywordsFromEntities'] to see the possible values for this operation
     *
     * @throws \Microsoft\MsAds\Rest\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \Microsoft\MsAds\Rest\Model\CampaignManagementService\DeleteNegativeKeywordsFromEntitiesResponse|\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault|\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault|\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault|\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault
     */
    public function deleteNegativeKeywordsFromEntities($DeleteNegativeKeywordsFromEntitiesRequest, string $contentType = self::contentTypes['deleteNegativeKeywordsFromEntities'][0])
    {
        list($response) = $this->deleteNegativeKeywordsFromEntitiesWithHttpInfo($DeleteNegativeKeywordsFromEntitiesRequest, $contentType);
        return $response;
    }

    /**
     * Operation deleteNegativeKeywordsFromEntitiesWithHttpInfo
     *
     * @param  \Microsoft\MsAds\Rest\Model\CampaignManagementService\DeleteNegativeKeywordsFromEntitiesRequest $DeleteNegativeKeywordsFromEntitiesRequest (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['deleteNegativeKeywordsFromEntities'] to see the possible values for this operation
     *
     * @throws \Microsoft\MsAds\Rest\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \Microsoft\MsAds\Rest\Model\CampaignManagementService\DeleteNegativeKeywordsFromEntitiesResponse|\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault|\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault|\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault|\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault, HTTP status code, HTTP response headers (array of strings)
     */
    public function deleteNegativeKeywordsFromEntitiesWithHttpInfo($DeleteNegativeKeywordsFromEntitiesRequest, string $contentType = self::contentTypes['deleteNegativeKeywordsFromEntities'][0])
    {
        $request = $this->deleteNegativeKeywordsFromEntitiesRequest($DeleteNegativeKeywordsFromEntitiesRequest, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                $response = $e->getResponse();
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            switch($statusCode) {
                case 200:
                    return $this->getResponseContent($request, $response, '\Microsoft\MsAds\Rest\Model\CampaignManagementService\DeleteNegativeKeywordsFromEntitiesResponse');
                case 400:
                    return $this->getResponseContent($request, $response, '\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault');
                case 500:
                    return $this->getResponseContent($request, $response, '\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault');
                case 401:
                    return $this->getResponseContent($request, $response, '\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault');
                case 403:
                    return $this->getResponseContent($request, $response, '\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault');
            }

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            $returnType = '\Microsoft\MsAds\Rest\Model\CampaignManagementService\DeleteNegativeKeywordsFromEntitiesResponse';
            return $this->getResponseContent($request, $response, $returnType);

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Microsoft\MsAds\Rest\Model\CampaignManagementService\DeleteNegativeKeywordsFromEntitiesResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 500:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 403:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation deleteNegativeKeywordsFromEntitiesAsync
     *
     * @param  \Microsoft\MsAds\Rest\Model\CampaignManagementService\DeleteNegativeKeywordsFromEntitiesRequest $DeleteNegativeKeywordsFromEntitiesRequest (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['deleteNegativeKeywordsFromEntities'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function deleteNegativeKeywordsFromEntitiesAsync($DeleteNegativeKeywordsFromEntitiesRequest, string $contentType = self::contentTypes['deleteNegativeKeywordsFromEntities'][0])
    {
        return $this->deleteNegativeKeywordsFromEntitiesAsyncWithHttpInfo($DeleteNegativeKeywordsFromEntitiesRequest, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation deleteNegativeKeywordsFromEntitiesAsyncWithHttpInfo
     *
     * @param  \Microsoft\MsAds\Rest\Model\CampaignManagementService\DeleteNegativeKeywordsFromEntitiesRequest $DeleteNegativeKeywordsFromEntitiesRequest (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['deleteNegativeKeywordsFromEntities'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function deleteNegativeKeywordsFromEntitiesAsyncWithHttpInfo($DeleteNegativeKeywordsFromEntitiesRequest, string $contentType = self::contentTypes['deleteNegativeKeywordsFromEntities'][0])
    {
        $returnType = '\Microsoft\MsAds\Rest\Model\CampaignManagementService\DeleteNegativeKeywordsFromEntitiesResponse';
        $request = $this->deleteNegativeKeywordsFromEntitiesRequest($DeleteNegativeKeywordsFromEntitiesRequest, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return $this->onFulfilledResponse($response, $returnType);
                },
                function ($exception) {
                    $this->onRejectedResponse($exception);
                }
            );
    }

    /**
     * Create request for operation 'deleteNegativeKeywordsFromEntities'
     *
     * @param  \Microsoft\MsAds\Rest\Model\CampaignManagementService\DeleteNegativeKeywordsFromEntitiesRequest $DeleteNegativeKeywordsFromEntitiesRequest (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['deleteNegativeKeywordsFromEntities'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function deleteNegativeKeywordsFromEntitiesRequest($DeleteNegativeKeywordsFromEntitiesRequest, string $contentType = self::contentTypes['deleteNegativeKeywordsFromEntities'][0])
    {

        // verify the required parameter 'DeleteNegativeKeywordsFromEntitiesRequest' is set
        if ($DeleteNegativeKeywordsFromEntitiesRequest === null || (is_array($DeleteNegativeKeywordsFromEntitiesRequest) && count($DeleteNegativeKeywordsFromEntitiesRequest) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $DeleteNegativeKeywordsFromEntitiesRequest when calling deleteNegativeKeywordsFromEntities'
            );
        }


        $resourcePath = '/CampaignManagement/v13/EntityNegativeKeywords';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $multipart = false;

        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        return $this->setupAndSendRequest(
            'DELETE',
            $resourcePath,
            $headers,
            $headerParams,
            $DeleteNegativeKeywordsFromEntitiesRequest,
            $formParams,
            $multipart,
            true,
            true,
            false,
            'getHostSettingsFordeleteNegativeKeywordsFromEntities',
            null,
            [],
            $queryParams
        );
    }

    /**
     * Operation deleteSeasonalityAdjustments
     *
     * @param  \Microsoft\MsAds\Rest\Model\CampaignManagementService\DeleteSeasonalityAdjustmentsRequest $DeleteSeasonalityAdjustmentsRequest DeleteSeasonalityAdjustmentsRequest (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['deleteSeasonalityAdjustments'] to see the possible values for this operation
     *
     * @throws \Microsoft\MsAds\Rest\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \Microsoft\MsAds\Rest\Model\CampaignManagementService\DeleteSeasonalityAdjustmentsResponse|\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault|\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault|\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault|\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault
     */
    public function deleteSeasonalityAdjustments($DeleteSeasonalityAdjustmentsRequest, string $contentType = self::contentTypes['deleteSeasonalityAdjustments'][0])
    {
        list($response) = $this->deleteSeasonalityAdjustmentsWithHttpInfo($DeleteSeasonalityAdjustmentsRequest, $contentType);
        return $response;
    }

    /**
     * Operation deleteSeasonalityAdjustmentsWithHttpInfo
     *
     * @param  \Microsoft\MsAds\Rest\Model\CampaignManagementService\DeleteSeasonalityAdjustmentsRequest $DeleteSeasonalityAdjustmentsRequest (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['deleteSeasonalityAdjustments'] to see the possible values for this operation
     *
     * @throws \Microsoft\MsAds\Rest\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \Microsoft\MsAds\Rest\Model\CampaignManagementService\DeleteSeasonalityAdjustmentsResponse|\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault|\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault|\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault|\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault, HTTP status code, HTTP response headers (array of strings)
     */
    public function deleteSeasonalityAdjustmentsWithHttpInfo($DeleteSeasonalityAdjustmentsRequest, string $contentType = self::contentTypes['deleteSeasonalityAdjustments'][0])
    {
        $request = $this->deleteSeasonalityAdjustmentsRequest($DeleteSeasonalityAdjustmentsRequest, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                $response = $e->getResponse();
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            switch($statusCode) {
                case 200:
                    return $this->getResponseContent($request, $response, '\Microsoft\MsAds\Rest\Model\CampaignManagementService\DeleteSeasonalityAdjustmentsResponse');
                case 400:
                    return $this->getResponseContent($request, $response, '\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault');
                case 500:
                    return $this->getResponseContent($request, $response, '\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault');
                case 401:
                    return $this->getResponseContent($request, $response, '\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault');
                case 403:
                    return $this->getResponseContent($request, $response, '\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault');
            }

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            $returnType = '\Microsoft\MsAds\Rest\Model\CampaignManagementService\DeleteSeasonalityAdjustmentsResponse';
            return $this->getResponseContent($request, $response, $returnType);

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Microsoft\MsAds\Rest\Model\CampaignManagementService\DeleteSeasonalityAdjustmentsResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 500:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 403:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation deleteSeasonalityAdjustmentsAsync
     *
     * @param  \Microsoft\MsAds\Rest\Model\CampaignManagementService\DeleteSeasonalityAdjustmentsRequest $DeleteSeasonalityAdjustmentsRequest (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['deleteSeasonalityAdjustments'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function deleteSeasonalityAdjustmentsAsync($DeleteSeasonalityAdjustmentsRequest, string $contentType = self::contentTypes['deleteSeasonalityAdjustments'][0])
    {
        return $this->deleteSeasonalityAdjustmentsAsyncWithHttpInfo($DeleteSeasonalityAdjustmentsRequest, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation deleteSeasonalityAdjustmentsAsyncWithHttpInfo
     *
     * @param  \Microsoft\MsAds\Rest\Model\CampaignManagementService\DeleteSeasonalityAdjustmentsRequest $DeleteSeasonalityAdjustmentsRequest (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['deleteSeasonalityAdjustments'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function deleteSeasonalityAdjustmentsAsyncWithHttpInfo($DeleteSeasonalityAdjustmentsRequest, string $contentType = self::contentTypes['deleteSeasonalityAdjustments'][0])
    {
        $returnType = '\Microsoft\MsAds\Rest\Model\CampaignManagementService\DeleteSeasonalityAdjustmentsResponse';
        $request = $this->deleteSeasonalityAdjustmentsRequest($DeleteSeasonalityAdjustmentsRequest, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return $this->onFulfilledResponse($response, $returnType);
                },
                function ($exception) {
                    $this->onRejectedResponse($exception);
                }
            );
    }

    /**
     * Create request for operation 'deleteSeasonalityAdjustments'
     *
     * @param  \Microsoft\MsAds\Rest\Model\CampaignManagementService\DeleteSeasonalityAdjustmentsRequest $DeleteSeasonalityAdjustmentsRequest (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['deleteSeasonalityAdjustments'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function deleteSeasonalityAdjustmentsRequest($DeleteSeasonalityAdjustmentsRequest, string $contentType = self::contentTypes['deleteSeasonalityAdjustments'][0])
    {

        // verify the required parameter 'DeleteSeasonalityAdjustmentsRequest' is set
        if ($DeleteSeasonalityAdjustmentsRequest === null || (is_array($DeleteSeasonalityAdjustmentsRequest) && count($DeleteSeasonalityAdjustmentsRequest) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $DeleteSeasonalityAdjustmentsRequest when calling deleteSeasonalityAdjustments'
            );
        }


        $resourcePath = '/CampaignManagement/v13/SeasonalityAdjustments';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $multipart = false;

        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        return $this->setupAndSendRequest(
            'DELETE',
            $resourcePath,
            $headers,
            $headerParams,
            $DeleteSeasonalityAdjustmentsRequest,
            $formParams,
            $multipart,
            true,
            true,
            false,
            'getHostSettingsFordeleteSeasonalityAdjustments',
            null,
            [],
            $queryParams
        );
    }

    /**
     * Operation deleteSharedEntities
     *
     * @param  \Microsoft\MsAds\Rest\Model\CampaignManagementService\DeleteSharedEntitiesRequest $DeleteSharedEntitiesRequest DeleteSharedEntitiesRequest (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['deleteSharedEntities'] to see the possible values for this operation
     *
     * @throws \Microsoft\MsAds\Rest\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \Microsoft\MsAds\Rest\Model\CampaignManagementService\DeleteSharedEntitiesResponse|\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault|\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault|\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault|\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault
     */
    public function deleteSharedEntities($DeleteSharedEntitiesRequest, string $contentType = self::contentTypes['deleteSharedEntities'][0])
    {
        list($response) = $this->deleteSharedEntitiesWithHttpInfo($DeleteSharedEntitiesRequest, $contentType);
        return $response;
    }

    /**
     * Operation deleteSharedEntitiesWithHttpInfo
     *
     * @param  \Microsoft\MsAds\Rest\Model\CampaignManagementService\DeleteSharedEntitiesRequest $DeleteSharedEntitiesRequest (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['deleteSharedEntities'] to see the possible values for this operation
     *
     * @throws \Microsoft\MsAds\Rest\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \Microsoft\MsAds\Rest\Model\CampaignManagementService\DeleteSharedEntitiesResponse|\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault|\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault|\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault|\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault, HTTP status code, HTTP response headers (array of strings)
     */
    public function deleteSharedEntitiesWithHttpInfo($DeleteSharedEntitiesRequest, string $contentType = self::contentTypes['deleteSharedEntities'][0])
    {
        $request = $this->deleteSharedEntitiesRequest($DeleteSharedEntitiesRequest, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                $response = $e->getResponse();
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            switch($statusCode) {
                case 200:
                    return $this->getResponseContent($request, $response, '\Microsoft\MsAds\Rest\Model\CampaignManagementService\DeleteSharedEntitiesResponse');
                case 400:
                    return $this->getResponseContent($request, $response, '\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault');
                case 500:
                    return $this->getResponseContent($request, $response, '\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault');
                case 401:
                    return $this->getResponseContent($request, $response, '\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault');
                case 403:
                    return $this->getResponseContent($request, $response, '\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault');
            }

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            $returnType = '\Microsoft\MsAds\Rest\Model\CampaignManagementService\DeleteSharedEntitiesResponse';
            return $this->getResponseContent($request, $response, $returnType);

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Microsoft\MsAds\Rest\Model\CampaignManagementService\DeleteSharedEntitiesResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 500:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 403:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation deleteSharedEntitiesAsync
     *
     * @param  \Microsoft\MsAds\Rest\Model\CampaignManagementService\DeleteSharedEntitiesRequest $DeleteSharedEntitiesRequest (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['deleteSharedEntities'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function deleteSharedEntitiesAsync($DeleteSharedEntitiesRequest, string $contentType = self::contentTypes['deleteSharedEntities'][0])
    {
        return $this->deleteSharedEntitiesAsyncWithHttpInfo($DeleteSharedEntitiesRequest, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation deleteSharedEntitiesAsyncWithHttpInfo
     *
     * @param  \Microsoft\MsAds\Rest\Model\CampaignManagementService\DeleteSharedEntitiesRequest $DeleteSharedEntitiesRequest (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['deleteSharedEntities'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function deleteSharedEntitiesAsyncWithHttpInfo($DeleteSharedEntitiesRequest, string $contentType = self::contentTypes['deleteSharedEntities'][0])
    {
        $returnType = '\Microsoft\MsAds\Rest\Model\CampaignManagementService\DeleteSharedEntitiesResponse';
        $request = $this->deleteSharedEntitiesRequest($DeleteSharedEntitiesRequest, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return $this->onFulfilledResponse($response, $returnType);
                },
                function ($exception) {
                    $this->onRejectedResponse($exception);
                }
            );
    }

    /**
     * Create request for operation 'deleteSharedEntities'
     *
     * @param  \Microsoft\MsAds\Rest\Model\CampaignManagementService\DeleteSharedEntitiesRequest $DeleteSharedEntitiesRequest (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['deleteSharedEntities'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function deleteSharedEntitiesRequest($DeleteSharedEntitiesRequest, string $contentType = self::contentTypes['deleteSharedEntities'][0])
    {

        // verify the required parameter 'DeleteSharedEntitiesRequest' is set
        if ($DeleteSharedEntitiesRequest === null || (is_array($DeleteSharedEntitiesRequest) && count($DeleteSharedEntitiesRequest) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $DeleteSharedEntitiesRequest when calling deleteSharedEntities'
            );
        }


        $resourcePath = '/CampaignManagement/v13/SharedEntities';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $multipart = false;

        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        return $this->setupAndSendRequest(
            'DELETE',
            $resourcePath,
            $headers,
            $headerParams,
            $DeleteSharedEntitiesRequest,
            $formParams,
            $multipart,
            true,
            true,
            false,
            'getHostSettingsFordeleteSharedEntities',
            null,
            [],
            $queryParams
        );
    }

    /**
     * Operation deleteSharedEntityAssociations
     *
     * @param  \Microsoft\MsAds\Rest\Model\CampaignManagementService\DeleteSharedEntityAssociationsRequest $DeleteSharedEntityAssociationsRequest DeleteSharedEntityAssociationsRequest (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['deleteSharedEntityAssociations'] to see the possible values for this operation
     *
     * @throws \Microsoft\MsAds\Rest\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \Microsoft\MsAds\Rest\Model\CampaignManagementService\DeleteSharedEntityAssociationsResponse|\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault|\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault|\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault|\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault
     */
    public function deleteSharedEntityAssociations($DeleteSharedEntityAssociationsRequest, string $contentType = self::contentTypes['deleteSharedEntityAssociations'][0])
    {
        list($response) = $this->deleteSharedEntityAssociationsWithHttpInfo($DeleteSharedEntityAssociationsRequest, $contentType);
        return $response;
    }

    /**
     * Operation deleteSharedEntityAssociationsWithHttpInfo
     *
     * @param  \Microsoft\MsAds\Rest\Model\CampaignManagementService\DeleteSharedEntityAssociationsRequest $DeleteSharedEntityAssociationsRequest (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['deleteSharedEntityAssociations'] to see the possible values for this operation
     *
     * @throws \Microsoft\MsAds\Rest\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \Microsoft\MsAds\Rest\Model\CampaignManagementService\DeleteSharedEntityAssociationsResponse|\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault|\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault|\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault|\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault, HTTP status code, HTTP response headers (array of strings)
     */
    public function deleteSharedEntityAssociationsWithHttpInfo($DeleteSharedEntityAssociationsRequest, string $contentType = self::contentTypes['deleteSharedEntityAssociations'][0])
    {
        $request = $this->deleteSharedEntityAssociationsRequest($DeleteSharedEntityAssociationsRequest, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                $response = $e->getResponse();
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            switch($statusCode) {
                case 200:
                    return $this->getResponseContent($request, $response, '\Microsoft\MsAds\Rest\Model\CampaignManagementService\DeleteSharedEntityAssociationsResponse');
                case 400:
                    return $this->getResponseContent($request, $response, '\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault');
                case 500:
                    return $this->getResponseContent($request, $response, '\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault');
                case 401:
                    return $this->getResponseContent($request, $response, '\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault');
                case 403:
                    return $this->getResponseContent($request, $response, '\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault');
            }

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            $returnType = '\Microsoft\MsAds\Rest\Model\CampaignManagementService\DeleteSharedEntityAssociationsResponse';
            return $this->getResponseContent($request, $response, $returnType);

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Microsoft\MsAds\Rest\Model\CampaignManagementService\DeleteSharedEntityAssociationsResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 500:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 403:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation deleteSharedEntityAssociationsAsync
     *
     * @param  \Microsoft\MsAds\Rest\Model\CampaignManagementService\DeleteSharedEntityAssociationsRequest $DeleteSharedEntityAssociationsRequest (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['deleteSharedEntityAssociations'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function deleteSharedEntityAssociationsAsync($DeleteSharedEntityAssociationsRequest, string $contentType = self::contentTypes['deleteSharedEntityAssociations'][0])
    {
        return $this->deleteSharedEntityAssociationsAsyncWithHttpInfo($DeleteSharedEntityAssociationsRequest, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation deleteSharedEntityAssociationsAsyncWithHttpInfo
     *
     * @param  \Microsoft\MsAds\Rest\Model\CampaignManagementService\DeleteSharedEntityAssociationsRequest $DeleteSharedEntityAssociationsRequest (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['deleteSharedEntityAssociations'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function deleteSharedEntityAssociationsAsyncWithHttpInfo($DeleteSharedEntityAssociationsRequest, string $contentType = self::contentTypes['deleteSharedEntityAssociations'][0])
    {
        $returnType = '\Microsoft\MsAds\Rest\Model\CampaignManagementService\DeleteSharedEntityAssociationsResponse';
        $request = $this->deleteSharedEntityAssociationsRequest($DeleteSharedEntityAssociationsRequest, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return $this->onFulfilledResponse($response, $returnType);
                },
                function ($exception) {
                    $this->onRejectedResponse($exception);
                }
            );
    }

    /**
     * Create request for operation 'deleteSharedEntityAssociations'
     *
     * @param  \Microsoft\MsAds\Rest\Model\CampaignManagementService\DeleteSharedEntityAssociationsRequest $DeleteSharedEntityAssociationsRequest (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['deleteSharedEntityAssociations'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function deleteSharedEntityAssociationsRequest($DeleteSharedEntityAssociationsRequest, string $contentType = self::contentTypes['deleteSharedEntityAssociations'][0])
    {

        // verify the required parameter 'DeleteSharedEntityAssociationsRequest' is set
        if ($DeleteSharedEntityAssociationsRequest === null || (is_array($DeleteSharedEntityAssociationsRequest) && count($DeleteSharedEntityAssociationsRequest) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $DeleteSharedEntityAssociationsRequest when calling deleteSharedEntityAssociations'
            );
        }


        $resourcePath = '/CampaignManagement/v13/SharedEntityAssociations';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $multipart = false;

        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        return $this->setupAndSendRequest(
            'DELETE',
            $resourcePath,
            $headers,
            $headerParams,
            $DeleteSharedEntityAssociationsRequest,
            $formParams,
            $multipart,
            true,
            true,
            false,
            'getHostSettingsFordeleteSharedEntityAssociations',
            null,
            [],
            $queryParams
        );
    }

    /**
     * Operation deleteVideos
     *
     * @param  \Microsoft\MsAds\Rest\Model\CampaignManagementService\DeleteVideosRequest $DeleteVideosRequest DeleteVideosRequest (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['deleteVideos'] to see the possible values for this operation
     *
     * @throws \Microsoft\MsAds\Rest\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \Microsoft\MsAds\Rest\Model\CampaignManagementService\DeleteVideosResponse|\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault|\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault|\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault|\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault
     */
    public function deleteVideos($DeleteVideosRequest, string $contentType = self::contentTypes['deleteVideos'][0])
    {
        list($response) = $this->deleteVideosWithHttpInfo($DeleteVideosRequest, $contentType);
        return $response;
    }

    /**
     * Operation deleteVideosWithHttpInfo
     *
     * @param  \Microsoft\MsAds\Rest\Model\CampaignManagementService\DeleteVideosRequest $DeleteVideosRequest (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['deleteVideos'] to see the possible values for this operation
     *
     * @throws \Microsoft\MsAds\Rest\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \Microsoft\MsAds\Rest\Model\CampaignManagementService\DeleteVideosResponse|\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault|\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault|\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault|\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault, HTTP status code, HTTP response headers (array of strings)
     */
    public function deleteVideosWithHttpInfo($DeleteVideosRequest, string $contentType = self::contentTypes['deleteVideos'][0])
    {
        $request = $this->deleteVideosRequest($DeleteVideosRequest, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                $response = $e->getResponse();
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            switch($statusCode) {
                case 200:
                    return $this->getResponseContent($request, $response, '\Microsoft\MsAds\Rest\Model\CampaignManagementService\DeleteVideosResponse');
                case 400:
                    return $this->getResponseContent($request, $response, '\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault');
                case 500:
                    return $this->getResponseContent($request, $response, '\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault');
                case 401:
                    return $this->getResponseContent($request, $response, '\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault');
                case 403:
                    return $this->getResponseContent($request, $response, '\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault');
            }

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            $returnType = '\Microsoft\MsAds\Rest\Model\CampaignManagementService\DeleteVideosResponse';
            return $this->getResponseContent($request, $response, $returnType);

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Microsoft\MsAds\Rest\Model\CampaignManagementService\DeleteVideosResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 500:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 403:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation deleteVideosAsync
     *
     * @param  \Microsoft\MsAds\Rest\Model\CampaignManagementService\DeleteVideosRequest $DeleteVideosRequest (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['deleteVideos'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function deleteVideosAsync($DeleteVideosRequest, string $contentType = self::contentTypes['deleteVideos'][0])
    {
        return $this->deleteVideosAsyncWithHttpInfo($DeleteVideosRequest, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation deleteVideosAsyncWithHttpInfo
     *
     * @param  \Microsoft\MsAds\Rest\Model\CampaignManagementService\DeleteVideosRequest $DeleteVideosRequest (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['deleteVideos'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function deleteVideosAsyncWithHttpInfo($DeleteVideosRequest, string $contentType = self::contentTypes['deleteVideos'][0])
    {
        $returnType = '\Microsoft\MsAds\Rest\Model\CampaignManagementService\DeleteVideosResponse';
        $request = $this->deleteVideosRequest($DeleteVideosRequest, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return $this->onFulfilledResponse($response, $returnType);
                },
                function ($exception) {
                    $this->onRejectedResponse($exception);
                }
            );
    }

    /**
     * Create request for operation 'deleteVideos'
     *
     * @param  \Microsoft\MsAds\Rest\Model\CampaignManagementService\DeleteVideosRequest $DeleteVideosRequest (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['deleteVideos'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function deleteVideosRequest($DeleteVideosRequest, string $contentType = self::contentTypes['deleteVideos'][0])
    {

        // verify the required parameter 'DeleteVideosRequest' is set
        if ($DeleteVideosRequest === null || (is_array($DeleteVideosRequest) && count($DeleteVideosRequest) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $DeleteVideosRequest when calling deleteVideos'
            );
        }


        $resourcePath = '/CampaignManagement/v13/Videos';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $multipart = false;

        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        return $this->setupAndSendRequest(
            'DELETE',
            $resourcePath,
            $headers,
            $headerParams,
            $DeleteVideosRequest,
            $formParams,
            $multipart,
            true,
            true,
            false,
            'getHostSettingsFordeleteVideos',
            null,
            [],
            $queryParams
        );
    }

    /**
     * Operation getAccountMigrationStatuses
     *
     * @param  \Microsoft\MsAds\Rest\Model\CampaignManagementService\GetAccountMigrationStatusesRequest $GetAccountMigrationStatusesRequest GetAccountMigrationStatusesRequest (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getAccountMigrationStatuses'] to see the possible values for this operation
     *
     * @throws \Microsoft\MsAds\Rest\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \Microsoft\MsAds\Rest\Model\CampaignManagementService\GetAccountMigrationStatusesResponse|\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault|\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault|\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault|\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault
     */
    public function getAccountMigrationStatuses($GetAccountMigrationStatusesRequest, string $contentType = self::contentTypes['getAccountMigrationStatuses'][0])
    {
        list($response) = $this->getAccountMigrationStatusesWithHttpInfo($GetAccountMigrationStatusesRequest, $contentType);
        return $response;
    }

    /**
     * Operation getAccountMigrationStatusesWithHttpInfo
     *
     * @param  \Microsoft\MsAds\Rest\Model\CampaignManagementService\GetAccountMigrationStatusesRequest $GetAccountMigrationStatusesRequest (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getAccountMigrationStatuses'] to see the possible values for this operation
     *
     * @throws \Microsoft\MsAds\Rest\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \Microsoft\MsAds\Rest\Model\CampaignManagementService\GetAccountMigrationStatusesResponse|\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault|\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault|\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault|\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault, HTTP status code, HTTP response headers (array of strings)
     */
    public function getAccountMigrationStatusesWithHttpInfo($GetAccountMigrationStatusesRequest, string $contentType = self::contentTypes['getAccountMigrationStatuses'][0])
    {
        $request = $this->getAccountMigrationStatusesRequest($GetAccountMigrationStatusesRequest, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                $response = $e->getResponse();
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            switch($statusCode) {
                case 200:
                    return $this->getResponseContent($request, $response, '\Microsoft\MsAds\Rest\Model\CampaignManagementService\GetAccountMigrationStatusesResponse');
                case 400:
                    return $this->getResponseContent($request, $response, '\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault');
                case 500:
                    return $this->getResponseContent($request, $response, '\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault');
                case 401:
                    return $this->getResponseContent($request, $response, '\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault');
                case 403:
                    return $this->getResponseContent($request, $response, '\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault');
            }

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            $returnType = '\Microsoft\MsAds\Rest\Model\CampaignManagementService\GetAccountMigrationStatusesResponse';
            return $this->getResponseContent($request, $response, $returnType);

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Microsoft\MsAds\Rest\Model\CampaignManagementService\GetAccountMigrationStatusesResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 500:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 403:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getAccountMigrationStatusesAsync
     *
     * @param  \Microsoft\MsAds\Rest\Model\CampaignManagementService\GetAccountMigrationStatusesRequest $GetAccountMigrationStatusesRequest (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getAccountMigrationStatuses'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getAccountMigrationStatusesAsync($GetAccountMigrationStatusesRequest, string $contentType = self::contentTypes['getAccountMigrationStatuses'][0])
    {
        return $this->getAccountMigrationStatusesAsyncWithHttpInfo($GetAccountMigrationStatusesRequest, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getAccountMigrationStatusesAsyncWithHttpInfo
     *
     * @param  \Microsoft\MsAds\Rest\Model\CampaignManagementService\GetAccountMigrationStatusesRequest $GetAccountMigrationStatusesRequest (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getAccountMigrationStatuses'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getAccountMigrationStatusesAsyncWithHttpInfo($GetAccountMigrationStatusesRequest, string $contentType = self::contentTypes['getAccountMigrationStatuses'][0])
    {
        $returnType = '\Microsoft\MsAds\Rest\Model\CampaignManagementService\GetAccountMigrationStatusesResponse';
        $request = $this->getAccountMigrationStatusesRequest($GetAccountMigrationStatusesRequest, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return $this->onFulfilledResponse($response, $returnType);
                },
                function ($exception) {
                    $this->onRejectedResponse($exception);
                }
            );
    }

    /**
     * Create request for operation 'getAccountMigrationStatuses'
     *
     * @param  \Microsoft\MsAds\Rest\Model\CampaignManagementService\GetAccountMigrationStatusesRequest $GetAccountMigrationStatusesRequest (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getAccountMigrationStatuses'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function getAccountMigrationStatusesRequest($GetAccountMigrationStatusesRequest, string $contentType = self::contentTypes['getAccountMigrationStatuses'][0])
    {

        // verify the required parameter 'GetAccountMigrationStatusesRequest' is set
        if ($GetAccountMigrationStatusesRequest === null || (is_array($GetAccountMigrationStatusesRequest) && count($GetAccountMigrationStatusesRequest) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $GetAccountMigrationStatusesRequest when calling getAccountMigrationStatuses'
            );
        }


        $resourcePath = '/CampaignManagement/v13/AccountMigrationStatuses/Query';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $multipart = false;

        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        return $this->setupAndSendRequest(
            'POST',
            $resourcePath,
            $headers,
            $headerParams,
            $GetAccountMigrationStatusesRequest,
            $formParams,
            $multipart,
            true,
            true,
            false,
            'getHostSettingsForgetAccountMigrationStatuses',
            null,
            [],
            $queryParams
        );
    }

    /**
     * Operation getAccountProperties
     *
     * @param  \Microsoft\MsAds\Rest\Model\CampaignManagementService\GetAccountPropertiesRequest $GetAccountPropertiesRequest GetAccountPropertiesRequest (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getAccountProperties'] to see the possible values for this operation
     *
     * @throws \Microsoft\MsAds\Rest\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \Microsoft\MsAds\Rest\Model\CampaignManagementService\GetAccountPropertiesResponse|\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault|\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault|\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault|\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault
     */
    public function getAccountProperties($GetAccountPropertiesRequest, string $contentType = self::contentTypes['getAccountProperties'][0])
    {
        list($response) = $this->getAccountPropertiesWithHttpInfo($GetAccountPropertiesRequest, $contentType);
        return $response;
    }

    /**
     * Operation getAccountPropertiesWithHttpInfo
     *
     * @param  \Microsoft\MsAds\Rest\Model\CampaignManagementService\GetAccountPropertiesRequest $GetAccountPropertiesRequest (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getAccountProperties'] to see the possible values for this operation
     *
     * @throws \Microsoft\MsAds\Rest\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \Microsoft\MsAds\Rest\Model\CampaignManagementService\GetAccountPropertiesResponse|\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault|\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault|\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault|\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault, HTTP status code, HTTP response headers (array of strings)
     */
    public function getAccountPropertiesWithHttpInfo($GetAccountPropertiesRequest, string $contentType = self::contentTypes['getAccountProperties'][0])
    {
        $request = $this->getAccountPropertiesRequest($GetAccountPropertiesRequest, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                $response = $e->getResponse();
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            switch($statusCode) {
                case 200:
                    return $this->getResponseContent($request, $response, '\Microsoft\MsAds\Rest\Model\CampaignManagementService\GetAccountPropertiesResponse');
                case 400:
                    return $this->getResponseContent($request, $response, '\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault');
                case 500:
                    return $this->getResponseContent($request, $response, '\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault');
                case 401:
                    return $this->getResponseContent($request, $response, '\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault');
                case 403:
                    return $this->getResponseContent($request, $response, '\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault');
            }

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            $returnType = '\Microsoft\MsAds\Rest\Model\CampaignManagementService\GetAccountPropertiesResponse';
            return $this->getResponseContent($request, $response, $returnType);

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Microsoft\MsAds\Rest\Model\CampaignManagementService\GetAccountPropertiesResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 500:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 403:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getAccountPropertiesAsync
     *
     * @param  \Microsoft\MsAds\Rest\Model\CampaignManagementService\GetAccountPropertiesRequest $GetAccountPropertiesRequest (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getAccountProperties'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getAccountPropertiesAsync($GetAccountPropertiesRequest, string $contentType = self::contentTypes['getAccountProperties'][0])
    {
        return $this->getAccountPropertiesAsyncWithHttpInfo($GetAccountPropertiesRequest, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getAccountPropertiesAsyncWithHttpInfo
     *
     * @param  \Microsoft\MsAds\Rest\Model\CampaignManagementService\GetAccountPropertiesRequest $GetAccountPropertiesRequest (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getAccountProperties'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getAccountPropertiesAsyncWithHttpInfo($GetAccountPropertiesRequest, string $contentType = self::contentTypes['getAccountProperties'][0])
    {
        $returnType = '\Microsoft\MsAds\Rest\Model\CampaignManagementService\GetAccountPropertiesResponse';
        $request = $this->getAccountPropertiesRequest($GetAccountPropertiesRequest, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return $this->onFulfilledResponse($response, $returnType);
                },
                function ($exception) {
                    $this->onRejectedResponse($exception);
                }
            );
    }

    /**
     * Create request for operation 'getAccountProperties'
     *
     * @param  \Microsoft\MsAds\Rest\Model\CampaignManagementService\GetAccountPropertiesRequest $GetAccountPropertiesRequest (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getAccountProperties'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function getAccountPropertiesRequest($GetAccountPropertiesRequest, string $contentType = self::contentTypes['getAccountProperties'][0])
    {

        // verify the required parameter 'GetAccountPropertiesRequest' is set
        if ($GetAccountPropertiesRequest === null || (is_array($GetAccountPropertiesRequest) && count($GetAccountPropertiesRequest) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $GetAccountPropertiesRequest when calling getAccountProperties'
            );
        }


        $resourcePath = '/CampaignManagement/v13/AccountProperties/Query';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $multipart = false;

        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        return $this->setupAndSendRequest(
            'POST',
            $resourcePath,
            $headers,
            $headerParams,
            $GetAccountPropertiesRequest,
            $formParams,
            $multipart,
            true,
            true,
            false,
            'getHostSettingsForgetAccountProperties',
            null,
            [],
            $queryParams
        );
    }

    /**
     * Operation getAdExtensionIdsByAccountId
     *
     * @param  \Microsoft\MsAds\Rest\Model\CampaignManagementService\GetAdExtensionIdsByAccountIdRequest $GetAdExtensionIdsByAccountIdRequest GetAdExtensionIdsByAccountIdRequest (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getAdExtensionIdsByAccountId'] to see the possible values for this operation
     *
     * @throws \Microsoft\MsAds\Rest\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \Microsoft\MsAds\Rest\Model\CampaignManagementService\GetAdExtensionIdsByAccountIdResponse|\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault|\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault|\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault|\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault
     */
    public function getAdExtensionIdsByAccountId($GetAdExtensionIdsByAccountIdRequest, string $contentType = self::contentTypes['getAdExtensionIdsByAccountId'][0])
    {
        list($response) = $this->getAdExtensionIdsByAccountIdWithHttpInfo($GetAdExtensionIdsByAccountIdRequest, $contentType);
        return $response;
    }

    /**
     * Operation getAdExtensionIdsByAccountIdWithHttpInfo
     *
     * @param  \Microsoft\MsAds\Rest\Model\CampaignManagementService\GetAdExtensionIdsByAccountIdRequest $GetAdExtensionIdsByAccountIdRequest (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getAdExtensionIdsByAccountId'] to see the possible values for this operation
     *
     * @throws \Microsoft\MsAds\Rest\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \Microsoft\MsAds\Rest\Model\CampaignManagementService\GetAdExtensionIdsByAccountIdResponse|\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault|\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault|\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault|\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault, HTTP status code, HTTP response headers (array of strings)
     */
    public function getAdExtensionIdsByAccountIdWithHttpInfo($GetAdExtensionIdsByAccountIdRequest, string $contentType = self::contentTypes['getAdExtensionIdsByAccountId'][0])
    {
        $request = $this->getAdExtensionIdsByAccountIdRequest($GetAdExtensionIdsByAccountIdRequest, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                $response = $e->getResponse();
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            switch($statusCode) {
                case 200:
                    return $this->getResponseContent($request, $response, '\Microsoft\MsAds\Rest\Model\CampaignManagementService\GetAdExtensionIdsByAccountIdResponse');
                case 400:
                    return $this->getResponseContent($request, $response, '\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault');
                case 500:
                    return $this->getResponseContent($request, $response, '\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault');
                case 401:
                    return $this->getResponseContent($request, $response, '\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault');
                case 403:
                    return $this->getResponseContent($request, $response, '\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault');
            }

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            $returnType = '\Microsoft\MsAds\Rest\Model\CampaignManagementService\GetAdExtensionIdsByAccountIdResponse';
            return $this->getResponseContent($request, $response, $returnType);

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Microsoft\MsAds\Rest\Model\CampaignManagementService\GetAdExtensionIdsByAccountIdResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 500:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 403:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getAdExtensionIdsByAccountIdAsync
     *
     * @param  \Microsoft\MsAds\Rest\Model\CampaignManagementService\GetAdExtensionIdsByAccountIdRequest $GetAdExtensionIdsByAccountIdRequest (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getAdExtensionIdsByAccountId'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getAdExtensionIdsByAccountIdAsync($GetAdExtensionIdsByAccountIdRequest, string $contentType = self::contentTypes['getAdExtensionIdsByAccountId'][0])
    {
        return $this->getAdExtensionIdsByAccountIdAsyncWithHttpInfo($GetAdExtensionIdsByAccountIdRequest, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getAdExtensionIdsByAccountIdAsyncWithHttpInfo
     *
     * @param  \Microsoft\MsAds\Rest\Model\CampaignManagementService\GetAdExtensionIdsByAccountIdRequest $GetAdExtensionIdsByAccountIdRequest (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getAdExtensionIdsByAccountId'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getAdExtensionIdsByAccountIdAsyncWithHttpInfo($GetAdExtensionIdsByAccountIdRequest, string $contentType = self::contentTypes['getAdExtensionIdsByAccountId'][0])
    {
        $returnType = '\Microsoft\MsAds\Rest\Model\CampaignManagementService\GetAdExtensionIdsByAccountIdResponse';
        $request = $this->getAdExtensionIdsByAccountIdRequest($GetAdExtensionIdsByAccountIdRequest, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return $this->onFulfilledResponse($response, $returnType);
                },
                function ($exception) {
                    $this->onRejectedResponse($exception);
                }
            );
    }

    /**
     * Create request for operation 'getAdExtensionIdsByAccountId'
     *
     * @param  \Microsoft\MsAds\Rest\Model\CampaignManagementService\GetAdExtensionIdsByAccountIdRequest $GetAdExtensionIdsByAccountIdRequest (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getAdExtensionIdsByAccountId'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function getAdExtensionIdsByAccountIdRequest($GetAdExtensionIdsByAccountIdRequest, string $contentType = self::contentTypes['getAdExtensionIdsByAccountId'][0])
    {

        // verify the required parameter 'GetAdExtensionIdsByAccountIdRequest' is set
        if ($GetAdExtensionIdsByAccountIdRequest === null || (is_array($GetAdExtensionIdsByAccountIdRequest) && count($GetAdExtensionIdsByAccountIdRequest) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $GetAdExtensionIdsByAccountIdRequest when calling getAdExtensionIdsByAccountId'
            );
        }


        $resourcePath = '/CampaignManagement/v13/AdExtensionIds/QueryByAccountId';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $multipart = false;

        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        return $this->setupAndSendRequest(
            'POST',
            $resourcePath,
            $headers,
            $headerParams,
            $GetAdExtensionIdsByAccountIdRequest,
            $formParams,
            $multipart,
            true,
            true,
            false,
            'getHostSettingsForgetAdExtensionIdsByAccountId',
            null,
            [],
            $queryParams
        );
    }

    /**
     * Operation getAdExtensionsAssociations
     *
     * @param  \Microsoft\MsAds\Rest\Model\CampaignManagementService\GetAdExtensionsAssociationsRequest $GetAdExtensionsAssociationsRequest GetAdExtensionsAssociationsRequest (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getAdExtensionsAssociations'] to see the possible values for this operation
     *
     * @throws \Microsoft\MsAds\Rest\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \Microsoft\MsAds\Rest\Model\CampaignManagementService\GetAdExtensionsAssociationsResponse|\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault|\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault|\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault|\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault
     */
    public function getAdExtensionsAssociations($GetAdExtensionsAssociationsRequest, string $contentType = self::contentTypes['getAdExtensionsAssociations'][0])
    {
        list($response) = $this->getAdExtensionsAssociationsWithHttpInfo($GetAdExtensionsAssociationsRequest, $contentType);
        return $response;
    }

    /**
     * Operation getAdExtensionsAssociationsWithHttpInfo
     *
     * @param  \Microsoft\MsAds\Rest\Model\CampaignManagementService\GetAdExtensionsAssociationsRequest $GetAdExtensionsAssociationsRequest (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getAdExtensionsAssociations'] to see the possible values for this operation
     *
     * @throws \Microsoft\MsAds\Rest\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \Microsoft\MsAds\Rest\Model\CampaignManagementService\GetAdExtensionsAssociationsResponse|\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault|\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault|\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault|\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault, HTTP status code, HTTP response headers (array of strings)
     */
    public function getAdExtensionsAssociationsWithHttpInfo($GetAdExtensionsAssociationsRequest, string $contentType = self::contentTypes['getAdExtensionsAssociations'][0])
    {
        $request = $this->getAdExtensionsAssociationsRequest($GetAdExtensionsAssociationsRequest, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                $response = $e->getResponse();
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            switch($statusCode) {
                case 200:
                    return $this->getResponseContent($request, $response, '\Microsoft\MsAds\Rest\Model\CampaignManagementService\GetAdExtensionsAssociationsResponse');
                case 400:
                    return $this->getResponseContent($request, $response, '\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault');
                case 500:
                    return $this->getResponseContent($request, $response, '\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault');
                case 401:
                    return $this->getResponseContent($request, $response, '\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault');
                case 403:
                    return $this->getResponseContent($request, $response, '\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault');
            }

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            $returnType = '\Microsoft\MsAds\Rest\Model\CampaignManagementService\GetAdExtensionsAssociationsResponse';
            return $this->getResponseContent($request, $response, $returnType);

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Microsoft\MsAds\Rest\Model\CampaignManagementService\GetAdExtensionsAssociationsResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 500:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 403:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getAdExtensionsAssociationsAsync
     *
     * @param  \Microsoft\MsAds\Rest\Model\CampaignManagementService\GetAdExtensionsAssociationsRequest $GetAdExtensionsAssociationsRequest (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getAdExtensionsAssociations'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getAdExtensionsAssociationsAsync($GetAdExtensionsAssociationsRequest, string $contentType = self::contentTypes['getAdExtensionsAssociations'][0])
    {
        return $this->getAdExtensionsAssociationsAsyncWithHttpInfo($GetAdExtensionsAssociationsRequest, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getAdExtensionsAssociationsAsyncWithHttpInfo
     *
     * @param  \Microsoft\MsAds\Rest\Model\CampaignManagementService\GetAdExtensionsAssociationsRequest $GetAdExtensionsAssociationsRequest (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getAdExtensionsAssociations'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getAdExtensionsAssociationsAsyncWithHttpInfo($GetAdExtensionsAssociationsRequest, string $contentType = self::contentTypes['getAdExtensionsAssociations'][0])
    {
        $returnType = '\Microsoft\MsAds\Rest\Model\CampaignManagementService\GetAdExtensionsAssociationsResponse';
        $request = $this->getAdExtensionsAssociationsRequest($GetAdExtensionsAssociationsRequest, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return $this->onFulfilledResponse($response, $returnType);
                },
                function ($exception) {
                    $this->onRejectedResponse($exception);
                }
            );
    }

    /**
     * Create request for operation 'getAdExtensionsAssociations'
     *
     * @param  \Microsoft\MsAds\Rest\Model\CampaignManagementService\GetAdExtensionsAssociationsRequest $GetAdExtensionsAssociationsRequest (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getAdExtensionsAssociations'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function getAdExtensionsAssociationsRequest($GetAdExtensionsAssociationsRequest, string $contentType = self::contentTypes['getAdExtensionsAssociations'][0])
    {

        // verify the required parameter 'GetAdExtensionsAssociationsRequest' is set
        if ($GetAdExtensionsAssociationsRequest === null || (is_array($GetAdExtensionsAssociationsRequest) && count($GetAdExtensionsAssociationsRequest) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $GetAdExtensionsAssociationsRequest when calling getAdExtensionsAssociations'
            );
        }


        $resourcePath = '/CampaignManagement/v13/AdExtensionsAssociations/Query';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $multipart = false;

        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        return $this->setupAndSendRequest(
            'POST',
            $resourcePath,
            $headers,
            $headerParams,
            $GetAdExtensionsAssociationsRequest,
            $formParams,
            $multipart,
            true,
            true,
            false,
            'getHostSettingsForgetAdExtensionsAssociations',
            null,
            [],
            $queryParams
        );
    }

    /**
     * Operation getAdExtensionsByIds
     *
     * @param  \Microsoft\MsAds\Rest\Model\CampaignManagementService\GetAdExtensionsByIdsRequest $GetAdExtensionsByIdsRequest GetAdExtensionsByIdsRequest (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getAdExtensionsByIds'] to see the possible values for this operation
     *
     * @throws \Microsoft\MsAds\Rest\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \Microsoft\MsAds\Rest\Model\CampaignManagementService\GetAdExtensionsByIdsResponse|\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault|\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault|\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault|\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault
     */
    public function getAdExtensionsByIds($GetAdExtensionsByIdsRequest, string $contentType = self::contentTypes['getAdExtensionsByIds'][0])
    {
        list($response) = $this->getAdExtensionsByIdsWithHttpInfo($GetAdExtensionsByIdsRequest, $contentType);
        return $response;
    }

    /**
     * Operation getAdExtensionsByIdsWithHttpInfo
     *
     * @param  \Microsoft\MsAds\Rest\Model\CampaignManagementService\GetAdExtensionsByIdsRequest $GetAdExtensionsByIdsRequest (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getAdExtensionsByIds'] to see the possible values for this operation
     *
     * @throws \Microsoft\MsAds\Rest\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \Microsoft\MsAds\Rest\Model\CampaignManagementService\GetAdExtensionsByIdsResponse|\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault|\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault|\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault|\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault, HTTP status code, HTTP response headers (array of strings)
     */
    public function getAdExtensionsByIdsWithHttpInfo($GetAdExtensionsByIdsRequest, string $contentType = self::contentTypes['getAdExtensionsByIds'][0])
    {
        $request = $this->getAdExtensionsByIdsRequest($GetAdExtensionsByIdsRequest, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                $response = $e->getResponse();
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            switch($statusCode) {
                case 200:
                    return $this->getResponseContent($request, $response, '\Microsoft\MsAds\Rest\Model\CampaignManagementService\GetAdExtensionsByIdsResponse');
                case 400:
                    return $this->getResponseContent($request, $response, '\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault');
                case 500:
                    return $this->getResponseContent($request, $response, '\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault');
                case 401:
                    return $this->getResponseContent($request, $response, '\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault');
                case 403:
                    return $this->getResponseContent($request, $response, '\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault');
            }

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            $returnType = '\Microsoft\MsAds\Rest\Model\CampaignManagementService\GetAdExtensionsByIdsResponse';
            return $this->getResponseContent($request, $response, $returnType);

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Microsoft\MsAds\Rest\Model\CampaignManagementService\GetAdExtensionsByIdsResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 500:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 403:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getAdExtensionsByIdsAsync
     *
     * @param  \Microsoft\MsAds\Rest\Model\CampaignManagementService\GetAdExtensionsByIdsRequest $GetAdExtensionsByIdsRequest (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getAdExtensionsByIds'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getAdExtensionsByIdsAsync($GetAdExtensionsByIdsRequest, string $contentType = self::contentTypes['getAdExtensionsByIds'][0])
    {
        return $this->getAdExtensionsByIdsAsyncWithHttpInfo($GetAdExtensionsByIdsRequest, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getAdExtensionsByIdsAsyncWithHttpInfo
     *
     * @param  \Microsoft\MsAds\Rest\Model\CampaignManagementService\GetAdExtensionsByIdsRequest $GetAdExtensionsByIdsRequest (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getAdExtensionsByIds'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getAdExtensionsByIdsAsyncWithHttpInfo($GetAdExtensionsByIdsRequest, string $contentType = self::contentTypes['getAdExtensionsByIds'][0])
    {
        $returnType = '\Microsoft\MsAds\Rest\Model\CampaignManagementService\GetAdExtensionsByIdsResponse';
        $request = $this->getAdExtensionsByIdsRequest($GetAdExtensionsByIdsRequest, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return $this->onFulfilledResponse($response, $returnType);
                },
                function ($exception) {
                    $this->onRejectedResponse($exception);
                }
            );
    }

    /**
     * Create request for operation 'getAdExtensionsByIds'
     *
     * @param  \Microsoft\MsAds\Rest\Model\CampaignManagementService\GetAdExtensionsByIdsRequest $GetAdExtensionsByIdsRequest (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getAdExtensionsByIds'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function getAdExtensionsByIdsRequest($GetAdExtensionsByIdsRequest, string $contentType = self::contentTypes['getAdExtensionsByIds'][0])
    {

        // verify the required parameter 'GetAdExtensionsByIdsRequest' is set
        if ($GetAdExtensionsByIdsRequest === null || (is_array($GetAdExtensionsByIdsRequest) && count($GetAdExtensionsByIdsRequest) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $GetAdExtensionsByIdsRequest when calling getAdExtensionsByIds'
            );
        }


        $resourcePath = '/CampaignManagement/v13/AdExtensions/QueryByIds';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $multipart = false;

        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        return $this->setupAndSendRequest(
            'POST',
            $resourcePath,
            $headers,
            $headerParams,
            $GetAdExtensionsByIdsRequest,
            $formParams,
            $multipart,
            true,
            true,
            false,
            'getHostSettingsForgetAdExtensionsByIds',
            null,
            [],
            $queryParams
        );
    }

    /**
     * Operation getAdExtensionsEditorialReasons
     *
     * @param  \Microsoft\MsAds\Rest\Model\CampaignManagementService\GetAdExtensionsEditorialReasonsRequest $GetAdExtensionsEditorialReasonsRequest GetAdExtensionsEditorialReasonsRequest (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getAdExtensionsEditorialReasons'] to see the possible values for this operation
     *
     * @throws \Microsoft\MsAds\Rest\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \Microsoft\MsAds\Rest\Model\CampaignManagementService\GetAdExtensionsEditorialReasonsResponse|\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault|\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault|\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault|\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault
     */
    public function getAdExtensionsEditorialReasons($GetAdExtensionsEditorialReasonsRequest, string $contentType = self::contentTypes['getAdExtensionsEditorialReasons'][0])
    {
        list($response) = $this->getAdExtensionsEditorialReasonsWithHttpInfo($GetAdExtensionsEditorialReasonsRequest, $contentType);
        return $response;
    }

    /**
     * Operation getAdExtensionsEditorialReasonsWithHttpInfo
     *
     * @param  \Microsoft\MsAds\Rest\Model\CampaignManagementService\GetAdExtensionsEditorialReasonsRequest $GetAdExtensionsEditorialReasonsRequest (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getAdExtensionsEditorialReasons'] to see the possible values for this operation
     *
     * @throws \Microsoft\MsAds\Rest\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \Microsoft\MsAds\Rest\Model\CampaignManagementService\GetAdExtensionsEditorialReasonsResponse|\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault|\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault|\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault|\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault, HTTP status code, HTTP response headers (array of strings)
     */
    public function getAdExtensionsEditorialReasonsWithHttpInfo($GetAdExtensionsEditorialReasonsRequest, string $contentType = self::contentTypes['getAdExtensionsEditorialReasons'][0])
    {
        $request = $this->getAdExtensionsEditorialReasonsRequest($GetAdExtensionsEditorialReasonsRequest, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                $response = $e->getResponse();
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            switch($statusCode) {
                case 200:
                    return $this->getResponseContent($request, $response, '\Microsoft\MsAds\Rest\Model\CampaignManagementService\GetAdExtensionsEditorialReasonsResponse');
                case 400:
                    return $this->getResponseContent($request, $response, '\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault');
                case 500:
                    return $this->getResponseContent($request, $response, '\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault');
                case 401:
                    return $this->getResponseContent($request, $response, '\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault');
                case 403:
                    return $this->getResponseContent($request, $response, '\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault');
            }

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            $returnType = '\Microsoft\MsAds\Rest\Model\CampaignManagementService\GetAdExtensionsEditorialReasonsResponse';
            return $this->getResponseContent($request, $response, $returnType);

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Microsoft\MsAds\Rest\Model\CampaignManagementService\GetAdExtensionsEditorialReasonsResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 500:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 403:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getAdExtensionsEditorialReasonsAsync
     *
     * @param  \Microsoft\MsAds\Rest\Model\CampaignManagementService\GetAdExtensionsEditorialReasonsRequest $GetAdExtensionsEditorialReasonsRequest (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getAdExtensionsEditorialReasons'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getAdExtensionsEditorialReasonsAsync($GetAdExtensionsEditorialReasonsRequest, string $contentType = self::contentTypes['getAdExtensionsEditorialReasons'][0])
    {
        return $this->getAdExtensionsEditorialReasonsAsyncWithHttpInfo($GetAdExtensionsEditorialReasonsRequest, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getAdExtensionsEditorialReasonsAsyncWithHttpInfo
     *
     * @param  \Microsoft\MsAds\Rest\Model\CampaignManagementService\GetAdExtensionsEditorialReasonsRequest $GetAdExtensionsEditorialReasonsRequest (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getAdExtensionsEditorialReasons'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getAdExtensionsEditorialReasonsAsyncWithHttpInfo($GetAdExtensionsEditorialReasonsRequest, string $contentType = self::contentTypes['getAdExtensionsEditorialReasons'][0])
    {
        $returnType = '\Microsoft\MsAds\Rest\Model\CampaignManagementService\GetAdExtensionsEditorialReasonsResponse';
        $request = $this->getAdExtensionsEditorialReasonsRequest($GetAdExtensionsEditorialReasonsRequest, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return $this->onFulfilledResponse($response, $returnType);
                },
                function ($exception) {
                    $this->onRejectedResponse($exception);
                }
            );
    }

    /**
     * Create request for operation 'getAdExtensionsEditorialReasons'
     *
     * @param  \Microsoft\MsAds\Rest\Model\CampaignManagementService\GetAdExtensionsEditorialReasonsRequest $GetAdExtensionsEditorialReasonsRequest (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getAdExtensionsEditorialReasons'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function getAdExtensionsEditorialReasonsRequest($GetAdExtensionsEditorialReasonsRequest, string $contentType = self::contentTypes['getAdExtensionsEditorialReasons'][0])
    {

        // verify the required parameter 'GetAdExtensionsEditorialReasonsRequest' is set
        if ($GetAdExtensionsEditorialReasonsRequest === null || (is_array($GetAdExtensionsEditorialReasonsRequest) && count($GetAdExtensionsEditorialReasonsRequest) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $GetAdExtensionsEditorialReasonsRequest when calling getAdExtensionsEditorialReasons'
            );
        }


        $resourcePath = '/CampaignManagement/v13/AdExtensionsEditorialReasons/Query';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $multipart = false;

        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        return $this->setupAndSendRequest(
            'POST',
            $resourcePath,
            $headers,
            $headerParams,
            $GetAdExtensionsEditorialReasonsRequest,
            $formParams,
            $multipart,
            true,
            true,
            false,
            'getHostSettingsForgetAdExtensionsEditorialReasons',
            null,
            [],
            $queryParams
        );
    }

    /**
     * Operation getAdGroupCriterionsByIds
     *
     * @param  \Microsoft\MsAds\Rest\Model\CampaignManagementService\GetAdGroupCriterionsByIdsRequest $GetAdGroupCriterionsByIdsRequest GetAdGroupCriterionsByIdsRequest (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getAdGroupCriterionsByIds'] to see the possible values for this operation
     *
     * @throws \Microsoft\MsAds\Rest\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \Microsoft\MsAds\Rest\Model\CampaignManagementService\GetAdGroupCriterionsByIdsResponse|\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault|\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault|\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault|\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault
     */
    public function getAdGroupCriterionsByIds($GetAdGroupCriterionsByIdsRequest, string $contentType = self::contentTypes['getAdGroupCriterionsByIds'][0])
    {
        list($response) = $this->getAdGroupCriterionsByIdsWithHttpInfo($GetAdGroupCriterionsByIdsRequest, $contentType);
        return $response;
    }

    /**
     * Operation getAdGroupCriterionsByIdsWithHttpInfo
     *
     * @param  \Microsoft\MsAds\Rest\Model\CampaignManagementService\GetAdGroupCriterionsByIdsRequest $GetAdGroupCriterionsByIdsRequest (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getAdGroupCriterionsByIds'] to see the possible values for this operation
     *
     * @throws \Microsoft\MsAds\Rest\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \Microsoft\MsAds\Rest\Model\CampaignManagementService\GetAdGroupCriterionsByIdsResponse|\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault|\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault|\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault|\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault, HTTP status code, HTTP response headers (array of strings)
     */
    public function getAdGroupCriterionsByIdsWithHttpInfo($GetAdGroupCriterionsByIdsRequest, string $contentType = self::contentTypes['getAdGroupCriterionsByIds'][0])
    {
        $request = $this->getAdGroupCriterionsByIdsRequest($GetAdGroupCriterionsByIdsRequest, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                $response = $e->getResponse();
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            switch($statusCode) {
                case 200:
                    return $this->getResponseContent($request, $response, '\Microsoft\MsAds\Rest\Model\CampaignManagementService\GetAdGroupCriterionsByIdsResponse');
                case 400:
                    return $this->getResponseContent($request, $response, '\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault');
                case 500:
                    return $this->getResponseContent($request, $response, '\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault');
                case 401:
                    return $this->getResponseContent($request, $response, '\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault');
                case 403:
                    return $this->getResponseContent($request, $response, '\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault');
            }

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            $returnType = '\Microsoft\MsAds\Rest\Model\CampaignManagementService\GetAdGroupCriterionsByIdsResponse';
            return $this->getResponseContent($request, $response, $returnType);

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Microsoft\MsAds\Rest\Model\CampaignManagementService\GetAdGroupCriterionsByIdsResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 500:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 403:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getAdGroupCriterionsByIdsAsync
     *
     * @param  \Microsoft\MsAds\Rest\Model\CampaignManagementService\GetAdGroupCriterionsByIdsRequest $GetAdGroupCriterionsByIdsRequest (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getAdGroupCriterionsByIds'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getAdGroupCriterionsByIdsAsync($GetAdGroupCriterionsByIdsRequest, string $contentType = self::contentTypes['getAdGroupCriterionsByIds'][0])
    {
        return $this->getAdGroupCriterionsByIdsAsyncWithHttpInfo($GetAdGroupCriterionsByIdsRequest, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getAdGroupCriterionsByIdsAsyncWithHttpInfo
     *
     * @param  \Microsoft\MsAds\Rest\Model\CampaignManagementService\GetAdGroupCriterionsByIdsRequest $GetAdGroupCriterionsByIdsRequest (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getAdGroupCriterionsByIds'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getAdGroupCriterionsByIdsAsyncWithHttpInfo($GetAdGroupCriterionsByIdsRequest, string $contentType = self::contentTypes['getAdGroupCriterionsByIds'][0])
    {
        $returnType = '\Microsoft\MsAds\Rest\Model\CampaignManagementService\GetAdGroupCriterionsByIdsResponse';
        $request = $this->getAdGroupCriterionsByIdsRequest($GetAdGroupCriterionsByIdsRequest, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return $this->onFulfilledResponse($response, $returnType);
                },
                function ($exception) {
                    $this->onRejectedResponse($exception);
                }
            );
    }

    /**
     * Create request for operation 'getAdGroupCriterionsByIds'
     *
     * @param  \Microsoft\MsAds\Rest\Model\CampaignManagementService\GetAdGroupCriterionsByIdsRequest $GetAdGroupCriterionsByIdsRequest (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getAdGroupCriterionsByIds'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function getAdGroupCriterionsByIdsRequest($GetAdGroupCriterionsByIdsRequest, string $contentType = self::contentTypes['getAdGroupCriterionsByIds'][0])
    {

        // verify the required parameter 'GetAdGroupCriterionsByIdsRequest' is set
        if ($GetAdGroupCriterionsByIdsRequest === null || (is_array($GetAdGroupCriterionsByIdsRequest) && count($GetAdGroupCriterionsByIdsRequest) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $GetAdGroupCriterionsByIdsRequest when calling getAdGroupCriterionsByIds'
            );
        }


        $resourcePath = '/CampaignManagement/v13/AdGroupCriterions/QueryByIds';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $multipart = false;

        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        return $this->setupAndSendRequest(
            'POST',
            $resourcePath,
            $headers,
            $headerParams,
            $GetAdGroupCriterionsByIdsRequest,
            $formParams,
            $multipart,
            true,
            true,
            false,
            'getHostSettingsForgetAdGroupCriterionsByIds',
            null,
            [],
            $queryParams
        );
    }

    /**
     * Operation getAdGroupsByCampaignId
     *
     * @param  \Microsoft\MsAds\Rest\Model\CampaignManagementService\GetAdGroupsByCampaignIdRequest $GetAdGroupsByCampaignIdRequest GetAdGroupsByCampaignIdRequest (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getAdGroupsByCampaignId'] to see the possible values for this operation
     *
     * @throws \Microsoft\MsAds\Rest\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \Microsoft\MsAds\Rest\Model\CampaignManagementService\GetAdGroupsByCampaignIdResponse|\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault|\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault|\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault|\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault
     */
    public function getAdGroupsByCampaignId($GetAdGroupsByCampaignIdRequest, string $contentType = self::contentTypes['getAdGroupsByCampaignId'][0])
    {
        list($response) = $this->getAdGroupsByCampaignIdWithHttpInfo($GetAdGroupsByCampaignIdRequest, $contentType);
        return $response;
    }

    /**
     * Operation getAdGroupsByCampaignIdWithHttpInfo
     *
     * @param  \Microsoft\MsAds\Rest\Model\CampaignManagementService\GetAdGroupsByCampaignIdRequest $GetAdGroupsByCampaignIdRequest (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getAdGroupsByCampaignId'] to see the possible values for this operation
     *
     * @throws \Microsoft\MsAds\Rest\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \Microsoft\MsAds\Rest\Model\CampaignManagementService\GetAdGroupsByCampaignIdResponse|\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault|\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault|\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault|\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault, HTTP status code, HTTP response headers (array of strings)
     */
    public function getAdGroupsByCampaignIdWithHttpInfo($GetAdGroupsByCampaignIdRequest, string $contentType = self::contentTypes['getAdGroupsByCampaignId'][0])
    {
        $request = $this->getAdGroupsByCampaignIdRequest($GetAdGroupsByCampaignIdRequest, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                $response = $e->getResponse();
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            switch($statusCode) {
                case 200:
                    return $this->getResponseContent($request, $response, '\Microsoft\MsAds\Rest\Model\CampaignManagementService\GetAdGroupsByCampaignIdResponse');
                case 400:
                    return $this->getResponseContent($request, $response, '\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault');
                case 500:
                    return $this->getResponseContent($request, $response, '\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault');
                case 401:
                    return $this->getResponseContent($request, $response, '\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault');
                case 403:
                    return $this->getResponseContent($request, $response, '\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault');
            }

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            $returnType = '\Microsoft\MsAds\Rest\Model\CampaignManagementService\GetAdGroupsByCampaignIdResponse';
            return $this->getResponseContent($request, $response, $returnType);

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Microsoft\MsAds\Rest\Model\CampaignManagementService\GetAdGroupsByCampaignIdResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 500:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 403:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getAdGroupsByCampaignIdAsync
     *
     * @param  \Microsoft\MsAds\Rest\Model\CampaignManagementService\GetAdGroupsByCampaignIdRequest $GetAdGroupsByCampaignIdRequest (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getAdGroupsByCampaignId'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getAdGroupsByCampaignIdAsync($GetAdGroupsByCampaignIdRequest, string $contentType = self::contentTypes['getAdGroupsByCampaignId'][0])
    {
        return $this->getAdGroupsByCampaignIdAsyncWithHttpInfo($GetAdGroupsByCampaignIdRequest, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getAdGroupsByCampaignIdAsyncWithHttpInfo
     *
     * @param  \Microsoft\MsAds\Rest\Model\CampaignManagementService\GetAdGroupsByCampaignIdRequest $GetAdGroupsByCampaignIdRequest (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getAdGroupsByCampaignId'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getAdGroupsByCampaignIdAsyncWithHttpInfo($GetAdGroupsByCampaignIdRequest, string $contentType = self::contentTypes['getAdGroupsByCampaignId'][0])
    {
        $returnType = '\Microsoft\MsAds\Rest\Model\CampaignManagementService\GetAdGroupsByCampaignIdResponse';
        $request = $this->getAdGroupsByCampaignIdRequest($GetAdGroupsByCampaignIdRequest, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return $this->onFulfilledResponse($response, $returnType);
                },
                function ($exception) {
                    $this->onRejectedResponse($exception);
                }
            );
    }

    /**
     * Create request for operation 'getAdGroupsByCampaignId'
     *
     * @param  \Microsoft\MsAds\Rest\Model\CampaignManagementService\GetAdGroupsByCampaignIdRequest $GetAdGroupsByCampaignIdRequest (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getAdGroupsByCampaignId'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function getAdGroupsByCampaignIdRequest($GetAdGroupsByCampaignIdRequest, string $contentType = self::contentTypes['getAdGroupsByCampaignId'][0])
    {

        // verify the required parameter 'GetAdGroupsByCampaignIdRequest' is set
        if ($GetAdGroupsByCampaignIdRequest === null || (is_array($GetAdGroupsByCampaignIdRequest) && count($GetAdGroupsByCampaignIdRequest) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $GetAdGroupsByCampaignIdRequest when calling getAdGroupsByCampaignId'
            );
        }


        $resourcePath = '/CampaignManagement/v13/AdGroups/QueryByCampaignId';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $multipart = false;

        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        return $this->setupAndSendRequest(
            'POST',
            $resourcePath,
            $headers,
            $headerParams,
            $GetAdGroupsByCampaignIdRequest,
            $formParams,
            $multipart,
            true,
            true,
            false,
            'getHostSettingsForgetAdGroupsByCampaignId',
            null,
            [],
            $queryParams
        );
    }

    /**
     * Operation getAdGroupsByIds
     *
     * @param  \Microsoft\MsAds\Rest\Model\CampaignManagementService\GetAdGroupsByIdsRequest $GetAdGroupsByIdsRequest GetAdGroupsByIdsRequest (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getAdGroupsByIds'] to see the possible values for this operation
     *
     * @throws \Microsoft\MsAds\Rest\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \Microsoft\MsAds\Rest\Model\CampaignManagementService\GetAdGroupsByIdsResponse|\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault|\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault|\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault|\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault
     */
    public function getAdGroupsByIds($GetAdGroupsByIdsRequest, string $contentType = self::contentTypes['getAdGroupsByIds'][0])
    {
        list($response) = $this->getAdGroupsByIdsWithHttpInfo($GetAdGroupsByIdsRequest, $contentType);
        return $response;
    }

    /**
     * Operation getAdGroupsByIdsWithHttpInfo
     *
     * @param  \Microsoft\MsAds\Rest\Model\CampaignManagementService\GetAdGroupsByIdsRequest $GetAdGroupsByIdsRequest (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getAdGroupsByIds'] to see the possible values for this operation
     *
     * @throws \Microsoft\MsAds\Rest\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \Microsoft\MsAds\Rest\Model\CampaignManagementService\GetAdGroupsByIdsResponse|\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault|\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault|\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault|\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault, HTTP status code, HTTP response headers (array of strings)
     */
    public function getAdGroupsByIdsWithHttpInfo($GetAdGroupsByIdsRequest, string $contentType = self::contentTypes['getAdGroupsByIds'][0])
    {
        $request = $this->getAdGroupsByIdsRequest($GetAdGroupsByIdsRequest, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                $response = $e->getResponse();
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            switch($statusCode) {
                case 200:
                    return $this->getResponseContent($request, $response, '\Microsoft\MsAds\Rest\Model\CampaignManagementService\GetAdGroupsByIdsResponse');
                case 400:
                    return $this->getResponseContent($request, $response, '\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault');
                case 500:
                    return $this->getResponseContent($request, $response, '\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault');
                case 401:
                    return $this->getResponseContent($request, $response, '\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault');
                case 403:
                    return $this->getResponseContent($request, $response, '\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault');
            }

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            $returnType = '\Microsoft\MsAds\Rest\Model\CampaignManagementService\GetAdGroupsByIdsResponse';
            return $this->getResponseContent($request, $response, $returnType);

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Microsoft\MsAds\Rest\Model\CampaignManagementService\GetAdGroupsByIdsResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 500:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 403:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getAdGroupsByIdsAsync
     *
     * @param  \Microsoft\MsAds\Rest\Model\CampaignManagementService\GetAdGroupsByIdsRequest $GetAdGroupsByIdsRequest (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getAdGroupsByIds'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getAdGroupsByIdsAsync($GetAdGroupsByIdsRequest, string $contentType = self::contentTypes['getAdGroupsByIds'][0])
    {
        return $this->getAdGroupsByIdsAsyncWithHttpInfo($GetAdGroupsByIdsRequest, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getAdGroupsByIdsAsyncWithHttpInfo
     *
     * @param  \Microsoft\MsAds\Rest\Model\CampaignManagementService\GetAdGroupsByIdsRequest $GetAdGroupsByIdsRequest (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getAdGroupsByIds'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getAdGroupsByIdsAsyncWithHttpInfo($GetAdGroupsByIdsRequest, string $contentType = self::contentTypes['getAdGroupsByIds'][0])
    {
        $returnType = '\Microsoft\MsAds\Rest\Model\CampaignManagementService\GetAdGroupsByIdsResponse';
        $request = $this->getAdGroupsByIdsRequest($GetAdGroupsByIdsRequest, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return $this->onFulfilledResponse($response, $returnType);
                },
                function ($exception) {
                    $this->onRejectedResponse($exception);
                }
            );
    }

    /**
     * Create request for operation 'getAdGroupsByIds'
     *
     * @param  \Microsoft\MsAds\Rest\Model\CampaignManagementService\GetAdGroupsByIdsRequest $GetAdGroupsByIdsRequest (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getAdGroupsByIds'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function getAdGroupsByIdsRequest($GetAdGroupsByIdsRequest, string $contentType = self::contentTypes['getAdGroupsByIds'][0])
    {

        // verify the required parameter 'GetAdGroupsByIdsRequest' is set
        if ($GetAdGroupsByIdsRequest === null || (is_array($GetAdGroupsByIdsRequest) && count($GetAdGroupsByIdsRequest) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $GetAdGroupsByIdsRequest when calling getAdGroupsByIds'
            );
        }


        $resourcePath = '/CampaignManagement/v13/AdGroups/QueryByIds';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $multipart = false;

        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        return $this->setupAndSendRequest(
            'POST',
            $resourcePath,
            $headers,
            $headerParams,
            $GetAdGroupsByIdsRequest,
            $formParams,
            $multipart,
            true,
            true,
            false,
            'getHostSettingsForgetAdGroupsByIds',
            null,
            [],
            $queryParams
        );
    }

    /**
     * Operation getAdsByAdGroupId
     *
     * @param  \Microsoft\MsAds\Rest\Model\CampaignManagementService\GetAdsByAdGroupIdRequest $GetAdsByAdGroupIdRequest GetAdsByAdGroupIdRequest (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getAdsByAdGroupId'] to see the possible values for this operation
     *
     * @throws \Microsoft\MsAds\Rest\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \Microsoft\MsAds\Rest\Model\CampaignManagementService\GetAdsByAdGroupIdResponse|\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault|\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault|\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault|\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault
     */
    public function getAdsByAdGroupId($GetAdsByAdGroupIdRequest, string $contentType = self::contentTypes['getAdsByAdGroupId'][0])
    {
        list($response) = $this->getAdsByAdGroupIdWithHttpInfo($GetAdsByAdGroupIdRequest, $contentType);
        return $response;
    }

    /**
     * Operation getAdsByAdGroupIdWithHttpInfo
     *
     * @param  \Microsoft\MsAds\Rest\Model\CampaignManagementService\GetAdsByAdGroupIdRequest $GetAdsByAdGroupIdRequest (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getAdsByAdGroupId'] to see the possible values for this operation
     *
     * @throws \Microsoft\MsAds\Rest\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \Microsoft\MsAds\Rest\Model\CampaignManagementService\GetAdsByAdGroupIdResponse|\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault|\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault|\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault|\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault, HTTP status code, HTTP response headers (array of strings)
     */
    public function getAdsByAdGroupIdWithHttpInfo($GetAdsByAdGroupIdRequest, string $contentType = self::contentTypes['getAdsByAdGroupId'][0])
    {
        $request = $this->getAdsByAdGroupIdRequest($GetAdsByAdGroupIdRequest, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                $response = $e->getResponse();
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            switch($statusCode) {
                case 200:
                    return $this->getResponseContent($request, $response, '\Microsoft\MsAds\Rest\Model\CampaignManagementService\GetAdsByAdGroupIdResponse');
                case 400:
                    return $this->getResponseContent($request, $response, '\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault');
                case 500:
                    return $this->getResponseContent($request, $response, '\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault');
                case 401:
                    return $this->getResponseContent($request, $response, '\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault');
                case 403:
                    return $this->getResponseContent($request, $response, '\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault');
            }

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            $returnType = '\Microsoft\MsAds\Rest\Model\CampaignManagementService\GetAdsByAdGroupIdResponse';
            return $this->getResponseContent($request, $response, $returnType);

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Microsoft\MsAds\Rest\Model\CampaignManagementService\GetAdsByAdGroupIdResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 500:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 403:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getAdsByAdGroupIdAsync
     *
     * @param  \Microsoft\MsAds\Rest\Model\CampaignManagementService\GetAdsByAdGroupIdRequest $GetAdsByAdGroupIdRequest (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getAdsByAdGroupId'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getAdsByAdGroupIdAsync($GetAdsByAdGroupIdRequest, string $contentType = self::contentTypes['getAdsByAdGroupId'][0])
    {
        return $this->getAdsByAdGroupIdAsyncWithHttpInfo($GetAdsByAdGroupIdRequest, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getAdsByAdGroupIdAsyncWithHttpInfo
     *
     * @param  \Microsoft\MsAds\Rest\Model\CampaignManagementService\GetAdsByAdGroupIdRequest $GetAdsByAdGroupIdRequest (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getAdsByAdGroupId'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getAdsByAdGroupIdAsyncWithHttpInfo($GetAdsByAdGroupIdRequest, string $contentType = self::contentTypes['getAdsByAdGroupId'][0])
    {
        $returnType = '\Microsoft\MsAds\Rest\Model\CampaignManagementService\GetAdsByAdGroupIdResponse';
        $request = $this->getAdsByAdGroupIdRequest($GetAdsByAdGroupIdRequest, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return $this->onFulfilledResponse($response, $returnType);
                },
                function ($exception) {
                    $this->onRejectedResponse($exception);
                }
            );
    }

    /**
     * Create request for operation 'getAdsByAdGroupId'
     *
     * @param  \Microsoft\MsAds\Rest\Model\CampaignManagementService\GetAdsByAdGroupIdRequest $GetAdsByAdGroupIdRequest (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getAdsByAdGroupId'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function getAdsByAdGroupIdRequest($GetAdsByAdGroupIdRequest, string $contentType = self::contentTypes['getAdsByAdGroupId'][0])
    {

        // verify the required parameter 'GetAdsByAdGroupIdRequest' is set
        if ($GetAdsByAdGroupIdRequest === null || (is_array($GetAdsByAdGroupIdRequest) && count($GetAdsByAdGroupIdRequest) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $GetAdsByAdGroupIdRequest when calling getAdsByAdGroupId'
            );
        }


        $resourcePath = '/CampaignManagement/v13/Ads/QueryByAdGroupId';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $multipart = false;

        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        return $this->setupAndSendRequest(
            'POST',
            $resourcePath,
            $headers,
            $headerParams,
            $GetAdsByAdGroupIdRequest,
            $formParams,
            $multipart,
            true,
            true,
            false,
            'getHostSettingsForgetAdsByAdGroupId',
            null,
            [],
            $queryParams
        );
    }

    /**
     * Operation getAdsByEditorialStatus
     *
     * @param  \Microsoft\MsAds\Rest\Model\CampaignManagementService\GetAdsByEditorialStatusRequest $GetAdsByEditorialStatusRequest GetAdsByEditorialStatusRequest (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getAdsByEditorialStatus'] to see the possible values for this operation
     *
     * @throws \Microsoft\MsAds\Rest\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \Microsoft\MsAds\Rest\Model\CampaignManagementService\GetAdsByEditorialStatusResponse|\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault|\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault|\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault|\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault
     */
    public function getAdsByEditorialStatus($GetAdsByEditorialStatusRequest, string $contentType = self::contentTypes['getAdsByEditorialStatus'][0])
    {
        list($response) = $this->getAdsByEditorialStatusWithHttpInfo($GetAdsByEditorialStatusRequest, $contentType);
        return $response;
    }

    /**
     * Operation getAdsByEditorialStatusWithHttpInfo
     *
     * @param  \Microsoft\MsAds\Rest\Model\CampaignManagementService\GetAdsByEditorialStatusRequest $GetAdsByEditorialStatusRequest (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getAdsByEditorialStatus'] to see the possible values for this operation
     *
     * @throws \Microsoft\MsAds\Rest\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \Microsoft\MsAds\Rest\Model\CampaignManagementService\GetAdsByEditorialStatusResponse|\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault|\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault|\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault|\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault, HTTP status code, HTTP response headers (array of strings)
     */
    public function getAdsByEditorialStatusWithHttpInfo($GetAdsByEditorialStatusRequest, string $contentType = self::contentTypes['getAdsByEditorialStatus'][0])
    {
        $request = $this->getAdsByEditorialStatusRequest($GetAdsByEditorialStatusRequest, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                $response = $e->getResponse();
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            switch($statusCode) {
                case 200:
                    return $this->getResponseContent($request, $response, '\Microsoft\MsAds\Rest\Model\CampaignManagementService\GetAdsByEditorialStatusResponse');
                case 400:
                    return $this->getResponseContent($request, $response, '\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault');
                case 500:
                    return $this->getResponseContent($request, $response, '\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault');
                case 401:
                    return $this->getResponseContent($request, $response, '\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault');
                case 403:
                    return $this->getResponseContent($request, $response, '\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault');
            }

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            $returnType = '\Microsoft\MsAds\Rest\Model\CampaignManagementService\GetAdsByEditorialStatusResponse';
            return $this->getResponseContent($request, $response, $returnType);

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Microsoft\MsAds\Rest\Model\CampaignManagementService\GetAdsByEditorialStatusResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 500:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 403:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getAdsByEditorialStatusAsync
     *
     * @param  \Microsoft\MsAds\Rest\Model\CampaignManagementService\GetAdsByEditorialStatusRequest $GetAdsByEditorialStatusRequest (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getAdsByEditorialStatus'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getAdsByEditorialStatusAsync($GetAdsByEditorialStatusRequest, string $contentType = self::contentTypes['getAdsByEditorialStatus'][0])
    {
        return $this->getAdsByEditorialStatusAsyncWithHttpInfo($GetAdsByEditorialStatusRequest, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getAdsByEditorialStatusAsyncWithHttpInfo
     *
     * @param  \Microsoft\MsAds\Rest\Model\CampaignManagementService\GetAdsByEditorialStatusRequest $GetAdsByEditorialStatusRequest (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getAdsByEditorialStatus'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getAdsByEditorialStatusAsyncWithHttpInfo($GetAdsByEditorialStatusRequest, string $contentType = self::contentTypes['getAdsByEditorialStatus'][0])
    {
        $returnType = '\Microsoft\MsAds\Rest\Model\CampaignManagementService\GetAdsByEditorialStatusResponse';
        $request = $this->getAdsByEditorialStatusRequest($GetAdsByEditorialStatusRequest, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return $this->onFulfilledResponse($response, $returnType);
                },
                function ($exception) {
                    $this->onRejectedResponse($exception);
                }
            );
    }

    /**
     * Create request for operation 'getAdsByEditorialStatus'
     *
     * @param  \Microsoft\MsAds\Rest\Model\CampaignManagementService\GetAdsByEditorialStatusRequest $GetAdsByEditorialStatusRequest (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getAdsByEditorialStatus'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function getAdsByEditorialStatusRequest($GetAdsByEditorialStatusRequest, string $contentType = self::contentTypes['getAdsByEditorialStatus'][0])
    {

        // verify the required parameter 'GetAdsByEditorialStatusRequest' is set
        if ($GetAdsByEditorialStatusRequest === null || (is_array($GetAdsByEditorialStatusRequest) && count($GetAdsByEditorialStatusRequest) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $GetAdsByEditorialStatusRequest when calling getAdsByEditorialStatus'
            );
        }


        $resourcePath = '/CampaignManagement/v13/Ads/QueryByEditorialStatus';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $multipart = false;

        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        return $this->setupAndSendRequest(
            'POST',
            $resourcePath,
            $headers,
            $headerParams,
            $GetAdsByEditorialStatusRequest,
            $formParams,
            $multipart,
            true,
            true,
            false,
            'getHostSettingsForgetAdsByEditorialStatus',
            null,
            [],
            $queryParams
        );
    }

    /**
     * Operation getAdsByIds
     *
     * @param  \Microsoft\MsAds\Rest\Model\CampaignManagementService\GetAdsByIdsRequest $GetAdsByIdsRequest GetAdsByIdsRequest (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getAdsByIds'] to see the possible values for this operation
     *
     * @throws \Microsoft\MsAds\Rest\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \Microsoft\MsAds\Rest\Model\CampaignManagementService\GetAdsByIdsResponse|\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault|\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault|\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault|\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault
     */
    public function getAdsByIds($GetAdsByIdsRequest, string $contentType = self::contentTypes['getAdsByIds'][0])
    {
        list($response) = $this->getAdsByIdsWithHttpInfo($GetAdsByIdsRequest, $contentType);
        return $response;
    }

    /**
     * Operation getAdsByIdsWithHttpInfo
     *
     * @param  \Microsoft\MsAds\Rest\Model\CampaignManagementService\GetAdsByIdsRequest $GetAdsByIdsRequest (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getAdsByIds'] to see the possible values for this operation
     *
     * @throws \Microsoft\MsAds\Rest\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \Microsoft\MsAds\Rest\Model\CampaignManagementService\GetAdsByIdsResponse|\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault|\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault|\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault|\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault, HTTP status code, HTTP response headers (array of strings)
     */
    public function getAdsByIdsWithHttpInfo($GetAdsByIdsRequest, string $contentType = self::contentTypes['getAdsByIds'][0])
    {
        $request = $this->getAdsByIdsRequest($GetAdsByIdsRequest, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                $response = $e->getResponse();
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            switch($statusCode) {
                case 200:
                    return $this->getResponseContent($request, $response, '\Microsoft\MsAds\Rest\Model\CampaignManagementService\GetAdsByIdsResponse');
                case 400:
                    return $this->getResponseContent($request, $response, '\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault');
                case 500:
                    return $this->getResponseContent($request, $response, '\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault');
                case 401:
                    return $this->getResponseContent($request, $response, '\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault');
                case 403:
                    return $this->getResponseContent($request, $response, '\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault');
            }

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            $returnType = '\Microsoft\MsAds\Rest\Model\CampaignManagementService\GetAdsByIdsResponse';
            return $this->getResponseContent($request, $response, $returnType);

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Microsoft\MsAds\Rest\Model\CampaignManagementService\GetAdsByIdsResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 500:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 403:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getAdsByIdsAsync
     *
     * @param  \Microsoft\MsAds\Rest\Model\CampaignManagementService\GetAdsByIdsRequest $GetAdsByIdsRequest (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getAdsByIds'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getAdsByIdsAsync($GetAdsByIdsRequest, string $contentType = self::contentTypes['getAdsByIds'][0])
    {
        return $this->getAdsByIdsAsyncWithHttpInfo($GetAdsByIdsRequest, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getAdsByIdsAsyncWithHttpInfo
     *
     * @param  \Microsoft\MsAds\Rest\Model\CampaignManagementService\GetAdsByIdsRequest $GetAdsByIdsRequest (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getAdsByIds'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getAdsByIdsAsyncWithHttpInfo($GetAdsByIdsRequest, string $contentType = self::contentTypes['getAdsByIds'][0])
    {
        $returnType = '\Microsoft\MsAds\Rest\Model\CampaignManagementService\GetAdsByIdsResponse';
        $request = $this->getAdsByIdsRequest($GetAdsByIdsRequest, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return $this->onFulfilledResponse($response, $returnType);
                },
                function ($exception) {
                    $this->onRejectedResponse($exception);
                }
            );
    }

    /**
     * Create request for operation 'getAdsByIds'
     *
     * @param  \Microsoft\MsAds\Rest\Model\CampaignManagementService\GetAdsByIdsRequest $GetAdsByIdsRequest (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getAdsByIds'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function getAdsByIdsRequest($GetAdsByIdsRequest, string $contentType = self::contentTypes['getAdsByIds'][0])
    {

        // verify the required parameter 'GetAdsByIdsRequest' is set
        if ($GetAdsByIdsRequest === null || (is_array($GetAdsByIdsRequest) && count($GetAdsByIdsRequest) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $GetAdsByIdsRequest when calling getAdsByIds'
            );
        }


        $resourcePath = '/CampaignManagement/v13/Ads/QueryByIds';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $multipart = false;

        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        return $this->setupAndSendRequest(
            'POST',
            $resourcePath,
            $headers,
            $headerParams,
            $GetAdsByIdsRequest,
            $formParams,
            $multipart,
            true,
            true,
            false,
            'getHostSettingsForgetAdsByIds',
            null,
            [],
            $queryParams
        );
    }

    /**
     * Operation getAssetGroupListingGroupsByIds
     *
     * @param  \Microsoft\MsAds\Rest\Model\CampaignManagementService\GetAssetGroupListingGroupsByIdsRequest $GetAssetGroupListingGroupsByIdsRequest GetAssetGroupListingGroupsByIdsRequest (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getAssetGroupListingGroupsByIds'] to see the possible values for this operation
     *
     * @throws \Microsoft\MsAds\Rest\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \Microsoft\MsAds\Rest\Model\CampaignManagementService\GetAssetGroupListingGroupsByIdsResponse|\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault|\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault|\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault|\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault
     */
    public function getAssetGroupListingGroupsByIds($GetAssetGroupListingGroupsByIdsRequest, string $contentType = self::contentTypes['getAssetGroupListingGroupsByIds'][0])
    {
        list($response) = $this->getAssetGroupListingGroupsByIdsWithHttpInfo($GetAssetGroupListingGroupsByIdsRequest, $contentType);
        return $response;
    }

    /**
     * Operation getAssetGroupListingGroupsByIdsWithHttpInfo
     *
     * @param  \Microsoft\MsAds\Rest\Model\CampaignManagementService\GetAssetGroupListingGroupsByIdsRequest $GetAssetGroupListingGroupsByIdsRequest (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getAssetGroupListingGroupsByIds'] to see the possible values for this operation
     *
     * @throws \Microsoft\MsAds\Rest\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \Microsoft\MsAds\Rest\Model\CampaignManagementService\GetAssetGroupListingGroupsByIdsResponse|\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault|\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault|\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault|\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault, HTTP status code, HTTP response headers (array of strings)
     */
    public function getAssetGroupListingGroupsByIdsWithHttpInfo($GetAssetGroupListingGroupsByIdsRequest, string $contentType = self::contentTypes['getAssetGroupListingGroupsByIds'][0])
    {
        $request = $this->getAssetGroupListingGroupsByIdsRequest($GetAssetGroupListingGroupsByIdsRequest, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                $response = $e->getResponse();
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            switch($statusCode) {
                case 200:
                    return $this->getResponseContent($request, $response, '\Microsoft\MsAds\Rest\Model\CampaignManagementService\GetAssetGroupListingGroupsByIdsResponse');
                case 400:
                    return $this->getResponseContent($request, $response, '\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault');
                case 500:
                    return $this->getResponseContent($request, $response, '\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault');
                case 401:
                    return $this->getResponseContent($request, $response, '\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault');
                case 403:
                    return $this->getResponseContent($request, $response, '\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault');
            }

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            $returnType = '\Microsoft\MsAds\Rest\Model\CampaignManagementService\GetAssetGroupListingGroupsByIdsResponse';
            return $this->getResponseContent($request, $response, $returnType);

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Microsoft\MsAds\Rest\Model\CampaignManagementService\GetAssetGroupListingGroupsByIdsResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 500:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 403:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getAssetGroupListingGroupsByIdsAsync
     *
     * @param  \Microsoft\MsAds\Rest\Model\CampaignManagementService\GetAssetGroupListingGroupsByIdsRequest $GetAssetGroupListingGroupsByIdsRequest (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getAssetGroupListingGroupsByIds'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getAssetGroupListingGroupsByIdsAsync($GetAssetGroupListingGroupsByIdsRequest, string $contentType = self::contentTypes['getAssetGroupListingGroupsByIds'][0])
    {
        return $this->getAssetGroupListingGroupsByIdsAsyncWithHttpInfo($GetAssetGroupListingGroupsByIdsRequest, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getAssetGroupListingGroupsByIdsAsyncWithHttpInfo
     *
     * @param  \Microsoft\MsAds\Rest\Model\CampaignManagementService\GetAssetGroupListingGroupsByIdsRequest $GetAssetGroupListingGroupsByIdsRequest (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getAssetGroupListingGroupsByIds'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getAssetGroupListingGroupsByIdsAsyncWithHttpInfo($GetAssetGroupListingGroupsByIdsRequest, string $contentType = self::contentTypes['getAssetGroupListingGroupsByIds'][0])
    {
        $returnType = '\Microsoft\MsAds\Rest\Model\CampaignManagementService\GetAssetGroupListingGroupsByIdsResponse';
        $request = $this->getAssetGroupListingGroupsByIdsRequest($GetAssetGroupListingGroupsByIdsRequest, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return $this->onFulfilledResponse($response, $returnType);
                },
                function ($exception) {
                    $this->onRejectedResponse($exception);
                }
            );
    }

    /**
     * Create request for operation 'getAssetGroupListingGroupsByIds'
     *
     * @param  \Microsoft\MsAds\Rest\Model\CampaignManagementService\GetAssetGroupListingGroupsByIdsRequest $GetAssetGroupListingGroupsByIdsRequest (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getAssetGroupListingGroupsByIds'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function getAssetGroupListingGroupsByIdsRequest($GetAssetGroupListingGroupsByIdsRequest, string $contentType = self::contentTypes['getAssetGroupListingGroupsByIds'][0])
    {

        // verify the required parameter 'GetAssetGroupListingGroupsByIdsRequest' is set
        if ($GetAssetGroupListingGroupsByIdsRequest === null || (is_array($GetAssetGroupListingGroupsByIdsRequest) && count($GetAssetGroupListingGroupsByIdsRequest) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $GetAssetGroupListingGroupsByIdsRequest when calling getAssetGroupListingGroupsByIds'
            );
        }


        $resourcePath = '/CampaignManagement/v13/AssetGroupListingGroups/QueryByIds';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $multipart = false;

        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        return $this->setupAndSendRequest(
            'POST',
            $resourcePath,
            $headers,
            $headerParams,
            $GetAssetGroupListingGroupsByIdsRequest,
            $formParams,
            $multipart,
            true,
            true,
            false,
            'getHostSettingsForgetAssetGroupListingGroupsByIds',
            null,
            [],
            $queryParams
        );
    }

    /**
     * Operation getAssetGroupsByCampaignId
     *
     * @param  \Microsoft\MsAds\Rest\Model\CampaignManagementService\GetAssetGroupsByCampaignIdRequest $GetAssetGroupsByCampaignIdRequest GetAssetGroupsByCampaignIdRequest (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getAssetGroupsByCampaignId'] to see the possible values for this operation
     *
     * @throws \Microsoft\MsAds\Rest\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \Microsoft\MsAds\Rest\Model\CampaignManagementService\GetAssetGroupsByCampaignIdResponse|\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault|\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault|\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault|\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault
     */
    public function getAssetGroupsByCampaignId($GetAssetGroupsByCampaignIdRequest, string $contentType = self::contentTypes['getAssetGroupsByCampaignId'][0])
    {
        list($response) = $this->getAssetGroupsByCampaignIdWithHttpInfo($GetAssetGroupsByCampaignIdRequest, $contentType);
        return $response;
    }

    /**
     * Operation getAssetGroupsByCampaignIdWithHttpInfo
     *
     * @param  \Microsoft\MsAds\Rest\Model\CampaignManagementService\GetAssetGroupsByCampaignIdRequest $GetAssetGroupsByCampaignIdRequest (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getAssetGroupsByCampaignId'] to see the possible values for this operation
     *
     * @throws \Microsoft\MsAds\Rest\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \Microsoft\MsAds\Rest\Model\CampaignManagementService\GetAssetGroupsByCampaignIdResponse|\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault|\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault|\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault|\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault, HTTP status code, HTTP response headers (array of strings)
     */
    public function getAssetGroupsByCampaignIdWithHttpInfo($GetAssetGroupsByCampaignIdRequest, string $contentType = self::contentTypes['getAssetGroupsByCampaignId'][0])
    {
        $request = $this->getAssetGroupsByCampaignIdRequest($GetAssetGroupsByCampaignIdRequest, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                $response = $e->getResponse();
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            switch($statusCode) {
                case 200:
                    return $this->getResponseContent($request, $response, '\Microsoft\MsAds\Rest\Model\CampaignManagementService\GetAssetGroupsByCampaignIdResponse');
                case 400:
                    return $this->getResponseContent($request, $response, '\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault');
                case 500:
                    return $this->getResponseContent($request, $response, '\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault');
                case 401:
                    return $this->getResponseContent($request, $response, '\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault');
                case 403:
                    return $this->getResponseContent($request, $response, '\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault');
            }

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            $returnType = '\Microsoft\MsAds\Rest\Model\CampaignManagementService\GetAssetGroupsByCampaignIdResponse';
            return $this->getResponseContent($request, $response, $returnType);

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Microsoft\MsAds\Rest\Model\CampaignManagementService\GetAssetGroupsByCampaignIdResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 500:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 403:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getAssetGroupsByCampaignIdAsync
     *
     * @param  \Microsoft\MsAds\Rest\Model\CampaignManagementService\GetAssetGroupsByCampaignIdRequest $GetAssetGroupsByCampaignIdRequest (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getAssetGroupsByCampaignId'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getAssetGroupsByCampaignIdAsync($GetAssetGroupsByCampaignIdRequest, string $contentType = self::contentTypes['getAssetGroupsByCampaignId'][0])
    {
        return $this->getAssetGroupsByCampaignIdAsyncWithHttpInfo($GetAssetGroupsByCampaignIdRequest, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getAssetGroupsByCampaignIdAsyncWithHttpInfo
     *
     * @param  \Microsoft\MsAds\Rest\Model\CampaignManagementService\GetAssetGroupsByCampaignIdRequest $GetAssetGroupsByCampaignIdRequest (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getAssetGroupsByCampaignId'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getAssetGroupsByCampaignIdAsyncWithHttpInfo($GetAssetGroupsByCampaignIdRequest, string $contentType = self::contentTypes['getAssetGroupsByCampaignId'][0])
    {
        $returnType = '\Microsoft\MsAds\Rest\Model\CampaignManagementService\GetAssetGroupsByCampaignIdResponse';
        $request = $this->getAssetGroupsByCampaignIdRequest($GetAssetGroupsByCampaignIdRequest, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return $this->onFulfilledResponse($response, $returnType);
                },
                function ($exception) {
                    $this->onRejectedResponse($exception);
                }
            );
    }

    /**
     * Create request for operation 'getAssetGroupsByCampaignId'
     *
     * @param  \Microsoft\MsAds\Rest\Model\CampaignManagementService\GetAssetGroupsByCampaignIdRequest $GetAssetGroupsByCampaignIdRequest (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getAssetGroupsByCampaignId'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function getAssetGroupsByCampaignIdRequest($GetAssetGroupsByCampaignIdRequest, string $contentType = self::contentTypes['getAssetGroupsByCampaignId'][0])
    {

        // verify the required parameter 'GetAssetGroupsByCampaignIdRequest' is set
        if ($GetAssetGroupsByCampaignIdRequest === null || (is_array($GetAssetGroupsByCampaignIdRequest) && count($GetAssetGroupsByCampaignIdRequest) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $GetAssetGroupsByCampaignIdRequest when calling getAssetGroupsByCampaignId'
            );
        }


        $resourcePath = '/CampaignManagement/v13/AssetGroups/QueryByCampaignId';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $multipart = false;

        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        return $this->setupAndSendRequest(
            'POST',
            $resourcePath,
            $headers,
            $headerParams,
            $GetAssetGroupsByCampaignIdRequest,
            $formParams,
            $multipart,
            true,
            true,
            false,
            'getHostSettingsForgetAssetGroupsByCampaignId',
            null,
            [],
            $queryParams
        );
    }

    /**
     * Operation getAssetGroupsByIds
     *
     * @param  \Microsoft\MsAds\Rest\Model\CampaignManagementService\GetAssetGroupsByIdsRequest $GetAssetGroupsByIdsRequest GetAssetGroupsByIdsRequest (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getAssetGroupsByIds'] to see the possible values for this operation
     *
     * @throws \Microsoft\MsAds\Rest\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \Microsoft\MsAds\Rest\Model\CampaignManagementService\GetAssetGroupsByIdsResponse|\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault|\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault|\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault|\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault
     */
    public function getAssetGroupsByIds($GetAssetGroupsByIdsRequest, string $contentType = self::contentTypes['getAssetGroupsByIds'][0])
    {
        list($response) = $this->getAssetGroupsByIdsWithHttpInfo($GetAssetGroupsByIdsRequest, $contentType);
        return $response;
    }

    /**
     * Operation getAssetGroupsByIdsWithHttpInfo
     *
     * @param  \Microsoft\MsAds\Rest\Model\CampaignManagementService\GetAssetGroupsByIdsRequest $GetAssetGroupsByIdsRequest (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getAssetGroupsByIds'] to see the possible values for this operation
     *
     * @throws \Microsoft\MsAds\Rest\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \Microsoft\MsAds\Rest\Model\CampaignManagementService\GetAssetGroupsByIdsResponse|\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault|\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault|\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault|\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault, HTTP status code, HTTP response headers (array of strings)
     */
    public function getAssetGroupsByIdsWithHttpInfo($GetAssetGroupsByIdsRequest, string $contentType = self::contentTypes['getAssetGroupsByIds'][0])
    {
        $request = $this->getAssetGroupsByIdsRequest($GetAssetGroupsByIdsRequest, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                $response = $e->getResponse();
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            switch($statusCode) {
                case 200:
                    return $this->getResponseContent($request, $response, '\Microsoft\MsAds\Rest\Model\CampaignManagementService\GetAssetGroupsByIdsResponse');
                case 400:
                    return $this->getResponseContent($request, $response, '\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault');
                case 500:
                    return $this->getResponseContent($request, $response, '\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault');
                case 401:
                    return $this->getResponseContent($request, $response, '\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault');
                case 403:
                    return $this->getResponseContent($request, $response, '\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault');
            }

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            $returnType = '\Microsoft\MsAds\Rest\Model\CampaignManagementService\GetAssetGroupsByIdsResponse';
            return $this->getResponseContent($request, $response, $returnType);

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Microsoft\MsAds\Rest\Model\CampaignManagementService\GetAssetGroupsByIdsResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 500:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 403:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getAssetGroupsByIdsAsync
     *
     * @param  \Microsoft\MsAds\Rest\Model\CampaignManagementService\GetAssetGroupsByIdsRequest $GetAssetGroupsByIdsRequest (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getAssetGroupsByIds'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getAssetGroupsByIdsAsync($GetAssetGroupsByIdsRequest, string $contentType = self::contentTypes['getAssetGroupsByIds'][0])
    {
        return $this->getAssetGroupsByIdsAsyncWithHttpInfo($GetAssetGroupsByIdsRequest, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getAssetGroupsByIdsAsyncWithHttpInfo
     *
     * @param  \Microsoft\MsAds\Rest\Model\CampaignManagementService\GetAssetGroupsByIdsRequest $GetAssetGroupsByIdsRequest (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getAssetGroupsByIds'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getAssetGroupsByIdsAsyncWithHttpInfo($GetAssetGroupsByIdsRequest, string $contentType = self::contentTypes['getAssetGroupsByIds'][0])
    {
        $returnType = '\Microsoft\MsAds\Rest\Model\CampaignManagementService\GetAssetGroupsByIdsResponse';
        $request = $this->getAssetGroupsByIdsRequest($GetAssetGroupsByIdsRequest, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return $this->onFulfilledResponse($response, $returnType);
                },
                function ($exception) {
                    $this->onRejectedResponse($exception);
                }
            );
    }

    /**
     * Create request for operation 'getAssetGroupsByIds'
     *
     * @param  \Microsoft\MsAds\Rest\Model\CampaignManagementService\GetAssetGroupsByIdsRequest $GetAssetGroupsByIdsRequest (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getAssetGroupsByIds'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function getAssetGroupsByIdsRequest($GetAssetGroupsByIdsRequest, string $contentType = self::contentTypes['getAssetGroupsByIds'][0])
    {

        // verify the required parameter 'GetAssetGroupsByIdsRequest' is set
        if ($GetAssetGroupsByIdsRequest === null || (is_array($GetAssetGroupsByIdsRequest) && count($GetAssetGroupsByIdsRequest) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $GetAssetGroupsByIdsRequest when calling getAssetGroupsByIds'
            );
        }


        $resourcePath = '/CampaignManagement/v13/AssetGroups/QueryByIds';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $multipart = false;

        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        return $this->setupAndSendRequest(
            'POST',
            $resourcePath,
            $headers,
            $headerParams,
            $GetAssetGroupsByIdsRequest,
            $formParams,
            $multipart,
            true,
            true,
            false,
            'getHostSettingsForgetAssetGroupsByIds',
            null,
            [],
            $queryParams
        );
    }

    /**
     * Operation getAssetGroupsEditorialReasons
     *
     * @param  \Microsoft\MsAds\Rest\Model\CampaignManagementService\GetAssetGroupsEditorialReasonsRequest $GetAssetGroupsEditorialReasonsRequest GetAssetGroupsEditorialReasonsRequest (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getAssetGroupsEditorialReasons'] to see the possible values for this operation
     *
     * @throws \Microsoft\MsAds\Rest\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \Microsoft\MsAds\Rest\Model\CampaignManagementService\GetAssetGroupsEditorialReasonsResponse|\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault|\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault|\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault|\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault
     */
    public function getAssetGroupsEditorialReasons($GetAssetGroupsEditorialReasonsRequest, string $contentType = self::contentTypes['getAssetGroupsEditorialReasons'][0])
    {
        list($response) = $this->getAssetGroupsEditorialReasonsWithHttpInfo($GetAssetGroupsEditorialReasonsRequest, $contentType);
        return $response;
    }

    /**
     * Operation getAssetGroupsEditorialReasonsWithHttpInfo
     *
     * @param  \Microsoft\MsAds\Rest\Model\CampaignManagementService\GetAssetGroupsEditorialReasonsRequest $GetAssetGroupsEditorialReasonsRequest (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getAssetGroupsEditorialReasons'] to see the possible values for this operation
     *
     * @throws \Microsoft\MsAds\Rest\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \Microsoft\MsAds\Rest\Model\CampaignManagementService\GetAssetGroupsEditorialReasonsResponse|\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault|\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault|\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault|\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault, HTTP status code, HTTP response headers (array of strings)
     */
    public function getAssetGroupsEditorialReasonsWithHttpInfo($GetAssetGroupsEditorialReasonsRequest, string $contentType = self::contentTypes['getAssetGroupsEditorialReasons'][0])
    {
        $request = $this->getAssetGroupsEditorialReasonsRequest($GetAssetGroupsEditorialReasonsRequest, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                $response = $e->getResponse();
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            switch($statusCode) {
                case 200:
                    return $this->getResponseContent($request, $response, '\Microsoft\MsAds\Rest\Model\CampaignManagementService\GetAssetGroupsEditorialReasonsResponse');
                case 400:
                    return $this->getResponseContent($request, $response, '\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault');
                case 500:
                    return $this->getResponseContent($request, $response, '\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault');
                case 401:
                    return $this->getResponseContent($request, $response, '\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault');
                case 403:
                    return $this->getResponseContent($request, $response, '\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault');
            }

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            $returnType = '\Microsoft\MsAds\Rest\Model\CampaignManagementService\GetAssetGroupsEditorialReasonsResponse';
            return $this->getResponseContent($request, $response, $returnType);

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Microsoft\MsAds\Rest\Model\CampaignManagementService\GetAssetGroupsEditorialReasonsResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 500:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 403:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getAssetGroupsEditorialReasonsAsync
     *
     * @param  \Microsoft\MsAds\Rest\Model\CampaignManagementService\GetAssetGroupsEditorialReasonsRequest $GetAssetGroupsEditorialReasonsRequest (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getAssetGroupsEditorialReasons'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getAssetGroupsEditorialReasonsAsync($GetAssetGroupsEditorialReasonsRequest, string $contentType = self::contentTypes['getAssetGroupsEditorialReasons'][0])
    {
        return $this->getAssetGroupsEditorialReasonsAsyncWithHttpInfo($GetAssetGroupsEditorialReasonsRequest, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getAssetGroupsEditorialReasonsAsyncWithHttpInfo
     *
     * @param  \Microsoft\MsAds\Rest\Model\CampaignManagementService\GetAssetGroupsEditorialReasonsRequest $GetAssetGroupsEditorialReasonsRequest (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getAssetGroupsEditorialReasons'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getAssetGroupsEditorialReasonsAsyncWithHttpInfo($GetAssetGroupsEditorialReasonsRequest, string $contentType = self::contentTypes['getAssetGroupsEditorialReasons'][0])
    {
        $returnType = '\Microsoft\MsAds\Rest\Model\CampaignManagementService\GetAssetGroupsEditorialReasonsResponse';
        $request = $this->getAssetGroupsEditorialReasonsRequest($GetAssetGroupsEditorialReasonsRequest, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return $this->onFulfilledResponse($response, $returnType);
                },
                function ($exception) {
                    $this->onRejectedResponse($exception);
                }
            );
    }

    /**
     * Create request for operation 'getAssetGroupsEditorialReasons'
     *
     * @param  \Microsoft\MsAds\Rest\Model\CampaignManagementService\GetAssetGroupsEditorialReasonsRequest $GetAssetGroupsEditorialReasonsRequest (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getAssetGroupsEditorialReasons'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function getAssetGroupsEditorialReasonsRequest($GetAssetGroupsEditorialReasonsRequest, string $contentType = self::contentTypes['getAssetGroupsEditorialReasons'][0])
    {

        // verify the required parameter 'GetAssetGroupsEditorialReasonsRequest' is set
        if ($GetAssetGroupsEditorialReasonsRequest === null || (is_array($GetAssetGroupsEditorialReasonsRequest) && count($GetAssetGroupsEditorialReasonsRequest) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $GetAssetGroupsEditorialReasonsRequest when calling getAssetGroupsEditorialReasons'
            );
        }


        $resourcePath = '/CampaignManagement/v13/AssetGroupsEditorialReasons/Query';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $multipart = false;

        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        return $this->setupAndSendRequest(
            'POST',
            $resourcePath,
            $headers,
            $headerParams,
            $GetAssetGroupsEditorialReasonsRequest,
            $formParams,
            $multipart,
            true,
            true,
            false,
            'getHostSettingsForgetAssetGroupsEditorialReasons',
            null,
            [],
            $queryParams
        );
    }

    /**
     * Operation getAudienceGroupAssetGroupAssociationsByAssetGroupIds
     *
     * @param  \Microsoft\MsAds\Rest\Model\CampaignManagementService\GetAudienceGroupAssetGroupAssociationsByAssetGroupIdsRequest $GetAudienceGroupAssetGroupAssociationsByAssetGroupIdsRequest GetAudienceGroupAssetGroupAssociationsByAssetGroupIdsRequest (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getAudienceGroupAssetGroupAssociationsByAssetGroupIds'] to see the possible values for this operation
     *
     * @throws \Microsoft\MsAds\Rest\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \Microsoft\MsAds\Rest\Model\CampaignManagementService\GetAudienceGroupAssetGroupAssociationsByAssetGroupIdsResponse|\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault|\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault|\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault|\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault
     */
    public function getAudienceGroupAssetGroupAssociationsByAssetGroupIds($GetAudienceGroupAssetGroupAssociationsByAssetGroupIdsRequest, string $contentType = self::contentTypes['getAudienceGroupAssetGroupAssociationsByAssetGroupIds'][0])
    {
        list($response) = $this->getAudienceGroupAssetGroupAssociationsByAssetGroupIdsWithHttpInfo($GetAudienceGroupAssetGroupAssociationsByAssetGroupIdsRequest, $contentType);
        return $response;
    }

    /**
     * Operation getAudienceGroupAssetGroupAssociationsByAssetGroupIdsWithHttpInfo
     *
     * @param  \Microsoft\MsAds\Rest\Model\CampaignManagementService\GetAudienceGroupAssetGroupAssociationsByAssetGroupIdsRequest $GetAudienceGroupAssetGroupAssociationsByAssetGroupIdsRequest (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getAudienceGroupAssetGroupAssociationsByAssetGroupIds'] to see the possible values for this operation
     *
     * @throws \Microsoft\MsAds\Rest\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \Microsoft\MsAds\Rest\Model\CampaignManagementService\GetAudienceGroupAssetGroupAssociationsByAssetGroupIdsResponse|\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault|\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault|\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault|\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault, HTTP status code, HTTP response headers (array of strings)
     */
    public function getAudienceGroupAssetGroupAssociationsByAssetGroupIdsWithHttpInfo($GetAudienceGroupAssetGroupAssociationsByAssetGroupIdsRequest, string $contentType = self::contentTypes['getAudienceGroupAssetGroupAssociationsByAssetGroupIds'][0])
    {
        $request = $this->getAudienceGroupAssetGroupAssociationsByAssetGroupIdsRequest($GetAudienceGroupAssetGroupAssociationsByAssetGroupIdsRequest, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                $response = $e->getResponse();
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            switch($statusCode) {
                case 200:
                    return $this->getResponseContent($request, $response, '\Microsoft\MsAds\Rest\Model\CampaignManagementService\GetAudienceGroupAssetGroupAssociationsByAssetGroupIdsResponse');
                case 400:
                    return $this->getResponseContent($request, $response, '\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault');
                case 500:
                    return $this->getResponseContent($request, $response, '\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault');
                case 401:
                    return $this->getResponseContent($request, $response, '\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault');
                case 403:
                    return $this->getResponseContent($request, $response, '\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault');
            }

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            $returnType = '\Microsoft\MsAds\Rest\Model\CampaignManagementService\GetAudienceGroupAssetGroupAssociationsByAssetGroupIdsResponse';
            return $this->getResponseContent($request, $response, $returnType);

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Microsoft\MsAds\Rest\Model\CampaignManagementService\GetAudienceGroupAssetGroupAssociationsByAssetGroupIdsResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 500:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 403:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getAudienceGroupAssetGroupAssociationsByAssetGroupIdsAsync
     *
     * @param  \Microsoft\MsAds\Rest\Model\CampaignManagementService\GetAudienceGroupAssetGroupAssociationsByAssetGroupIdsRequest $GetAudienceGroupAssetGroupAssociationsByAssetGroupIdsRequest (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getAudienceGroupAssetGroupAssociationsByAssetGroupIds'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getAudienceGroupAssetGroupAssociationsByAssetGroupIdsAsync($GetAudienceGroupAssetGroupAssociationsByAssetGroupIdsRequest, string $contentType = self::contentTypes['getAudienceGroupAssetGroupAssociationsByAssetGroupIds'][0])
    {
        return $this->getAudienceGroupAssetGroupAssociationsByAssetGroupIdsAsyncWithHttpInfo($GetAudienceGroupAssetGroupAssociationsByAssetGroupIdsRequest, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getAudienceGroupAssetGroupAssociationsByAssetGroupIdsAsyncWithHttpInfo
     *
     * @param  \Microsoft\MsAds\Rest\Model\CampaignManagementService\GetAudienceGroupAssetGroupAssociationsByAssetGroupIdsRequest $GetAudienceGroupAssetGroupAssociationsByAssetGroupIdsRequest (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getAudienceGroupAssetGroupAssociationsByAssetGroupIds'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getAudienceGroupAssetGroupAssociationsByAssetGroupIdsAsyncWithHttpInfo($GetAudienceGroupAssetGroupAssociationsByAssetGroupIdsRequest, string $contentType = self::contentTypes['getAudienceGroupAssetGroupAssociationsByAssetGroupIds'][0])
    {
        $returnType = '\Microsoft\MsAds\Rest\Model\CampaignManagementService\GetAudienceGroupAssetGroupAssociationsByAssetGroupIdsResponse';
        $request = $this->getAudienceGroupAssetGroupAssociationsByAssetGroupIdsRequest($GetAudienceGroupAssetGroupAssociationsByAssetGroupIdsRequest, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return $this->onFulfilledResponse($response, $returnType);
                },
                function ($exception) {
                    $this->onRejectedResponse($exception);
                }
            );
    }

    /**
     * Create request for operation 'getAudienceGroupAssetGroupAssociationsByAssetGroupIds'
     *
     * @param  \Microsoft\MsAds\Rest\Model\CampaignManagementService\GetAudienceGroupAssetGroupAssociationsByAssetGroupIdsRequest $GetAudienceGroupAssetGroupAssociationsByAssetGroupIdsRequest (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getAudienceGroupAssetGroupAssociationsByAssetGroupIds'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function getAudienceGroupAssetGroupAssociationsByAssetGroupIdsRequest($GetAudienceGroupAssetGroupAssociationsByAssetGroupIdsRequest, string $contentType = self::contentTypes['getAudienceGroupAssetGroupAssociationsByAssetGroupIds'][0])
    {

        // verify the required parameter 'GetAudienceGroupAssetGroupAssociationsByAssetGroupIdsRequest' is set
        if ($GetAudienceGroupAssetGroupAssociationsByAssetGroupIdsRequest === null || (is_array($GetAudienceGroupAssetGroupAssociationsByAssetGroupIdsRequest) && count($GetAudienceGroupAssetGroupAssociationsByAssetGroupIdsRequest) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $GetAudienceGroupAssetGroupAssociationsByAssetGroupIdsRequest when calling getAudienceGroupAssetGroupAssociationsByAssetGroupIds'
            );
        }


        $resourcePath = '/CampaignManagement/v13/AudienceGroupAssetGroupAssociations/QueryByAssetGroupIds';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $multipart = false;

        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        return $this->setupAndSendRequest(
            'POST',
            $resourcePath,
            $headers,
            $headerParams,
            $GetAudienceGroupAssetGroupAssociationsByAssetGroupIdsRequest,
            $formParams,
            $multipart,
            true,
            true,
            false,
            'getHostSettingsForgetAudienceGroupAssetGroupAssociationsByAssetGroupIds',
            null,
            [],
            $queryParams
        );
    }

    /**
     * Operation getAudienceGroupAssetGroupAssociationsByAudienceGroupIds
     *
     * @param  \Microsoft\MsAds\Rest\Model\CampaignManagementService\GetAudienceGroupAssetGroupAssociationsByAudienceGroupIdsRequest $GetAudienceGroupAssetGroupAssociationsByAudienceGroupIdsRequest GetAudienceGroupAssetGroupAssociationsByAudienceGroupIdsRequest (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getAudienceGroupAssetGroupAssociationsByAudienceGroupIds'] to see the possible values for this operation
     *
     * @throws \Microsoft\MsAds\Rest\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \Microsoft\MsAds\Rest\Model\CampaignManagementService\GetAudienceGroupAssetGroupAssociationsByAudienceGroupIdsResponse|\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault|\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault|\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault|\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault
     */
    public function getAudienceGroupAssetGroupAssociationsByAudienceGroupIds($GetAudienceGroupAssetGroupAssociationsByAudienceGroupIdsRequest, string $contentType = self::contentTypes['getAudienceGroupAssetGroupAssociationsByAudienceGroupIds'][0])
    {
        list($response) = $this->getAudienceGroupAssetGroupAssociationsByAudienceGroupIdsWithHttpInfo($GetAudienceGroupAssetGroupAssociationsByAudienceGroupIdsRequest, $contentType);
        return $response;
    }

    /**
     * Operation getAudienceGroupAssetGroupAssociationsByAudienceGroupIdsWithHttpInfo
     *
     * @param  \Microsoft\MsAds\Rest\Model\CampaignManagementService\GetAudienceGroupAssetGroupAssociationsByAudienceGroupIdsRequest $GetAudienceGroupAssetGroupAssociationsByAudienceGroupIdsRequest (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getAudienceGroupAssetGroupAssociationsByAudienceGroupIds'] to see the possible values for this operation
     *
     * @throws \Microsoft\MsAds\Rest\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \Microsoft\MsAds\Rest\Model\CampaignManagementService\GetAudienceGroupAssetGroupAssociationsByAudienceGroupIdsResponse|\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault|\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault|\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault|\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault, HTTP status code, HTTP response headers (array of strings)
     */
    public function getAudienceGroupAssetGroupAssociationsByAudienceGroupIdsWithHttpInfo($GetAudienceGroupAssetGroupAssociationsByAudienceGroupIdsRequest, string $contentType = self::contentTypes['getAudienceGroupAssetGroupAssociationsByAudienceGroupIds'][0])
    {
        $request = $this->getAudienceGroupAssetGroupAssociationsByAudienceGroupIdsRequest($GetAudienceGroupAssetGroupAssociationsByAudienceGroupIdsRequest, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                $response = $e->getResponse();
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            switch($statusCode) {
                case 200:
                    return $this->getResponseContent($request, $response, '\Microsoft\MsAds\Rest\Model\CampaignManagementService\GetAudienceGroupAssetGroupAssociationsByAudienceGroupIdsResponse');
                case 400:
                    return $this->getResponseContent($request, $response, '\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault');
                case 500:
                    return $this->getResponseContent($request, $response, '\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault');
                case 401:
                    return $this->getResponseContent($request, $response, '\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault');
                case 403:
                    return $this->getResponseContent($request, $response, '\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault');
            }

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            $returnType = '\Microsoft\MsAds\Rest\Model\CampaignManagementService\GetAudienceGroupAssetGroupAssociationsByAudienceGroupIdsResponse';
            return $this->getResponseContent($request, $response, $returnType);

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Microsoft\MsAds\Rest\Model\CampaignManagementService\GetAudienceGroupAssetGroupAssociationsByAudienceGroupIdsResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 500:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 403:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getAudienceGroupAssetGroupAssociationsByAudienceGroupIdsAsync
     *
     * @param  \Microsoft\MsAds\Rest\Model\CampaignManagementService\GetAudienceGroupAssetGroupAssociationsByAudienceGroupIdsRequest $GetAudienceGroupAssetGroupAssociationsByAudienceGroupIdsRequest (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getAudienceGroupAssetGroupAssociationsByAudienceGroupIds'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getAudienceGroupAssetGroupAssociationsByAudienceGroupIdsAsync($GetAudienceGroupAssetGroupAssociationsByAudienceGroupIdsRequest, string $contentType = self::contentTypes['getAudienceGroupAssetGroupAssociationsByAudienceGroupIds'][0])
    {
        return $this->getAudienceGroupAssetGroupAssociationsByAudienceGroupIdsAsyncWithHttpInfo($GetAudienceGroupAssetGroupAssociationsByAudienceGroupIdsRequest, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getAudienceGroupAssetGroupAssociationsByAudienceGroupIdsAsyncWithHttpInfo
     *
     * @param  \Microsoft\MsAds\Rest\Model\CampaignManagementService\GetAudienceGroupAssetGroupAssociationsByAudienceGroupIdsRequest $GetAudienceGroupAssetGroupAssociationsByAudienceGroupIdsRequest (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getAudienceGroupAssetGroupAssociationsByAudienceGroupIds'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getAudienceGroupAssetGroupAssociationsByAudienceGroupIdsAsyncWithHttpInfo($GetAudienceGroupAssetGroupAssociationsByAudienceGroupIdsRequest, string $contentType = self::contentTypes['getAudienceGroupAssetGroupAssociationsByAudienceGroupIds'][0])
    {
        $returnType = '\Microsoft\MsAds\Rest\Model\CampaignManagementService\GetAudienceGroupAssetGroupAssociationsByAudienceGroupIdsResponse';
        $request = $this->getAudienceGroupAssetGroupAssociationsByAudienceGroupIdsRequest($GetAudienceGroupAssetGroupAssociationsByAudienceGroupIdsRequest, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return $this->onFulfilledResponse($response, $returnType);
                },
                function ($exception) {
                    $this->onRejectedResponse($exception);
                }
            );
    }

    /**
     * Create request for operation 'getAudienceGroupAssetGroupAssociationsByAudienceGroupIds'
     *
     * @param  \Microsoft\MsAds\Rest\Model\CampaignManagementService\GetAudienceGroupAssetGroupAssociationsByAudienceGroupIdsRequest $GetAudienceGroupAssetGroupAssociationsByAudienceGroupIdsRequest (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getAudienceGroupAssetGroupAssociationsByAudienceGroupIds'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function getAudienceGroupAssetGroupAssociationsByAudienceGroupIdsRequest($GetAudienceGroupAssetGroupAssociationsByAudienceGroupIdsRequest, string $contentType = self::contentTypes['getAudienceGroupAssetGroupAssociationsByAudienceGroupIds'][0])
    {

        // verify the required parameter 'GetAudienceGroupAssetGroupAssociationsByAudienceGroupIdsRequest' is set
        if ($GetAudienceGroupAssetGroupAssociationsByAudienceGroupIdsRequest === null || (is_array($GetAudienceGroupAssetGroupAssociationsByAudienceGroupIdsRequest) && count($GetAudienceGroupAssetGroupAssociationsByAudienceGroupIdsRequest) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $GetAudienceGroupAssetGroupAssociationsByAudienceGroupIdsRequest when calling getAudienceGroupAssetGroupAssociationsByAudienceGroupIds'
            );
        }


        $resourcePath = '/CampaignManagement/v13/AudienceGroupAssetGroupAssociations/QueryByAudienceGroupIds';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $multipart = false;

        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        return $this->setupAndSendRequest(
            'POST',
            $resourcePath,
            $headers,
            $headerParams,
            $GetAudienceGroupAssetGroupAssociationsByAudienceGroupIdsRequest,
            $formParams,
            $multipart,
            true,
            true,
            false,
            'getHostSettingsForgetAudienceGroupAssetGroupAssociationsByAudienceGroupIds',
            null,
            [],
            $queryParams
        );
    }

    /**
     * Operation getAudienceGroupsByIds
     *
     * @param  \Microsoft\MsAds\Rest\Model\CampaignManagementService\GetAudienceGroupsByIdsRequest $GetAudienceGroupsByIdsRequest GetAudienceGroupsByIdsRequest (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getAudienceGroupsByIds'] to see the possible values for this operation
     *
     * @throws \Microsoft\MsAds\Rest\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \Microsoft\MsAds\Rest\Model\CampaignManagementService\GetAudienceGroupsByIdsResponse|\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault|\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault|\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault|\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault
     */
    public function getAudienceGroupsByIds($GetAudienceGroupsByIdsRequest, string $contentType = self::contentTypes['getAudienceGroupsByIds'][0])
    {
        list($response) = $this->getAudienceGroupsByIdsWithHttpInfo($GetAudienceGroupsByIdsRequest, $contentType);
        return $response;
    }

    /**
     * Operation getAudienceGroupsByIdsWithHttpInfo
     *
     * @param  \Microsoft\MsAds\Rest\Model\CampaignManagementService\GetAudienceGroupsByIdsRequest $GetAudienceGroupsByIdsRequest (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getAudienceGroupsByIds'] to see the possible values for this operation
     *
     * @throws \Microsoft\MsAds\Rest\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \Microsoft\MsAds\Rest\Model\CampaignManagementService\GetAudienceGroupsByIdsResponse|\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault|\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault|\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault|\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault, HTTP status code, HTTP response headers (array of strings)
     */
    public function getAudienceGroupsByIdsWithHttpInfo($GetAudienceGroupsByIdsRequest, string $contentType = self::contentTypes['getAudienceGroupsByIds'][0])
    {
        $request = $this->getAudienceGroupsByIdsRequest($GetAudienceGroupsByIdsRequest, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                $response = $e->getResponse();
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            switch($statusCode) {
                case 200:
                    return $this->getResponseContent($request, $response, '\Microsoft\MsAds\Rest\Model\CampaignManagementService\GetAudienceGroupsByIdsResponse');
                case 400:
                    return $this->getResponseContent($request, $response, '\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault');
                case 500:
                    return $this->getResponseContent($request, $response, '\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault');
                case 401:
                    return $this->getResponseContent($request, $response, '\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault');
                case 403:
                    return $this->getResponseContent($request, $response, '\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault');
            }

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            $returnType = '\Microsoft\MsAds\Rest\Model\CampaignManagementService\GetAudienceGroupsByIdsResponse';
            return $this->getResponseContent($request, $response, $returnType);

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Microsoft\MsAds\Rest\Model\CampaignManagementService\GetAudienceGroupsByIdsResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 500:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 403:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getAudienceGroupsByIdsAsync
     *
     * @param  \Microsoft\MsAds\Rest\Model\CampaignManagementService\GetAudienceGroupsByIdsRequest $GetAudienceGroupsByIdsRequest (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getAudienceGroupsByIds'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getAudienceGroupsByIdsAsync($GetAudienceGroupsByIdsRequest, string $contentType = self::contentTypes['getAudienceGroupsByIds'][0])
    {
        return $this->getAudienceGroupsByIdsAsyncWithHttpInfo($GetAudienceGroupsByIdsRequest, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getAudienceGroupsByIdsAsyncWithHttpInfo
     *
     * @param  \Microsoft\MsAds\Rest\Model\CampaignManagementService\GetAudienceGroupsByIdsRequest $GetAudienceGroupsByIdsRequest (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getAudienceGroupsByIds'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getAudienceGroupsByIdsAsyncWithHttpInfo($GetAudienceGroupsByIdsRequest, string $contentType = self::contentTypes['getAudienceGroupsByIds'][0])
    {
        $returnType = '\Microsoft\MsAds\Rest\Model\CampaignManagementService\GetAudienceGroupsByIdsResponse';
        $request = $this->getAudienceGroupsByIdsRequest($GetAudienceGroupsByIdsRequest, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return $this->onFulfilledResponse($response, $returnType);
                },
                function ($exception) {
                    $this->onRejectedResponse($exception);
                }
            );
    }

    /**
     * Create request for operation 'getAudienceGroupsByIds'
     *
     * @param  \Microsoft\MsAds\Rest\Model\CampaignManagementService\GetAudienceGroupsByIdsRequest $GetAudienceGroupsByIdsRequest (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getAudienceGroupsByIds'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function getAudienceGroupsByIdsRequest($GetAudienceGroupsByIdsRequest, string $contentType = self::contentTypes['getAudienceGroupsByIds'][0])
    {

        // verify the required parameter 'GetAudienceGroupsByIdsRequest' is set
        if ($GetAudienceGroupsByIdsRequest === null || (is_array($GetAudienceGroupsByIdsRequest) && count($GetAudienceGroupsByIdsRequest) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $GetAudienceGroupsByIdsRequest when calling getAudienceGroupsByIds'
            );
        }


        $resourcePath = '/CampaignManagement/v13/AudienceGroups/QueryByIds';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $multipart = false;

        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        return $this->setupAndSendRequest(
            'POST',
            $resourcePath,
            $headers,
            $headerParams,
            $GetAudienceGroupsByIdsRequest,
            $formParams,
            $multipart,
            true,
            true,
            false,
            'getHostSettingsForgetAudienceGroupsByIds',
            null,
            [],
            $queryParams
        );
    }

    /**
     * Operation getAudiencesByIds
     *
     * @param  \Microsoft\MsAds\Rest\Model\CampaignManagementService\GetAudiencesByIdsRequest $GetAudiencesByIdsRequest GetAudiencesByIdsRequest (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getAudiencesByIds'] to see the possible values for this operation
     *
     * @throws \Microsoft\MsAds\Rest\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \Microsoft\MsAds\Rest\Model\CampaignManagementService\GetAudiencesByIdsResponse|\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault|\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault|\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault|\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault
     */
    public function getAudiencesByIds($GetAudiencesByIdsRequest, string $contentType = self::contentTypes['getAudiencesByIds'][0])
    {
        list($response) = $this->getAudiencesByIdsWithHttpInfo($GetAudiencesByIdsRequest, $contentType);
        return $response;
    }

    /**
     * Operation getAudiencesByIdsWithHttpInfo
     *
     * @param  \Microsoft\MsAds\Rest\Model\CampaignManagementService\GetAudiencesByIdsRequest $GetAudiencesByIdsRequest (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getAudiencesByIds'] to see the possible values for this operation
     *
     * @throws \Microsoft\MsAds\Rest\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \Microsoft\MsAds\Rest\Model\CampaignManagementService\GetAudiencesByIdsResponse|\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault|\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault|\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault|\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault, HTTP status code, HTTP response headers (array of strings)
     */
    public function getAudiencesByIdsWithHttpInfo($GetAudiencesByIdsRequest, string $contentType = self::contentTypes['getAudiencesByIds'][0])
    {
        $request = $this->getAudiencesByIdsRequest($GetAudiencesByIdsRequest, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                $response = $e->getResponse();
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            switch($statusCode) {
                case 200:
                    return $this->getResponseContent($request, $response, '\Microsoft\MsAds\Rest\Model\CampaignManagementService\GetAudiencesByIdsResponse');
                case 400:
                    return $this->getResponseContent($request, $response, '\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault');
                case 500:
                    return $this->getResponseContent($request, $response, '\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault');
                case 401:
                    return $this->getResponseContent($request, $response, '\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault');
                case 403:
                    return $this->getResponseContent($request, $response, '\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault');
            }

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            $returnType = '\Microsoft\MsAds\Rest\Model\CampaignManagementService\GetAudiencesByIdsResponse';
            return $this->getResponseContent($request, $response, $returnType);

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Microsoft\MsAds\Rest\Model\CampaignManagementService\GetAudiencesByIdsResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 500:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 403:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getAudiencesByIdsAsync
     *
     * @param  \Microsoft\MsAds\Rest\Model\CampaignManagementService\GetAudiencesByIdsRequest $GetAudiencesByIdsRequest (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getAudiencesByIds'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getAudiencesByIdsAsync($GetAudiencesByIdsRequest, string $contentType = self::contentTypes['getAudiencesByIds'][0])
    {
        return $this->getAudiencesByIdsAsyncWithHttpInfo($GetAudiencesByIdsRequest, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getAudiencesByIdsAsyncWithHttpInfo
     *
     * @param  \Microsoft\MsAds\Rest\Model\CampaignManagementService\GetAudiencesByIdsRequest $GetAudiencesByIdsRequest (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getAudiencesByIds'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getAudiencesByIdsAsyncWithHttpInfo($GetAudiencesByIdsRequest, string $contentType = self::contentTypes['getAudiencesByIds'][0])
    {
        $returnType = '\Microsoft\MsAds\Rest\Model\CampaignManagementService\GetAudiencesByIdsResponse';
        $request = $this->getAudiencesByIdsRequest($GetAudiencesByIdsRequest, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return $this->onFulfilledResponse($response, $returnType);
                },
                function ($exception) {
                    $this->onRejectedResponse($exception);
                }
            );
    }

    /**
     * Create request for operation 'getAudiencesByIds'
     *
     * @param  \Microsoft\MsAds\Rest\Model\CampaignManagementService\GetAudiencesByIdsRequest $GetAudiencesByIdsRequest (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getAudiencesByIds'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function getAudiencesByIdsRequest($GetAudiencesByIdsRequest, string $contentType = self::contentTypes['getAudiencesByIds'][0])
    {

        // verify the required parameter 'GetAudiencesByIdsRequest' is set
        if ($GetAudiencesByIdsRequest === null || (is_array($GetAudiencesByIdsRequest) && count($GetAudiencesByIdsRequest) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $GetAudiencesByIdsRequest when calling getAudiencesByIds'
            );
        }


        $resourcePath = '/CampaignManagement/v13/Audiences/QueryByIds';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $multipart = false;

        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        return $this->setupAndSendRequest(
            'POST',
            $resourcePath,
            $headers,
            $headerParams,
            $GetAudiencesByIdsRequest,
            $formParams,
            $multipart,
            true,
            true,
            false,
            'getHostSettingsForgetAudiencesByIds',
            null,
            [],
            $queryParams
        );
    }

    /**
     * Operation getBMCStoresByCustomerId
     *
     * @param  \Microsoft\MsAds\Rest\Model\CampaignManagementService\GetBMCStoresByCustomerIdRequest $GetBMCStoresByCustomerIdRequest GetBMCStoresByCustomerIdRequest (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getBMCStoresByCustomerId'] to see the possible values for this operation
     *
     * @throws \Microsoft\MsAds\Rest\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \Microsoft\MsAds\Rest\Model\CampaignManagementService\GetBMCStoresByCustomerIdResponse|\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault|\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault|\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault|\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault
     */
    public function getBMCStoresByCustomerId($GetBMCStoresByCustomerIdRequest, string $contentType = self::contentTypes['getBMCStoresByCustomerId'][0])
    {
        list($response) = $this->getBMCStoresByCustomerIdWithHttpInfo($GetBMCStoresByCustomerIdRequest, $contentType);
        return $response;
    }

    /**
     * Operation getBMCStoresByCustomerIdWithHttpInfo
     *
     * @param  \Microsoft\MsAds\Rest\Model\CampaignManagementService\GetBMCStoresByCustomerIdRequest $GetBMCStoresByCustomerIdRequest (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getBMCStoresByCustomerId'] to see the possible values for this operation
     *
     * @throws \Microsoft\MsAds\Rest\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \Microsoft\MsAds\Rest\Model\CampaignManagementService\GetBMCStoresByCustomerIdResponse|\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault|\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault|\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault|\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault, HTTP status code, HTTP response headers (array of strings)
     */
    public function getBMCStoresByCustomerIdWithHttpInfo($GetBMCStoresByCustomerIdRequest, string $contentType = self::contentTypes['getBMCStoresByCustomerId'][0])
    {
        $request = $this->getBMCStoresByCustomerIdRequest($GetBMCStoresByCustomerIdRequest, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                $response = $e->getResponse();
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            switch($statusCode) {
                case 200:
                    return $this->getResponseContent($request, $response, '\Microsoft\MsAds\Rest\Model\CampaignManagementService\GetBMCStoresByCustomerIdResponse');
                case 400:
                    return $this->getResponseContent($request, $response, '\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault');
                case 500:
                    return $this->getResponseContent($request, $response, '\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault');
                case 401:
                    return $this->getResponseContent($request, $response, '\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault');
                case 403:
                    return $this->getResponseContent($request, $response, '\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault');
            }

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            $returnType = '\Microsoft\MsAds\Rest\Model\CampaignManagementService\GetBMCStoresByCustomerIdResponse';
            return $this->getResponseContent($request, $response, $returnType);

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Microsoft\MsAds\Rest\Model\CampaignManagementService\GetBMCStoresByCustomerIdResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 500:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 403:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getBMCStoresByCustomerIdAsync
     *
     * @param  \Microsoft\MsAds\Rest\Model\CampaignManagementService\GetBMCStoresByCustomerIdRequest $GetBMCStoresByCustomerIdRequest (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getBMCStoresByCustomerId'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getBMCStoresByCustomerIdAsync($GetBMCStoresByCustomerIdRequest, string $contentType = self::contentTypes['getBMCStoresByCustomerId'][0])
    {
        return $this->getBMCStoresByCustomerIdAsyncWithHttpInfo($GetBMCStoresByCustomerIdRequest, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getBMCStoresByCustomerIdAsyncWithHttpInfo
     *
     * @param  \Microsoft\MsAds\Rest\Model\CampaignManagementService\GetBMCStoresByCustomerIdRequest $GetBMCStoresByCustomerIdRequest (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getBMCStoresByCustomerId'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getBMCStoresByCustomerIdAsyncWithHttpInfo($GetBMCStoresByCustomerIdRequest, string $contentType = self::contentTypes['getBMCStoresByCustomerId'][0])
    {
        $returnType = '\Microsoft\MsAds\Rest\Model\CampaignManagementService\GetBMCStoresByCustomerIdResponse';
        $request = $this->getBMCStoresByCustomerIdRequest($GetBMCStoresByCustomerIdRequest, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return $this->onFulfilledResponse($response, $returnType);
                },
                function ($exception) {
                    $this->onRejectedResponse($exception);
                }
            );
    }

    /**
     * Create request for operation 'getBMCStoresByCustomerId'
     *
     * @param  \Microsoft\MsAds\Rest\Model\CampaignManagementService\GetBMCStoresByCustomerIdRequest $GetBMCStoresByCustomerIdRequest (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getBMCStoresByCustomerId'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function getBMCStoresByCustomerIdRequest($GetBMCStoresByCustomerIdRequest, string $contentType = self::contentTypes['getBMCStoresByCustomerId'][0])
    {

        // verify the required parameter 'GetBMCStoresByCustomerIdRequest' is set
        if ($GetBMCStoresByCustomerIdRequest === null || (is_array($GetBMCStoresByCustomerIdRequest) && count($GetBMCStoresByCustomerIdRequest) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $GetBMCStoresByCustomerIdRequest when calling getBMCStoresByCustomerId'
            );
        }


        $resourcePath = '/CampaignManagement/v13/BMCStores/QueryByCustomerId';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $multipart = false;

        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        return $this->setupAndSendRequest(
            'POST',
            $resourcePath,
            $headers,
            $headerParams,
            $GetBMCStoresByCustomerIdRequest,
            $formParams,
            $multipart,
            true,
            true,
            false,
            'getHostSettingsForgetBMCStoresByCustomerId',
            null,
            [],
            $queryParams
        );
    }

    /**
     * Operation getBSCCountries
     *
     * @param  object $Body Body (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getBSCCountries'] to see the possible values for this operation
     *
     * @throws \Microsoft\MsAds\Rest\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \Microsoft\MsAds\Rest\Model\CampaignManagementService\GetBSCCountriesResponse|\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault|\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault|\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault|\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault
     */
    public function getBSCCountries($Body, string $contentType = self::contentTypes['getBSCCountries'][0])
    {
        list($response) = $this->getBSCCountriesWithHttpInfo($Body, $contentType);
        return $response;
    }

    /**
     * Operation getBSCCountriesWithHttpInfo
     *
     * @param  object $Body (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getBSCCountries'] to see the possible values for this operation
     *
     * @throws \Microsoft\MsAds\Rest\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \Microsoft\MsAds\Rest\Model\CampaignManagementService\GetBSCCountriesResponse|\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault|\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault|\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault|\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault, HTTP status code, HTTP response headers (array of strings)
     */
    public function getBSCCountriesWithHttpInfo($Body, string $contentType = self::contentTypes['getBSCCountries'][0])
    {
        $request = $this->getBSCCountriesRequest($Body, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                $response = $e->getResponse();
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            switch($statusCode) {
                case 200:
                    return $this->getResponseContent($request, $response, '\Microsoft\MsAds\Rest\Model\CampaignManagementService\GetBSCCountriesResponse');
                case 400:
                    return $this->getResponseContent($request, $response, '\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault');
                case 500:
                    return $this->getResponseContent($request, $response, '\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault');
                case 401:
                    return $this->getResponseContent($request, $response, '\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault');
                case 403:
                    return $this->getResponseContent($request, $response, '\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault');
            }

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            $returnType = '\Microsoft\MsAds\Rest\Model\CampaignManagementService\GetBSCCountriesResponse';
            return $this->getResponseContent($request, $response, $returnType);

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Microsoft\MsAds\Rest\Model\CampaignManagementService\GetBSCCountriesResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 500:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 403:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getBSCCountriesAsync
     *
     * @param  object $Body (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getBSCCountries'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getBSCCountriesAsync($Body, string $contentType = self::contentTypes['getBSCCountries'][0])
    {
        return $this->getBSCCountriesAsyncWithHttpInfo($Body, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getBSCCountriesAsyncWithHttpInfo
     *
     * @param  object $Body (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getBSCCountries'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getBSCCountriesAsyncWithHttpInfo($Body, string $contentType = self::contentTypes['getBSCCountries'][0])
    {
        $returnType = '\Microsoft\MsAds\Rest\Model\CampaignManagementService\GetBSCCountriesResponse';
        $request = $this->getBSCCountriesRequest($Body, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return $this->onFulfilledResponse($response, $returnType);
                },
                function ($exception) {
                    $this->onRejectedResponse($exception);
                }
            );
    }

    /**
     * Create request for operation 'getBSCCountries'
     *
     * @param  object $Body (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getBSCCountries'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function getBSCCountriesRequest($Body, string $contentType = self::contentTypes['getBSCCountries'][0])
    {

        // verify the required parameter 'Body' is set
        if ($Body === null || (is_array($Body) && count($Body) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $Body when calling getBSCCountries'
            );
        }


        $resourcePath = '/CampaignManagement/v13/BSCCountries/Query';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $multipart = false;

        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        return $this->setupAndSendRequest(
            'POST',
            $resourcePath,
            $headers,
            $headerParams,
            $Body,
            $formParams,
            $multipart,
            true,
            true,
            false,
            'getHostSettingsForgetBSCCountries',
            null,
            [],
            $queryParams
        );
    }

    /**
     * Operation getBidStrategiesByIds
     *
     * @param  \Microsoft\MsAds\Rest\Model\CampaignManagementService\GetBidStrategiesByIdsRequest $GetBidStrategiesByIdsRequest GetBidStrategiesByIdsRequest (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getBidStrategiesByIds'] to see the possible values for this operation
     *
     * @throws \Microsoft\MsAds\Rest\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \Microsoft\MsAds\Rest\Model\CampaignManagementService\GetBidStrategiesByIdsResponse|\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault|\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault|\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault|\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault
     */
    public function getBidStrategiesByIds($GetBidStrategiesByIdsRequest, string $contentType = self::contentTypes['getBidStrategiesByIds'][0])
    {
        list($response) = $this->getBidStrategiesByIdsWithHttpInfo($GetBidStrategiesByIdsRequest, $contentType);
        return $response;
    }

    /**
     * Operation getBidStrategiesByIdsWithHttpInfo
     *
     * @param  \Microsoft\MsAds\Rest\Model\CampaignManagementService\GetBidStrategiesByIdsRequest $GetBidStrategiesByIdsRequest (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getBidStrategiesByIds'] to see the possible values for this operation
     *
     * @throws \Microsoft\MsAds\Rest\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \Microsoft\MsAds\Rest\Model\CampaignManagementService\GetBidStrategiesByIdsResponse|\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault|\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault|\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault|\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault, HTTP status code, HTTP response headers (array of strings)
     */
    public function getBidStrategiesByIdsWithHttpInfo($GetBidStrategiesByIdsRequest, string $contentType = self::contentTypes['getBidStrategiesByIds'][0])
    {
        $request = $this->getBidStrategiesByIdsRequest($GetBidStrategiesByIdsRequest, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                $response = $e->getResponse();
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            switch($statusCode) {
                case 200:
                    return $this->getResponseContent($request, $response, '\Microsoft\MsAds\Rest\Model\CampaignManagementService\GetBidStrategiesByIdsResponse');
                case 400:
                    return $this->getResponseContent($request, $response, '\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault');
                case 500:
                    return $this->getResponseContent($request, $response, '\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault');
                case 401:
                    return $this->getResponseContent($request, $response, '\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault');
                case 403:
                    return $this->getResponseContent($request, $response, '\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault');
            }

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            $returnType = '\Microsoft\MsAds\Rest\Model\CampaignManagementService\GetBidStrategiesByIdsResponse';
            return $this->getResponseContent($request, $response, $returnType);

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Microsoft\MsAds\Rest\Model\CampaignManagementService\GetBidStrategiesByIdsResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 500:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 403:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getBidStrategiesByIdsAsync
     *
     * @param  \Microsoft\MsAds\Rest\Model\CampaignManagementService\GetBidStrategiesByIdsRequest $GetBidStrategiesByIdsRequest (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getBidStrategiesByIds'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getBidStrategiesByIdsAsync($GetBidStrategiesByIdsRequest, string $contentType = self::contentTypes['getBidStrategiesByIds'][0])
    {
        return $this->getBidStrategiesByIdsAsyncWithHttpInfo($GetBidStrategiesByIdsRequest, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getBidStrategiesByIdsAsyncWithHttpInfo
     *
     * @param  \Microsoft\MsAds\Rest\Model\CampaignManagementService\GetBidStrategiesByIdsRequest $GetBidStrategiesByIdsRequest (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getBidStrategiesByIds'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getBidStrategiesByIdsAsyncWithHttpInfo($GetBidStrategiesByIdsRequest, string $contentType = self::contentTypes['getBidStrategiesByIds'][0])
    {
        $returnType = '\Microsoft\MsAds\Rest\Model\CampaignManagementService\GetBidStrategiesByIdsResponse';
        $request = $this->getBidStrategiesByIdsRequest($GetBidStrategiesByIdsRequest, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return $this->onFulfilledResponse($response, $returnType);
                },
                function ($exception) {
                    $this->onRejectedResponse($exception);
                }
            );
    }

    /**
     * Create request for operation 'getBidStrategiesByIds'
     *
     * @param  \Microsoft\MsAds\Rest\Model\CampaignManagementService\GetBidStrategiesByIdsRequest $GetBidStrategiesByIdsRequest (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getBidStrategiesByIds'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function getBidStrategiesByIdsRequest($GetBidStrategiesByIdsRequest, string $contentType = self::contentTypes['getBidStrategiesByIds'][0])
    {

        // verify the required parameter 'GetBidStrategiesByIdsRequest' is set
        if ($GetBidStrategiesByIdsRequest === null || (is_array($GetBidStrategiesByIdsRequest) && count($GetBidStrategiesByIdsRequest) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $GetBidStrategiesByIdsRequest when calling getBidStrategiesByIds'
            );
        }


        $resourcePath = '/CampaignManagement/v13/BidStrategies/QueryByIds';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $multipart = false;

        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        return $this->setupAndSendRequest(
            'POST',
            $resourcePath,
            $headers,
            $headerParams,
            $GetBidStrategiesByIdsRequest,
            $formParams,
            $multipart,
            true,
            true,
            false,
            'getHostSettingsForgetBidStrategiesByIds',
            null,
            [],
            $queryParams
        );
    }

    /**
     * Operation getBrandKitsByAccountId
     *
     * @param  \Microsoft\MsAds\Rest\Model\CampaignManagementService\GetBrandKitsByAccountIdRequest $GetBrandKitsByAccountIdRequest GetBrandKitsByAccountIdRequest (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getBrandKitsByAccountId'] to see the possible values for this operation
     *
     * @throws \Microsoft\MsAds\Rest\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \Microsoft\MsAds\Rest\Model\CampaignManagementService\GetBrandKitsByAccountIdResponse|\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault|\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault|\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault|\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault
     */
    public function getBrandKitsByAccountId($GetBrandKitsByAccountIdRequest, string $contentType = self::contentTypes['getBrandKitsByAccountId'][0])
    {
        list($response) = $this->getBrandKitsByAccountIdWithHttpInfo($GetBrandKitsByAccountIdRequest, $contentType);
        return $response;
    }

    /**
     * Operation getBrandKitsByAccountIdWithHttpInfo
     *
     * @param  \Microsoft\MsAds\Rest\Model\CampaignManagementService\GetBrandKitsByAccountIdRequest $GetBrandKitsByAccountIdRequest (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getBrandKitsByAccountId'] to see the possible values for this operation
     *
     * @throws \Microsoft\MsAds\Rest\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \Microsoft\MsAds\Rest\Model\CampaignManagementService\GetBrandKitsByAccountIdResponse|\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault|\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault|\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault|\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault, HTTP status code, HTTP response headers (array of strings)
     */
    public function getBrandKitsByAccountIdWithHttpInfo($GetBrandKitsByAccountIdRequest, string $contentType = self::contentTypes['getBrandKitsByAccountId'][0])
    {
        $request = $this->getBrandKitsByAccountIdRequest($GetBrandKitsByAccountIdRequest, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                $response = $e->getResponse();
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            switch($statusCode) {
                case 200:
                    return $this->getResponseContent($request, $response, '\Microsoft\MsAds\Rest\Model\CampaignManagementService\GetBrandKitsByAccountIdResponse');
                case 400:
                    return $this->getResponseContent($request, $response, '\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault');
                case 500:
                    return $this->getResponseContent($request, $response, '\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault');
                case 401:
                    return $this->getResponseContent($request, $response, '\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault');
                case 403:
                    return $this->getResponseContent($request, $response, '\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault');
            }

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            $returnType = '\Microsoft\MsAds\Rest\Model\CampaignManagementService\GetBrandKitsByAccountIdResponse';
            return $this->getResponseContent($request, $response, $returnType);

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Microsoft\MsAds\Rest\Model\CampaignManagementService\GetBrandKitsByAccountIdResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 500:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 403:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getBrandKitsByAccountIdAsync
     *
     * @param  \Microsoft\MsAds\Rest\Model\CampaignManagementService\GetBrandKitsByAccountIdRequest $GetBrandKitsByAccountIdRequest (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getBrandKitsByAccountId'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getBrandKitsByAccountIdAsync($GetBrandKitsByAccountIdRequest, string $contentType = self::contentTypes['getBrandKitsByAccountId'][0])
    {
        return $this->getBrandKitsByAccountIdAsyncWithHttpInfo($GetBrandKitsByAccountIdRequest, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getBrandKitsByAccountIdAsyncWithHttpInfo
     *
     * @param  \Microsoft\MsAds\Rest\Model\CampaignManagementService\GetBrandKitsByAccountIdRequest $GetBrandKitsByAccountIdRequest (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getBrandKitsByAccountId'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getBrandKitsByAccountIdAsyncWithHttpInfo($GetBrandKitsByAccountIdRequest, string $contentType = self::contentTypes['getBrandKitsByAccountId'][0])
    {
        $returnType = '\Microsoft\MsAds\Rest\Model\CampaignManagementService\GetBrandKitsByAccountIdResponse';
        $request = $this->getBrandKitsByAccountIdRequest($GetBrandKitsByAccountIdRequest, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return $this->onFulfilledResponse($response, $returnType);
                },
                function ($exception) {
                    $this->onRejectedResponse($exception);
                }
            );
    }

    /**
     * Create request for operation 'getBrandKitsByAccountId'
     *
     * @param  \Microsoft\MsAds\Rest\Model\CampaignManagementService\GetBrandKitsByAccountIdRequest $GetBrandKitsByAccountIdRequest (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getBrandKitsByAccountId'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function getBrandKitsByAccountIdRequest($GetBrandKitsByAccountIdRequest, string $contentType = self::contentTypes['getBrandKitsByAccountId'][0])
    {

        // verify the required parameter 'GetBrandKitsByAccountIdRequest' is set
        if ($GetBrandKitsByAccountIdRequest === null || (is_array($GetBrandKitsByAccountIdRequest) && count($GetBrandKitsByAccountIdRequest) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $GetBrandKitsByAccountIdRequest when calling getBrandKitsByAccountId'
            );
        }


        $resourcePath = '/CampaignManagement/v13/BrandKits/QueryByAccountId';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $multipart = false;

        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        return $this->setupAndSendRequest(
            'POST',
            $resourcePath,
            $headers,
            $headerParams,
            $GetBrandKitsByAccountIdRequest,
            $formParams,
            $multipart,
            true,
            true,
            false,
            'getHostSettingsForgetBrandKitsByAccountId',
            null,
            [],
            $queryParams
        );
    }

    /**
     * Operation getBrandKitsByIds
     *
     * @param  \Microsoft\MsAds\Rest\Model\CampaignManagementService\GetBrandKitsByIdsRequest $GetBrandKitsByIdsRequest GetBrandKitsByIdsRequest (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getBrandKitsByIds'] to see the possible values for this operation
     *
     * @throws \Microsoft\MsAds\Rest\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \Microsoft\MsAds\Rest\Model\CampaignManagementService\GetBrandKitsByIdsResponse|\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault|\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault|\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault|\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault
     */
    public function getBrandKitsByIds($GetBrandKitsByIdsRequest, string $contentType = self::contentTypes['getBrandKitsByIds'][0])
    {
        list($response) = $this->getBrandKitsByIdsWithHttpInfo($GetBrandKitsByIdsRequest, $contentType);
        return $response;
    }

    /**
     * Operation getBrandKitsByIdsWithHttpInfo
     *
     * @param  \Microsoft\MsAds\Rest\Model\CampaignManagementService\GetBrandKitsByIdsRequest $GetBrandKitsByIdsRequest (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getBrandKitsByIds'] to see the possible values for this operation
     *
     * @throws \Microsoft\MsAds\Rest\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \Microsoft\MsAds\Rest\Model\CampaignManagementService\GetBrandKitsByIdsResponse|\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault|\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault|\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault|\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault, HTTP status code, HTTP response headers (array of strings)
     */
    public function getBrandKitsByIdsWithHttpInfo($GetBrandKitsByIdsRequest, string $contentType = self::contentTypes['getBrandKitsByIds'][0])
    {
        $request = $this->getBrandKitsByIdsRequest($GetBrandKitsByIdsRequest, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                $response = $e->getResponse();
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            switch($statusCode) {
                case 200:
                    return $this->getResponseContent($request, $response, '\Microsoft\MsAds\Rest\Model\CampaignManagementService\GetBrandKitsByIdsResponse');
                case 400:
                    return $this->getResponseContent($request, $response, '\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault');
                case 500:
                    return $this->getResponseContent($request, $response, '\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault');
                case 401:
                    return $this->getResponseContent($request, $response, '\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault');
                case 403:
                    return $this->getResponseContent($request, $response, '\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault');
            }

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            $returnType = '\Microsoft\MsAds\Rest\Model\CampaignManagementService\GetBrandKitsByIdsResponse';
            return $this->getResponseContent($request, $response, $returnType);

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Microsoft\MsAds\Rest\Model\CampaignManagementService\GetBrandKitsByIdsResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 500:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 403:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getBrandKitsByIdsAsync
     *
     * @param  \Microsoft\MsAds\Rest\Model\CampaignManagementService\GetBrandKitsByIdsRequest $GetBrandKitsByIdsRequest (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getBrandKitsByIds'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getBrandKitsByIdsAsync($GetBrandKitsByIdsRequest, string $contentType = self::contentTypes['getBrandKitsByIds'][0])
    {
        return $this->getBrandKitsByIdsAsyncWithHttpInfo($GetBrandKitsByIdsRequest, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getBrandKitsByIdsAsyncWithHttpInfo
     *
     * @param  \Microsoft\MsAds\Rest\Model\CampaignManagementService\GetBrandKitsByIdsRequest $GetBrandKitsByIdsRequest (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getBrandKitsByIds'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getBrandKitsByIdsAsyncWithHttpInfo($GetBrandKitsByIdsRequest, string $contentType = self::contentTypes['getBrandKitsByIds'][0])
    {
        $returnType = '\Microsoft\MsAds\Rest\Model\CampaignManagementService\GetBrandKitsByIdsResponse';
        $request = $this->getBrandKitsByIdsRequest($GetBrandKitsByIdsRequest, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return $this->onFulfilledResponse($response, $returnType);
                },
                function ($exception) {
                    $this->onRejectedResponse($exception);
                }
            );
    }

    /**
     * Create request for operation 'getBrandKitsByIds'
     *
     * @param  \Microsoft\MsAds\Rest\Model\CampaignManagementService\GetBrandKitsByIdsRequest $GetBrandKitsByIdsRequest (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getBrandKitsByIds'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function getBrandKitsByIdsRequest($GetBrandKitsByIdsRequest, string $contentType = self::contentTypes['getBrandKitsByIds'][0])
    {

        // verify the required parameter 'GetBrandKitsByIdsRequest' is set
        if ($GetBrandKitsByIdsRequest === null || (is_array($GetBrandKitsByIdsRequest) && count($GetBrandKitsByIdsRequest) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $GetBrandKitsByIdsRequest when calling getBrandKitsByIds'
            );
        }


        $resourcePath = '/CampaignManagement/v13/BrandKits/QueryByIds';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $multipart = false;

        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        return $this->setupAndSendRequest(
            'POST',
            $resourcePath,
            $headers,
            $headerParams,
            $GetBrandKitsByIdsRequest,
            $formParams,
            $multipart,
            true,
            true,
            false,
            'getHostSettingsForgetBrandKitsByIds',
            null,
            [],
            $queryParams
        );
    }

    /**
     * Operation getBudgetsByIds
     *
     * @param  \Microsoft\MsAds\Rest\Model\CampaignManagementService\GetBudgetsByIdsRequest $GetBudgetsByIdsRequest GetBudgetsByIdsRequest (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getBudgetsByIds'] to see the possible values for this operation
     *
     * @throws \Microsoft\MsAds\Rest\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \Microsoft\MsAds\Rest\Model\CampaignManagementService\GetBudgetsByIdsResponse|\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault|\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault|\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault|\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault
     */
    public function getBudgetsByIds($GetBudgetsByIdsRequest, string $contentType = self::contentTypes['getBudgetsByIds'][0])
    {
        list($response) = $this->getBudgetsByIdsWithHttpInfo($GetBudgetsByIdsRequest, $contentType);
        return $response;
    }

    /**
     * Operation getBudgetsByIdsWithHttpInfo
     *
     * @param  \Microsoft\MsAds\Rest\Model\CampaignManagementService\GetBudgetsByIdsRequest $GetBudgetsByIdsRequest (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getBudgetsByIds'] to see the possible values for this operation
     *
     * @throws \Microsoft\MsAds\Rest\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \Microsoft\MsAds\Rest\Model\CampaignManagementService\GetBudgetsByIdsResponse|\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault|\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault|\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault|\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault, HTTP status code, HTTP response headers (array of strings)
     */
    public function getBudgetsByIdsWithHttpInfo($GetBudgetsByIdsRequest, string $contentType = self::contentTypes['getBudgetsByIds'][0])
    {
        $request = $this->getBudgetsByIdsRequest($GetBudgetsByIdsRequest, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                $response = $e->getResponse();
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            switch($statusCode) {
                case 200:
                    return $this->getResponseContent($request, $response, '\Microsoft\MsAds\Rest\Model\CampaignManagementService\GetBudgetsByIdsResponse');
                case 400:
                    return $this->getResponseContent($request, $response, '\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault');
                case 500:
                    return $this->getResponseContent($request, $response, '\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault');
                case 401:
                    return $this->getResponseContent($request, $response, '\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault');
                case 403:
                    return $this->getResponseContent($request, $response, '\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault');
            }

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            $returnType = '\Microsoft\MsAds\Rest\Model\CampaignManagementService\GetBudgetsByIdsResponse';
            return $this->getResponseContent($request, $response, $returnType);

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Microsoft\MsAds\Rest\Model\CampaignManagementService\GetBudgetsByIdsResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 500:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 403:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getBudgetsByIdsAsync
     *
     * @param  \Microsoft\MsAds\Rest\Model\CampaignManagementService\GetBudgetsByIdsRequest $GetBudgetsByIdsRequest (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getBudgetsByIds'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getBudgetsByIdsAsync($GetBudgetsByIdsRequest, string $contentType = self::contentTypes['getBudgetsByIds'][0])
    {
        return $this->getBudgetsByIdsAsyncWithHttpInfo($GetBudgetsByIdsRequest, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getBudgetsByIdsAsyncWithHttpInfo
     *
     * @param  \Microsoft\MsAds\Rest\Model\CampaignManagementService\GetBudgetsByIdsRequest $GetBudgetsByIdsRequest (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getBudgetsByIds'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getBudgetsByIdsAsyncWithHttpInfo($GetBudgetsByIdsRequest, string $contentType = self::contentTypes['getBudgetsByIds'][0])
    {
        $returnType = '\Microsoft\MsAds\Rest\Model\CampaignManagementService\GetBudgetsByIdsResponse';
        $request = $this->getBudgetsByIdsRequest($GetBudgetsByIdsRequest, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return $this->onFulfilledResponse($response, $returnType);
                },
                function ($exception) {
                    $this->onRejectedResponse($exception);
                }
            );
    }

    /**
     * Create request for operation 'getBudgetsByIds'
     *
     * @param  \Microsoft\MsAds\Rest\Model\CampaignManagementService\GetBudgetsByIdsRequest $GetBudgetsByIdsRequest (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getBudgetsByIds'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function getBudgetsByIdsRequest($GetBudgetsByIdsRequest, string $contentType = self::contentTypes['getBudgetsByIds'][0])
    {

        // verify the required parameter 'GetBudgetsByIdsRequest' is set
        if ($GetBudgetsByIdsRequest === null || (is_array($GetBudgetsByIdsRequest) && count($GetBudgetsByIdsRequest) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $GetBudgetsByIdsRequest when calling getBudgetsByIds'
            );
        }


        $resourcePath = '/CampaignManagement/v13/Budgets/QueryByIds';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $multipart = false;

        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        return $this->setupAndSendRequest(
            'POST',
            $resourcePath,
            $headers,
            $headerParams,
            $GetBudgetsByIdsRequest,
            $formParams,
            $multipart,
            true,
            true,
            false,
            'getHostSettingsForgetBudgetsByIds',
            null,
            [],
            $queryParams
        );
    }

    /**
     * Operation getCampaignCriterionsByIds
     *
     * @param  \Microsoft\MsAds\Rest\Model\CampaignManagementService\GetCampaignCriterionsByIdsRequest $GetCampaignCriterionsByIdsRequest GetCampaignCriterionsByIdsRequest (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getCampaignCriterionsByIds'] to see the possible values for this operation
     *
     * @throws \Microsoft\MsAds\Rest\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \Microsoft\MsAds\Rest\Model\CampaignManagementService\GetCampaignCriterionsByIdsResponse|\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault|\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault|\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault|\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault
     */
    public function getCampaignCriterionsByIds($GetCampaignCriterionsByIdsRequest, string $contentType = self::contentTypes['getCampaignCriterionsByIds'][0])
    {
        list($response) = $this->getCampaignCriterionsByIdsWithHttpInfo($GetCampaignCriterionsByIdsRequest, $contentType);
        return $response;
    }

    /**
     * Operation getCampaignCriterionsByIdsWithHttpInfo
     *
     * @param  \Microsoft\MsAds\Rest\Model\CampaignManagementService\GetCampaignCriterionsByIdsRequest $GetCampaignCriterionsByIdsRequest (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getCampaignCriterionsByIds'] to see the possible values for this operation
     *
     * @throws \Microsoft\MsAds\Rest\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \Microsoft\MsAds\Rest\Model\CampaignManagementService\GetCampaignCriterionsByIdsResponse|\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault|\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault|\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault|\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault, HTTP status code, HTTP response headers (array of strings)
     */
    public function getCampaignCriterionsByIdsWithHttpInfo($GetCampaignCriterionsByIdsRequest, string $contentType = self::contentTypes['getCampaignCriterionsByIds'][0])
    {
        $request = $this->getCampaignCriterionsByIdsRequest($GetCampaignCriterionsByIdsRequest, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                $response = $e->getResponse();
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            switch($statusCode) {
                case 200:
                    return $this->getResponseContent($request, $response, '\Microsoft\MsAds\Rest\Model\CampaignManagementService\GetCampaignCriterionsByIdsResponse');
                case 400:
                    return $this->getResponseContent($request, $response, '\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault');
                case 500:
                    return $this->getResponseContent($request, $response, '\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault');
                case 401:
                    return $this->getResponseContent($request, $response, '\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault');
                case 403:
                    return $this->getResponseContent($request, $response, '\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault');
            }

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            $returnType = '\Microsoft\MsAds\Rest\Model\CampaignManagementService\GetCampaignCriterionsByIdsResponse';
            return $this->getResponseContent($request, $response, $returnType);

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Microsoft\MsAds\Rest\Model\CampaignManagementService\GetCampaignCriterionsByIdsResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 500:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 403:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getCampaignCriterionsByIdsAsync
     *
     * @param  \Microsoft\MsAds\Rest\Model\CampaignManagementService\GetCampaignCriterionsByIdsRequest $GetCampaignCriterionsByIdsRequest (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getCampaignCriterionsByIds'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getCampaignCriterionsByIdsAsync($GetCampaignCriterionsByIdsRequest, string $contentType = self::contentTypes['getCampaignCriterionsByIds'][0])
    {
        return $this->getCampaignCriterionsByIdsAsyncWithHttpInfo($GetCampaignCriterionsByIdsRequest, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getCampaignCriterionsByIdsAsyncWithHttpInfo
     *
     * @param  \Microsoft\MsAds\Rest\Model\CampaignManagementService\GetCampaignCriterionsByIdsRequest $GetCampaignCriterionsByIdsRequest (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getCampaignCriterionsByIds'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getCampaignCriterionsByIdsAsyncWithHttpInfo($GetCampaignCriterionsByIdsRequest, string $contentType = self::contentTypes['getCampaignCriterionsByIds'][0])
    {
        $returnType = '\Microsoft\MsAds\Rest\Model\CampaignManagementService\GetCampaignCriterionsByIdsResponse';
        $request = $this->getCampaignCriterionsByIdsRequest($GetCampaignCriterionsByIdsRequest, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return $this->onFulfilledResponse($response, $returnType);
                },
                function ($exception) {
                    $this->onRejectedResponse($exception);
                }
            );
    }

    /**
     * Create request for operation 'getCampaignCriterionsByIds'
     *
     * @param  \Microsoft\MsAds\Rest\Model\CampaignManagementService\GetCampaignCriterionsByIdsRequest $GetCampaignCriterionsByIdsRequest (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getCampaignCriterionsByIds'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function getCampaignCriterionsByIdsRequest($GetCampaignCriterionsByIdsRequest, string $contentType = self::contentTypes['getCampaignCriterionsByIds'][0])
    {

        // verify the required parameter 'GetCampaignCriterionsByIdsRequest' is set
        if ($GetCampaignCriterionsByIdsRequest === null || (is_array($GetCampaignCriterionsByIdsRequest) && count($GetCampaignCriterionsByIdsRequest) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $GetCampaignCriterionsByIdsRequest when calling getCampaignCriterionsByIds'
            );
        }


        $resourcePath = '/CampaignManagement/v13/CampaignCriterions/QueryByIds';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $multipart = false;

        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        return $this->setupAndSendRequest(
            'POST',
            $resourcePath,
            $headers,
            $headerParams,
            $GetCampaignCriterionsByIdsRequest,
            $formParams,
            $multipart,
            true,
            true,
            false,
            'getHostSettingsForgetCampaignCriterionsByIds',
            null,
            [],
            $queryParams
        );
    }

    /**
     * Operation getCampaignIdsByBidStrategyIds
     *
     * @param  \Microsoft\MsAds\Rest\Model\CampaignManagementService\GetCampaignIdsByBidStrategyIdsRequest $GetCampaignIdsByBidStrategyIdsRequest GetCampaignIdsByBidStrategyIdsRequest (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getCampaignIdsByBidStrategyIds'] to see the possible values for this operation
     *
     * @throws \Microsoft\MsAds\Rest\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \Microsoft\MsAds\Rest\Model\CampaignManagementService\GetCampaignIdsByBidStrategyIdsResponse|\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault|\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault|\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault|\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault
     */
    public function getCampaignIdsByBidStrategyIds($GetCampaignIdsByBidStrategyIdsRequest, string $contentType = self::contentTypes['getCampaignIdsByBidStrategyIds'][0])
    {
        list($response) = $this->getCampaignIdsByBidStrategyIdsWithHttpInfo($GetCampaignIdsByBidStrategyIdsRequest, $contentType);
        return $response;
    }

    /**
     * Operation getCampaignIdsByBidStrategyIdsWithHttpInfo
     *
     * @param  \Microsoft\MsAds\Rest\Model\CampaignManagementService\GetCampaignIdsByBidStrategyIdsRequest $GetCampaignIdsByBidStrategyIdsRequest (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getCampaignIdsByBidStrategyIds'] to see the possible values for this operation
     *
     * @throws \Microsoft\MsAds\Rest\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \Microsoft\MsAds\Rest\Model\CampaignManagementService\GetCampaignIdsByBidStrategyIdsResponse|\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault|\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault|\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault|\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault, HTTP status code, HTTP response headers (array of strings)
     */
    public function getCampaignIdsByBidStrategyIdsWithHttpInfo($GetCampaignIdsByBidStrategyIdsRequest, string $contentType = self::contentTypes['getCampaignIdsByBidStrategyIds'][0])
    {
        $request = $this->getCampaignIdsByBidStrategyIdsRequest($GetCampaignIdsByBidStrategyIdsRequest, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                $response = $e->getResponse();
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            switch($statusCode) {
                case 200:
                    return $this->getResponseContent($request, $response, '\Microsoft\MsAds\Rest\Model\CampaignManagementService\GetCampaignIdsByBidStrategyIdsResponse');
                case 400:
                    return $this->getResponseContent($request, $response, '\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault');
                case 500:
                    return $this->getResponseContent($request, $response, '\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault');
                case 401:
                    return $this->getResponseContent($request, $response, '\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault');
                case 403:
                    return $this->getResponseContent($request, $response, '\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault');
            }

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            $returnType = '\Microsoft\MsAds\Rest\Model\CampaignManagementService\GetCampaignIdsByBidStrategyIdsResponse';
            return $this->getResponseContent($request, $response, $returnType);

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Microsoft\MsAds\Rest\Model\CampaignManagementService\GetCampaignIdsByBidStrategyIdsResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 500:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 403:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getCampaignIdsByBidStrategyIdsAsync
     *
     * @param  \Microsoft\MsAds\Rest\Model\CampaignManagementService\GetCampaignIdsByBidStrategyIdsRequest $GetCampaignIdsByBidStrategyIdsRequest (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getCampaignIdsByBidStrategyIds'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getCampaignIdsByBidStrategyIdsAsync($GetCampaignIdsByBidStrategyIdsRequest, string $contentType = self::contentTypes['getCampaignIdsByBidStrategyIds'][0])
    {
        return $this->getCampaignIdsByBidStrategyIdsAsyncWithHttpInfo($GetCampaignIdsByBidStrategyIdsRequest, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getCampaignIdsByBidStrategyIdsAsyncWithHttpInfo
     *
     * @param  \Microsoft\MsAds\Rest\Model\CampaignManagementService\GetCampaignIdsByBidStrategyIdsRequest $GetCampaignIdsByBidStrategyIdsRequest (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getCampaignIdsByBidStrategyIds'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getCampaignIdsByBidStrategyIdsAsyncWithHttpInfo($GetCampaignIdsByBidStrategyIdsRequest, string $contentType = self::contentTypes['getCampaignIdsByBidStrategyIds'][0])
    {
        $returnType = '\Microsoft\MsAds\Rest\Model\CampaignManagementService\GetCampaignIdsByBidStrategyIdsResponse';
        $request = $this->getCampaignIdsByBidStrategyIdsRequest($GetCampaignIdsByBidStrategyIdsRequest, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return $this->onFulfilledResponse($response, $returnType);
                },
                function ($exception) {
                    $this->onRejectedResponse($exception);
                }
            );
    }

    /**
     * Create request for operation 'getCampaignIdsByBidStrategyIds'
     *
     * @param  \Microsoft\MsAds\Rest\Model\CampaignManagementService\GetCampaignIdsByBidStrategyIdsRequest $GetCampaignIdsByBidStrategyIdsRequest (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getCampaignIdsByBidStrategyIds'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function getCampaignIdsByBidStrategyIdsRequest($GetCampaignIdsByBidStrategyIdsRequest, string $contentType = self::contentTypes['getCampaignIdsByBidStrategyIds'][0])
    {

        // verify the required parameter 'GetCampaignIdsByBidStrategyIdsRequest' is set
        if ($GetCampaignIdsByBidStrategyIdsRequest === null || (is_array($GetCampaignIdsByBidStrategyIdsRequest) && count($GetCampaignIdsByBidStrategyIdsRequest) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $GetCampaignIdsByBidStrategyIdsRequest when calling getCampaignIdsByBidStrategyIds'
            );
        }


        $resourcePath = '/CampaignManagement/v13/CampaignIds/QueryByBidStrategyIds';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $multipart = false;

        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        return $this->setupAndSendRequest(
            'POST',
            $resourcePath,
            $headers,
            $headerParams,
            $GetCampaignIdsByBidStrategyIdsRequest,
            $formParams,
            $multipart,
            true,
            true,
            false,
            'getHostSettingsForgetCampaignIdsByBidStrategyIds',
            null,
            [],
            $queryParams
        );
    }

    /**
     * Operation getCampaignIdsByBudgetIds
     *
     * @param  \Microsoft\MsAds\Rest\Model\CampaignManagementService\GetCampaignIdsByBudgetIdsRequest $GetCampaignIdsByBudgetIdsRequest GetCampaignIdsByBudgetIdsRequest (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getCampaignIdsByBudgetIds'] to see the possible values for this operation
     *
     * @throws \Microsoft\MsAds\Rest\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \Microsoft\MsAds\Rest\Model\CampaignManagementService\GetCampaignIdsByBudgetIdsResponse|\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault|\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault|\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault|\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault
     */
    public function getCampaignIdsByBudgetIds($GetCampaignIdsByBudgetIdsRequest, string $contentType = self::contentTypes['getCampaignIdsByBudgetIds'][0])
    {
        list($response) = $this->getCampaignIdsByBudgetIdsWithHttpInfo($GetCampaignIdsByBudgetIdsRequest, $contentType);
        return $response;
    }

    /**
     * Operation getCampaignIdsByBudgetIdsWithHttpInfo
     *
     * @param  \Microsoft\MsAds\Rest\Model\CampaignManagementService\GetCampaignIdsByBudgetIdsRequest $GetCampaignIdsByBudgetIdsRequest (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getCampaignIdsByBudgetIds'] to see the possible values for this operation
     *
     * @throws \Microsoft\MsAds\Rest\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \Microsoft\MsAds\Rest\Model\CampaignManagementService\GetCampaignIdsByBudgetIdsResponse|\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault|\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault|\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault|\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault, HTTP status code, HTTP response headers (array of strings)
     */
    public function getCampaignIdsByBudgetIdsWithHttpInfo($GetCampaignIdsByBudgetIdsRequest, string $contentType = self::contentTypes['getCampaignIdsByBudgetIds'][0])
    {
        $request = $this->getCampaignIdsByBudgetIdsRequest($GetCampaignIdsByBudgetIdsRequest, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                $response = $e->getResponse();
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            switch($statusCode) {
                case 200:
                    return $this->getResponseContent($request, $response, '\Microsoft\MsAds\Rest\Model\CampaignManagementService\GetCampaignIdsByBudgetIdsResponse');
                case 400:
                    return $this->getResponseContent($request, $response, '\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault');
                case 500:
                    return $this->getResponseContent($request, $response, '\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault');
                case 401:
                    return $this->getResponseContent($request, $response, '\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault');
                case 403:
                    return $this->getResponseContent($request, $response, '\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault');
            }

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            $returnType = '\Microsoft\MsAds\Rest\Model\CampaignManagementService\GetCampaignIdsByBudgetIdsResponse';
            return $this->getResponseContent($request, $response, $returnType);

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Microsoft\MsAds\Rest\Model\CampaignManagementService\GetCampaignIdsByBudgetIdsResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 500:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 403:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getCampaignIdsByBudgetIdsAsync
     *
     * @param  \Microsoft\MsAds\Rest\Model\CampaignManagementService\GetCampaignIdsByBudgetIdsRequest $GetCampaignIdsByBudgetIdsRequest (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getCampaignIdsByBudgetIds'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getCampaignIdsByBudgetIdsAsync($GetCampaignIdsByBudgetIdsRequest, string $contentType = self::contentTypes['getCampaignIdsByBudgetIds'][0])
    {
        return $this->getCampaignIdsByBudgetIdsAsyncWithHttpInfo($GetCampaignIdsByBudgetIdsRequest, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getCampaignIdsByBudgetIdsAsyncWithHttpInfo
     *
     * @param  \Microsoft\MsAds\Rest\Model\CampaignManagementService\GetCampaignIdsByBudgetIdsRequest $GetCampaignIdsByBudgetIdsRequest (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getCampaignIdsByBudgetIds'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getCampaignIdsByBudgetIdsAsyncWithHttpInfo($GetCampaignIdsByBudgetIdsRequest, string $contentType = self::contentTypes['getCampaignIdsByBudgetIds'][0])
    {
        $returnType = '\Microsoft\MsAds\Rest\Model\CampaignManagementService\GetCampaignIdsByBudgetIdsResponse';
        $request = $this->getCampaignIdsByBudgetIdsRequest($GetCampaignIdsByBudgetIdsRequest, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return $this->onFulfilledResponse($response, $returnType);
                },
                function ($exception) {
                    $this->onRejectedResponse($exception);
                }
            );
    }

    /**
     * Create request for operation 'getCampaignIdsByBudgetIds'
     *
     * @param  \Microsoft\MsAds\Rest\Model\CampaignManagementService\GetCampaignIdsByBudgetIdsRequest $GetCampaignIdsByBudgetIdsRequest (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getCampaignIdsByBudgetIds'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function getCampaignIdsByBudgetIdsRequest($GetCampaignIdsByBudgetIdsRequest, string $contentType = self::contentTypes['getCampaignIdsByBudgetIds'][0])
    {

        // verify the required parameter 'GetCampaignIdsByBudgetIdsRequest' is set
        if ($GetCampaignIdsByBudgetIdsRequest === null || (is_array($GetCampaignIdsByBudgetIdsRequest) && count($GetCampaignIdsByBudgetIdsRequest) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $GetCampaignIdsByBudgetIdsRequest when calling getCampaignIdsByBudgetIds'
            );
        }


        $resourcePath = '/CampaignManagement/v13/CampaignIds/QueryByBudgetIds';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $multipart = false;

        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        return $this->setupAndSendRequest(
            'POST',
            $resourcePath,
            $headers,
            $headerParams,
            $GetCampaignIdsByBudgetIdsRequest,
            $formParams,
            $multipart,
            true,
            true,
            false,
            'getHostSettingsForgetCampaignIdsByBudgetIds',
            null,
            [],
            $queryParams
        );
    }

    /**
     * Operation getCampaignSizesByAccountId
     *
     * @param  \Microsoft\MsAds\Rest\Model\CampaignManagementService\GetCampaignSizesByAccountIdRequest $GetCampaignSizesByAccountIdRequest GetCampaignSizesByAccountIdRequest (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getCampaignSizesByAccountId'] to see the possible values for this operation
     *
     * @throws \Microsoft\MsAds\Rest\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \Microsoft\MsAds\Rest\Model\CampaignManagementService\GetCampaignSizesByAccountIdResponse|\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault|\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault|\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault|\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault
     */
    public function getCampaignSizesByAccountId($GetCampaignSizesByAccountIdRequest, string $contentType = self::contentTypes['getCampaignSizesByAccountId'][0])
    {
        list($response) = $this->getCampaignSizesByAccountIdWithHttpInfo($GetCampaignSizesByAccountIdRequest, $contentType);
        return $response;
    }

    /**
     * Operation getCampaignSizesByAccountIdWithHttpInfo
     *
     * @param  \Microsoft\MsAds\Rest\Model\CampaignManagementService\GetCampaignSizesByAccountIdRequest $GetCampaignSizesByAccountIdRequest (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getCampaignSizesByAccountId'] to see the possible values for this operation
     *
     * @throws \Microsoft\MsAds\Rest\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \Microsoft\MsAds\Rest\Model\CampaignManagementService\GetCampaignSizesByAccountIdResponse|\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault|\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault|\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault|\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault, HTTP status code, HTTP response headers (array of strings)
     */
    public function getCampaignSizesByAccountIdWithHttpInfo($GetCampaignSizesByAccountIdRequest, string $contentType = self::contentTypes['getCampaignSizesByAccountId'][0])
    {
        $request = $this->getCampaignSizesByAccountIdRequest($GetCampaignSizesByAccountIdRequest, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                $response = $e->getResponse();
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            switch($statusCode) {
                case 200:
                    return $this->getResponseContent($request, $response, '\Microsoft\MsAds\Rest\Model\CampaignManagementService\GetCampaignSizesByAccountIdResponse');
                case 400:
                    return $this->getResponseContent($request, $response, '\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault');
                case 500:
                    return $this->getResponseContent($request, $response, '\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault');
                case 401:
                    return $this->getResponseContent($request, $response, '\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault');
                case 403:
                    return $this->getResponseContent($request, $response, '\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault');
            }

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            $returnType = '\Microsoft\MsAds\Rest\Model\CampaignManagementService\GetCampaignSizesByAccountIdResponse';
            return $this->getResponseContent($request, $response, $returnType);

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Microsoft\MsAds\Rest\Model\CampaignManagementService\GetCampaignSizesByAccountIdResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 500:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 403:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getCampaignSizesByAccountIdAsync
     *
     * @param  \Microsoft\MsAds\Rest\Model\CampaignManagementService\GetCampaignSizesByAccountIdRequest $GetCampaignSizesByAccountIdRequest (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getCampaignSizesByAccountId'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getCampaignSizesByAccountIdAsync($GetCampaignSizesByAccountIdRequest, string $contentType = self::contentTypes['getCampaignSizesByAccountId'][0])
    {
        return $this->getCampaignSizesByAccountIdAsyncWithHttpInfo($GetCampaignSizesByAccountIdRequest, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getCampaignSizesByAccountIdAsyncWithHttpInfo
     *
     * @param  \Microsoft\MsAds\Rest\Model\CampaignManagementService\GetCampaignSizesByAccountIdRequest $GetCampaignSizesByAccountIdRequest (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getCampaignSizesByAccountId'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getCampaignSizesByAccountIdAsyncWithHttpInfo($GetCampaignSizesByAccountIdRequest, string $contentType = self::contentTypes['getCampaignSizesByAccountId'][0])
    {
        $returnType = '\Microsoft\MsAds\Rest\Model\CampaignManagementService\GetCampaignSizesByAccountIdResponse';
        $request = $this->getCampaignSizesByAccountIdRequest($GetCampaignSizesByAccountIdRequest, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return $this->onFulfilledResponse($response, $returnType);
                },
                function ($exception) {
                    $this->onRejectedResponse($exception);
                }
            );
    }

    /**
     * Create request for operation 'getCampaignSizesByAccountId'
     *
     * @param  \Microsoft\MsAds\Rest\Model\CampaignManagementService\GetCampaignSizesByAccountIdRequest $GetCampaignSizesByAccountIdRequest (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getCampaignSizesByAccountId'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function getCampaignSizesByAccountIdRequest($GetCampaignSizesByAccountIdRequest, string $contentType = self::contentTypes['getCampaignSizesByAccountId'][0])
    {

        // verify the required parameter 'GetCampaignSizesByAccountIdRequest' is set
        if ($GetCampaignSizesByAccountIdRequest === null || (is_array($GetCampaignSizesByAccountIdRequest) && count($GetCampaignSizesByAccountIdRequest) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $GetCampaignSizesByAccountIdRequest when calling getCampaignSizesByAccountId'
            );
        }


        $resourcePath = '/CampaignManagement/v13/CampaignSizes/QueryByAccountId';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $multipart = false;

        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        return $this->setupAndSendRequest(
            'POST',
            $resourcePath,
            $headers,
            $headerParams,
            $GetCampaignSizesByAccountIdRequest,
            $formParams,
            $multipart,
            true,
            true,
            false,
            'getHostSettingsForgetCampaignSizesByAccountId',
            null,
            [],
            $queryParams
        );
    }

    /**
     * Operation getCampaignsByAccountId
     *
     * @param  \Microsoft\MsAds\Rest\Model\CampaignManagementService\GetCampaignsByAccountIdRequest $GetCampaignsByAccountIdRequest GetCampaignsByAccountIdRequest (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getCampaignsByAccountId'] to see the possible values for this operation
     *
     * @throws \Microsoft\MsAds\Rest\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \Microsoft\MsAds\Rest\Model\CampaignManagementService\GetCampaignsByAccountIdResponse|\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault|\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault|\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault|\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault
     */
    public function getCampaignsByAccountId($GetCampaignsByAccountIdRequest, string $contentType = self::contentTypes['getCampaignsByAccountId'][0])
    {
        list($response) = $this->getCampaignsByAccountIdWithHttpInfo($GetCampaignsByAccountIdRequest, $contentType);
        return $response;
    }

    /**
     * Operation getCampaignsByAccountIdWithHttpInfo
     *
     * @param  \Microsoft\MsAds\Rest\Model\CampaignManagementService\GetCampaignsByAccountIdRequest $GetCampaignsByAccountIdRequest (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getCampaignsByAccountId'] to see the possible values for this operation
     *
     * @throws \Microsoft\MsAds\Rest\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \Microsoft\MsAds\Rest\Model\CampaignManagementService\GetCampaignsByAccountIdResponse|\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault|\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault|\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault|\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault, HTTP status code, HTTP response headers (array of strings)
     */
    public function getCampaignsByAccountIdWithHttpInfo($GetCampaignsByAccountIdRequest, string $contentType = self::contentTypes['getCampaignsByAccountId'][0])
    {
        $request = $this->getCampaignsByAccountIdRequest($GetCampaignsByAccountIdRequest, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                $response = $e->getResponse();
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            switch($statusCode) {
                case 200:
                    return $this->getResponseContent($request, $response, '\Microsoft\MsAds\Rest\Model\CampaignManagementService\GetCampaignsByAccountIdResponse');
                case 400:
                    return $this->getResponseContent($request, $response, '\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault');
                case 500:
                    return $this->getResponseContent($request, $response, '\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault');
                case 401:
                    return $this->getResponseContent($request, $response, '\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault');
                case 403:
                    return $this->getResponseContent($request, $response, '\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault');
            }

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            $returnType = '\Microsoft\MsAds\Rest\Model\CampaignManagementService\GetCampaignsByAccountIdResponse';
            return $this->getResponseContent($request, $response, $returnType);

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Microsoft\MsAds\Rest\Model\CampaignManagementService\GetCampaignsByAccountIdResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 500:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 403:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getCampaignsByAccountIdAsync
     *
     * @param  \Microsoft\MsAds\Rest\Model\CampaignManagementService\GetCampaignsByAccountIdRequest $GetCampaignsByAccountIdRequest (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getCampaignsByAccountId'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getCampaignsByAccountIdAsync($GetCampaignsByAccountIdRequest, string $contentType = self::contentTypes['getCampaignsByAccountId'][0])
    {
        return $this->getCampaignsByAccountIdAsyncWithHttpInfo($GetCampaignsByAccountIdRequest, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getCampaignsByAccountIdAsyncWithHttpInfo
     *
     * @param  \Microsoft\MsAds\Rest\Model\CampaignManagementService\GetCampaignsByAccountIdRequest $GetCampaignsByAccountIdRequest (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getCampaignsByAccountId'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getCampaignsByAccountIdAsyncWithHttpInfo($GetCampaignsByAccountIdRequest, string $contentType = self::contentTypes['getCampaignsByAccountId'][0])
    {
        $returnType = '\Microsoft\MsAds\Rest\Model\CampaignManagementService\GetCampaignsByAccountIdResponse';
        $request = $this->getCampaignsByAccountIdRequest($GetCampaignsByAccountIdRequest, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return $this->onFulfilledResponse($response, $returnType);
                },
                function ($exception) {
                    $this->onRejectedResponse($exception);
                }
            );
    }

    /**
     * Create request for operation 'getCampaignsByAccountId'
     *
     * @param  \Microsoft\MsAds\Rest\Model\CampaignManagementService\GetCampaignsByAccountIdRequest $GetCampaignsByAccountIdRequest (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getCampaignsByAccountId'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function getCampaignsByAccountIdRequest($GetCampaignsByAccountIdRequest, string $contentType = self::contentTypes['getCampaignsByAccountId'][0])
    {

        // verify the required parameter 'GetCampaignsByAccountIdRequest' is set
        if ($GetCampaignsByAccountIdRequest === null || (is_array($GetCampaignsByAccountIdRequest) && count($GetCampaignsByAccountIdRequest) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $GetCampaignsByAccountIdRequest when calling getCampaignsByAccountId'
            );
        }


        $resourcePath = '/CampaignManagement/v13/Campaigns/QueryByAccountId';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $multipart = false;

        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        return $this->setupAndSendRequest(
            'POST',
            $resourcePath,
            $headers,
            $headerParams,
            $GetCampaignsByAccountIdRequest,
            $formParams,
            $multipart,
            true,
            true,
            false,
            'getHostSettingsForgetCampaignsByAccountId',
            null,
            [],
            $queryParams
        );
    }

    /**
     * Operation getCampaignsByIds
     *
     * @param  \Microsoft\MsAds\Rest\Model\CampaignManagementService\GetCampaignsByIdsRequest $GetCampaignsByIdsRequest GetCampaignsByIdsRequest (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getCampaignsByIds'] to see the possible values for this operation
     *
     * @throws \Microsoft\MsAds\Rest\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \Microsoft\MsAds\Rest\Model\CampaignManagementService\GetCampaignsByIdsResponse|\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault|\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault|\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault|\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault
     */
    public function getCampaignsByIds($GetCampaignsByIdsRequest, string $contentType = self::contentTypes['getCampaignsByIds'][0])
    {
        list($response) = $this->getCampaignsByIdsWithHttpInfo($GetCampaignsByIdsRequest, $contentType);
        return $response;
    }

    /**
     * Operation getCampaignsByIdsWithHttpInfo
     *
     * @param  \Microsoft\MsAds\Rest\Model\CampaignManagementService\GetCampaignsByIdsRequest $GetCampaignsByIdsRequest (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getCampaignsByIds'] to see the possible values for this operation
     *
     * @throws \Microsoft\MsAds\Rest\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \Microsoft\MsAds\Rest\Model\CampaignManagementService\GetCampaignsByIdsResponse|\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault|\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault|\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault|\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault, HTTP status code, HTTP response headers (array of strings)
     */
    public function getCampaignsByIdsWithHttpInfo($GetCampaignsByIdsRequest, string $contentType = self::contentTypes['getCampaignsByIds'][0])
    {
        $request = $this->getCampaignsByIdsRequest($GetCampaignsByIdsRequest, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                $response = $e->getResponse();
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            switch($statusCode) {
                case 200:
                    return $this->getResponseContent($request, $response, '\Microsoft\MsAds\Rest\Model\CampaignManagementService\GetCampaignsByIdsResponse');
                case 400:
                    return $this->getResponseContent($request, $response, '\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault');
                case 500:
                    return $this->getResponseContent($request, $response, '\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault');
                case 401:
                    return $this->getResponseContent($request, $response, '\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault');
                case 403:
                    return $this->getResponseContent($request, $response, '\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault');
            }

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            $returnType = '\Microsoft\MsAds\Rest\Model\CampaignManagementService\GetCampaignsByIdsResponse';
            return $this->getResponseContent($request, $response, $returnType);

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Microsoft\MsAds\Rest\Model\CampaignManagementService\GetCampaignsByIdsResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 500:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 403:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getCampaignsByIdsAsync
     *
     * @param  \Microsoft\MsAds\Rest\Model\CampaignManagementService\GetCampaignsByIdsRequest $GetCampaignsByIdsRequest (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getCampaignsByIds'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getCampaignsByIdsAsync($GetCampaignsByIdsRequest, string $contentType = self::contentTypes['getCampaignsByIds'][0])
    {
        return $this->getCampaignsByIdsAsyncWithHttpInfo($GetCampaignsByIdsRequest, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getCampaignsByIdsAsyncWithHttpInfo
     *
     * @param  \Microsoft\MsAds\Rest\Model\CampaignManagementService\GetCampaignsByIdsRequest $GetCampaignsByIdsRequest (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getCampaignsByIds'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getCampaignsByIdsAsyncWithHttpInfo($GetCampaignsByIdsRequest, string $contentType = self::contentTypes['getCampaignsByIds'][0])
    {
        $returnType = '\Microsoft\MsAds\Rest\Model\CampaignManagementService\GetCampaignsByIdsResponse';
        $request = $this->getCampaignsByIdsRequest($GetCampaignsByIdsRequest, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return $this->onFulfilledResponse($response, $returnType);
                },
                function ($exception) {
                    $this->onRejectedResponse($exception);
                }
            );
    }

    /**
     * Create request for operation 'getCampaignsByIds'
     *
     * @param  \Microsoft\MsAds\Rest\Model\CampaignManagementService\GetCampaignsByIdsRequest $GetCampaignsByIdsRequest (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getCampaignsByIds'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function getCampaignsByIdsRequest($GetCampaignsByIdsRequest, string $contentType = self::contentTypes['getCampaignsByIds'][0])
    {

        // verify the required parameter 'GetCampaignsByIdsRequest' is set
        if ($GetCampaignsByIdsRequest === null || (is_array($GetCampaignsByIdsRequest) && count($GetCampaignsByIdsRequest) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $GetCampaignsByIdsRequest when calling getCampaignsByIds'
            );
        }


        $resourcePath = '/CampaignManagement/v13/Campaigns/QueryByIds';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $multipart = false;

        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        return $this->setupAndSendRequest(
            'POST',
            $resourcePath,
            $headers,
            $headerParams,
            $GetCampaignsByIdsRequest,
            $formParams,
            $multipart,
            true,
            true,
            false,
            'getHostSettingsForgetCampaignsByIds',
            null,
            [],
            $queryParams
        );
    }

    /**
     * Operation getClipchampTemplates
     *
     * @param  \Microsoft\MsAds\Rest\Model\CampaignManagementService\GetClipchampTemplatesRequest $GetClipchampTemplatesRequest GetClipchampTemplatesRequest (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getClipchampTemplates'] to see the possible values for this operation
     *
     * @throws \Microsoft\MsAds\Rest\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \Microsoft\MsAds\Rest\Model\CampaignManagementService\GetClipchampTemplatesResponse|\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault|\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault|\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault|\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault
     */
    public function getClipchampTemplates($GetClipchampTemplatesRequest, string $contentType = self::contentTypes['getClipchampTemplates'][0])
    {
        list($response) = $this->getClipchampTemplatesWithHttpInfo($GetClipchampTemplatesRequest, $contentType);
        return $response;
    }

    /**
     * Operation getClipchampTemplatesWithHttpInfo
     *
     * @param  \Microsoft\MsAds\Rest\Model\CampaignManagementService\GetClipchampTemplatesRequest $GetClipchampTemplatesRequest (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getClipchampTemplates'] to see the possible values for this operation
     *
     * @throws \Microsoft\MsAds\Rest\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \Microsoft\MsAds\Rest\Model\CampaignManagementService\GetClipchampTemplatesResponse|\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault|\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault|\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault|\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault, HTTP status code, HTTP response headers (array of strings)
     */
    public function getClipchampTemplatesWithHttpInfo($GetClipchampTemplatesRequest, string $contentType = self::contentTypes['getClipchampTemplates'][0])
    {
        $request = $this->getClipchampTemplatesRequest($GetClipchampTemplatesRequest, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                $response = $e->getResponse();
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            switch($statusCode) {
                case 200:
                    return $this->getResponseContent($request, $response, '\Microsoft\MsAds\Rest\Model\CampaignManagementService\GetClipchampTemplatesResponse');
                case 400:
                    return $this->getResponseContent($request, $response, '\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault');
                case 500:
                    return $this->getResponseContent($request, $response, '\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault');
                case 401:
                    return $this->getResponseContent($request, $response, '\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault');
                case 403:
                    return $this->getResponseContent($request, $response, '\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault');
            }

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            $returnType = '\Microsoft\MsAds\Rest\Model\CampaignManagementService\GetClipchampTemplatesResponse';
            return $this->getResponseContent($request, $response, $returnType);

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Microsoft\MsAds\Rest\Model\CampaignManagementService\GetClipchampTemplatesResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 500:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 403:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getClipchampTemplatesAsync
     *
     * @param  \Microsoft\MsAds\Rest\Model\CampaignManagementService\GetClipchampTemplatesRequest $GetClipchampTemplatesRequest (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getClipchampTemplates'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getClipchampTemplatesAsync($GetClipchampTemplatesRequest, string $contentType = self::contentTypes['getClipchampTemplates'][0])
    {
        return $this->getClipchampTemplatesAsyncWithHttpInfo($GetClipchampTemplatesRequest, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getClipchampTemplatesAsyncWithHttpInfo
     *
     * @param  \Microsoft\MsAds\Rest\Model\CampaignManagementService\GetClipchampTemplatesRequest $GetClipchampTemplatesRequest (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getClipchampTemplates'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getClipchampTemplatesAsyncWithHttpInfo($GetClipchampTemplatesRequest, string $contentType = self::contentTypes['getClipchampTemplates'][0])
    {
        $returnType = '\Microsoft\MsAds\Rest\Model\CampaignManagementService\GetClipchampTemplatesResponse';
        $request = $this->getClipchampTemplatesRequest($GetClipchampTemplatesRequest, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return $this->onFulfilledResponse($response, $returnType);
                },
                function ($exception) {
                    $this->onRejectedResponse($exception);
                }
            );
    }

    /**
     * Create request for operation 'getClipchampTemplates'
     *
     * @param  \Microsoft\MsAds\Rest\Model\CampaignManagementService\GetClipchampTemplatesRequest $GetClipchampTemplatesRequest (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getClipchampTemplates'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function getClipchampTemplatesRequest($GetClipchampTemplatesRequest, string $contentType = self::contentTypes['getClipchampTemplates'][0])
    {

        // verify the required parameter 'GetClipchampTemplatesRequest' is set
        if ($GetClipchampTemplatesRequest === null || (is_array($GetClipchampTemplatesRequest) && count($GetClipchampTemplatesRequest) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $GetClipchampTemplatesRequest when calling getClipchampTemplates'
            );
        }


        $resourcePath = '/CampaignManagement/v13/ClipchampTemplates/Query';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $multipart = false;

        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        return $this->setupAndSendRequest(
            'POST',
            $resourcePath,
            $headers,
            $headerParams,
            $GetClipchampTemplatesRequest,
            $formParams,
            $multipart,
            true,
            true,
            false,
            'getHostSettingsForgetClipchampTemplates',
            null,
            [],
            $queryParams
        );
    }

    /**
     * Operation getConfigValue
     *
     * @param  \Microsoft\MsAds\Rest\Model\CampaignManagementService\GetConfigValueRequest $GetConfigValueRequest GetConfigValueRequest (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getConfigValue'] to see the possible values for this operation
     *
     * @throws \Microsoft\MsAds\Rest\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \Microsoft\MsAds\Rest\Model\CampaignManagementService\GetConfigValueResponse|\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault|\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault|\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault|\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault
     */
    public function getConfigValue($GetConfigValueRequest, string $contentType = self::contentTypes['getConfigValue'][0])
    {
        list($response) = $this->getConfigValueWithHttpInfo($GetConfigValueRequest, $contentType);
        return $response;
    }

    /**
     * Operation getConfigValueWithHttpInfo
     *
     * @param  \Microsoft\MsAds\Rest\Model\CampaignManagementService\GetConfigValueRequest $GetConfigValueRequest (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getConfigValue'] to see the possible values for this operation
     *
     * @throws \Microsoft\MsAds\Rest\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \Microsoft\MsAds\Rest\Model\CampaignManagementService\GetConfigValueResponse|\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault|\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault|\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault|\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault, HTTP status code, HTTP response headers (array of strings)
     */
    public function getConfigValueWithHttpInfo($GetConfigValueRequest, string $contentType = self::contentTypes['getConfigValue'][0])
    {
        $request = $this->getConfigValueRequest($GetConfigValueRequest, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                $response = $e->getResponse();
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            switch($statusCode) {
                case 200:
                    return $this->getResponseContent($request, $response, '\Microsoft\MsAds\Rest\Model\CampaignManagementService\GetConfigValueResponse');
                case 400:
                    return $this->getResponseContent($request, $response, '\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault');
                case 500:
                    return $this->getResponseContent($request, $response, '\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault');
                case 401:
                    return $this->getResponseContent($request, $response, '\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault');
                case 403:
                    return $this->getResponseContent($request, $response, '\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault');
            }

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            $returnType = '\Microsoft\MsAds\Rest\Model\CampaignManagementService\GetConfigValueResponse';
            return $this->getResponseContent($request, $response, $returnType);

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Microsoft\MsAds\Rest\Model\CampaignManagementService\GetConfigValueResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 500:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 403:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getConfigValueAsync
     *
     * @param  \Microsoft\MsAds\Rest\Model\CampaignManagementService\GetConfigValueRequest $GetConfigValueRequest (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getConfigValue'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getConfigValueAsync($GetConfigValueRequest, string $contentType = self::contentTypes['getConfigValue'][0])
    {
        return $this->getConfigValueAsyncWithHttpInfo($GetConfigValueRequest, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getConfigValueAsyncWithHttpInfo
     *
     * @param  \Microsoft\MsAds\Rest\Model\CampaignManagementService\GetConfigValueRequest $GetConfigValueRequest (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getConfigValue'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getConfigValueAsyncWithHttpInfo($GetConfigValueRequest, string $contentType = self::contentTypes['getConfigValue'][0])
    {
        $returnType = '\Microsoft\MsAds\Rest\Model\CampaignManagementService\GetConfigValueResponse';
        $request = $this->getConfigValueRequest($GetConfigValueRequest, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return $this->onFulfilledResponse($response, $returnType);
                },
                function ($exception) {
                    $this->onRejectedResponse($exception);
                }
            );
    }

    /**
     * Create request for operation 'getConfigValue'
     *
     * @param  \Microsoft\MsAds\Rest\Model\CampaignManagementService\GetConfigValueRequest $GetConfigValueRequest (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getConfigValue'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function getConfigValueRequest($GetConfigValueRequest, string $contentType = self::contentTypes['getConfigValue'][0])
    {

        // verify the required parameter 'GetConfigValueRequest' is set
        if ($GetConfigValueRequest === null || (is_array($GetConfigValueRequest) && count($GetConfigValueRequest) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $GetConfigValueRequest when calling getConfigValue'
            );
        }


        $resourcePath = '/CampaignManagement/v13/ConfigValue/Query';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $multipart = false;

        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        return $this->setupAndSendRequest(
            'POST',
            $resourcePath,
            $headers,
            $headerParams,
            $GetConfigValueRequest,
            $formParams,
            $multipart,
            true,
            true,
            false,
            'getHostSettingsForgetConfigValue',
            null,
            [],
            $queryParams
        );
    }

    /**
     * Operation getConversionGoalsByIds
     *
     * @param  \Microsoft\MsAds\Rest\Model\CampaignManagementService\GetConversionGoalsByIdsRequest $GetConversionGoalsByIdsRequest GetConversionGoalsByIdsRequest (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getConversionGoalsByIds'] to see the possible values for this operation
     *
     * @throws \Microsoft\MsAds\Rest\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \Microsoft\MsAds\Rest\Model\CampaignManagementService\GetConversionGoalsByIdsResponse|\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault|\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault|\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault|\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault
     */
    public function getConversionGoalsByIds($GetConversionGoalsByIdsRequest, string $contentType = self::contentTypes['getConversionGoalsByIds'][0])
    {
        list($response) = $this->getConversionGoalsByIdsWithHttpInfo($GetConversionGoalsByIdsRequest, $contentType);
        return $response;
    }

    /**
     * Operation getConversionGoalsByIdsWithHttpInfo
     *
     * @param  \Microsoft\MsAds\Rest\Model\CampaignManagementService\GetConversionGoalsByIdsRequest $GetConversionGoalsByIdsRequest (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getConversionGoalsByIds'] to see the possible values for this operation
     *
     * @throws \Microsoft\MsAds\Rest\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \Microsoft\MsAds\Rest\Model\CampaignManagementService\GetConversionGoalsByIdsResponse|\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault|\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault|\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault|\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault, HTTP status code, HTTP response headers (array of strings)
     */
    public function getConversionGoalsByIdsWithHttpInfo($GetConversionGoalsByIdsRequest, string $contentType = self::contentTypes['getConversionGoalsByIds'][0])
    {
        $request = $this->getConversionGoalsByIdsRequest($GetConversionGoalsByIdsRequest, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                $response = $e->getResponse();
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            switch($statusCode) {
                case 200:
                    return $this->getResponseContent($request, $response, '\Microsoft\MsAds\Rest\Model\CampaignManagementService\GetConversionGoalsByIdsResponse');
                case 400:
                    return $this->getResponseContent($request, $response, '\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault');
                case 500:
                    return $this->getResponseContent($request, $response, '\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault');
                case 401:
                    return $this->getResponseContent($request, $response, '\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault');
                case 403:
                    return $this->getResponseContent($request, $response, '\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault');
            }

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            $returnType = '\Microsoft\MsAds\Rest\Model\CampaignManagementService\GetConversionGoalsByIdsResponse';
            return $this->getResponseContent($request, $response, $returnType);

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Microsoft\MsAds\Rest\Model\CampaignManagementService\GetConversionGoalsByIdsResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 500:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 403:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getConversionGoalsByIdsAsync
     *
     * @param  \Microsoft\MsAds\Rest\Model\CampaignManagementService\GetConversionGoalsByIdsRequest $GetConversionGoalsByIdsRequest (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getConversionGoalsByIds'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getConversionGoalsByIdsAsync($GetConversionGoalsByIdsRequest, string $contentType = self::contentTypes['getConversionGoalsByIds'][0])
    {
        return $this->getConversionGoalsByIdsAsyncWithHttpInfo($GetConversionGoalsByIdsRequest, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getConversionGoalsByIdsAsyncWithHttpInfo
     *
     * @param  \Microsoft\MsAds\Rest\Model\CampaignManagementService\GetConversionGoalsByIdsRequest $GetConversionGoalsByIdsRequest (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getConversionGoalsByIds'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getConversionGoalsByIdsAsyncWithHttpInfo($GetConversionGoalsByIdsRequest, string $contentType = self::contentTypes['getConversionGoalsByIds'][0])
    {
        $returnType = '\Microsoft\MsAds\Rest\Model\CampaignManagementService\GetConversionGoalsByIdsResponse';
        $request = $this->getConversionGoalsByIdsRequest($GetConversionGoalsByIdsRequest, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return $this->onFulfilledResponse($response, $returnType);
                },
                function ($exception) {
                    $this->onRejectedResponse($exception);
                }
            );
    }

    /**
     * Create request for operation 'getConversionGoalsByIds'
     *
     * @param  \Microsoft\MsAds\Rest\Model\CampaignManagementService\GetConversionGoalsByIdsRequest $GetConversionGoalsByIdsRequest (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getConversionGoalsByIds'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function getConversionGoalsByIdsRequest($GetConversionGoalsByIdsRequest, string $contentType = self::contentTypes['getConversionGoalsByIds'][0])
    {

        // verify the required parameter 'GetConversionGoalsByIdsRequest' is set
        if ($GetConversionGoalsByIdsRequest === null || (is_array($GetConversionGoalsByIdsRequest) && count($GetConversionGoalsByIdsRequest) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $GetConversionGoalsByIdsRequest when calling getConversionGoalsByIds'
            );
        }


        $resourcePath = '/CampaignManagement/v13/ConversionGoals/QueryByIds';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $multipart = false;

        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        return $this->setupAndSendRequest(
            'POST',
            $resourcePath,
            $headers,
            $headerParams,
            $GetConversionGoalsByIdsRequest,
            $formParams,
            $multipart,
            true,
            true,
            false,
            'getHostSettingsForgetConversionGoalsByIds',
            null,
            [],
            $queryParams
        );
    }

    /**
     * Operation getConversionGoalsByTagIds
     *
     * @param  \Microsoft\MsAds\Rest\Model\CampaignManagementService\GetConversionGoalsByTagIdsRequest $GetConversionGoalsByTagIdsRequest GetConversionGoalsByTagIdsRequest (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getConversionGoalsByTagIds'] to see the possible values for this operation
     *
     * @throws \Microsoft\MsAds\Rest\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \Microsoft\MsAds\Rest\Model\CampaignManagementService\GetConversionGoalsByTagIdsResponse|\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault|\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault|\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault|\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault
     */
    public function getConversionGoalsByTagIds($GetConversionGoalsByTagIdsRequest, string $contentType = self::contentTypes['getConversionGoalsByTagIds'][0])
    {
        list($response) = $this->getConversionGoalsByTagIdsWithHttpInfo($GetConversionGoalsByTagIdsRequest, $contentType);
        return $response;
    }

    /**
     * Operation getConversionGoalsByTagIdsWithHttpInfo
     *
     * @param  \Microsoft\MsAds\Rest\Model\CampaignManagementService\GetConversionGoalsByTagIdsRequest $GetConversionGoalsByTagIdsRequest (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getConversionGoalsByTagIds'] to see the possible values for this operation
     *
     * @throws \Microsoft\MsAds\Rest\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \Microsoft\MsAds\Rest\Model\CampaignManagementService\GetConversionGoalsByTagIdsResponse|\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault|\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault|\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault|\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault, HTTP status code, HTTP response headers (array of strings)
     */
    public function getConversionGoalsByTagIdsWithHttpInfo($GetConversionGoalsByTagIdsRequest, string $contentType = self::contentTypes['getConversionGoalsByTagIds'][0])
    {
        $request = $this->getConversionGoalsByTagIdsRequest($GetConversionGoalsByTagIdsRequest, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                $response = $e->getResponse();
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            switch($statusCode) {
                case 200:
                    return $this->getResponseContent($request, $response, '\Microsoft\MsAds\Rest\Model\CampaignManagementService\GetConversionGoalsByTagIdsResponse');
                case 400:
                    return $this->getResponseContent($request, $response, '\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault');
                case 500:
                    return $this->getResponseContent($request, $response, '\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault');
                case 401:
                    return $this->getResponseContent($request, $response, '\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault');
                case 403:
                    return $this->getResponseContent($request, $response, '\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault');
            }

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            $returnType = '\Microsoft\MsAds\Rest\Model\CampaignManagementService\GetConversionGoalsByTagIdsResponse';
            return $this->getResponseContent($request, $response, $returnType);

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Microsoft\MsAds\Rest\Model\CampaignManagementService\GetConversionGoalsByTagIdsResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 500:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 403:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getConversionGoalsByTagIdsAsync
     *
     * @param  \Microsoft\MsAds\Rest\Model\CampaignManagementService\GetConversionGoalsByTagIdsRequest $GetConversionGoalsByTagIdsRequest (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getConversionGoalsByTagIds'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getConversionGoalsByTagIdsAsync($GetConversionGoalsByTagIdsRequest, string $contentType = self::contentTypes['getConversionGoalsByTagIds'][0])
    {
        return $this->getConversionGoalsByTagIdsAsyncWithHttpInfo($GetConversionGoalsByTagIdsRequest, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getConversionGoalsByTagIdsAsyncWithHttpInfo
     *
     * @param  \Microsoft\MsAds\Rest\Model\CampaignManagementService\GetConversionGoalsByTagIdsRequest $GetConversionGoalsByTagIdsRequest (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getConversionGoalsByTagIds'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getConversionGoalsByTagIdsAsyncWithHttpInfo($GetConversionGoalsByTagIdsRequest, string $contentType = self::contentTypes['getConversionGoalsByTagIds'][0])
    {
        $returnType = '\Microsoft\MsAds\Rest\Model\CampaignManagementService\GetConversionGoalsByTagIdsResponse';
        $request = $this->getConversionGoalsByTagIdsRequest($GetConversionGoalsByTagIdsRequest, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return $this->onFulfilledResponse($response, $returnType);
                },
                function ($exception) {
                    $this->onRejectedResponse($exception);
                }
            );
    }

    /**
     * Create request for operation 'getConversionGoalsByTagIds'
     *
     * @param  \Microsoft\MsAds\Rest\Model\CampaignManagementService\GetConversionGoalsByTagIdsRequest $GetConversionGoalsByTagIdsRequest (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getConversionGoalsByTagIds'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function getConversionGoalsByTagIdsRequest($GetConversionGoalsByTagIdsRequest, string $contentType = self::contentTypes['getConversionGoalsByTagIds'][0])
    {

        // verify the required parameter 'GetConversionGoalsByTagIdsRequest' is set
        if ($GetConversionGoalsByTagIdsRequest === null || (is_array($GetConversionGoalsByTagIdsRequest) && count($GetConversionGoalsByTagIdsRequest) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $GetConversionGoalsByTagIdsRequest when calling getConversionGoalsByTagIds'
            );
        }


        $resourcePath = '/CampaignManagement/v13/ConversionGoals/QueryByTagIds';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $multipart = false;

        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        return $this->setupAndSendRequest(
            'POST',
            $resourcePath,
            $headers,
            $headerParams,
            $GetConversionGoalsByTagIdsRequest,
            $formParams,
            $multipart,
            true,
            true,
            false,
            'getHostSettingsForgetConversionGoalsByTagIds',
            null,
            [],
            $queryParams
        );
    }

    /**
     * Operation getConversionValueRulesByAccountId
     *
     * @param  \Microsoft\MsAds\Rest\Model\CampaignManagementService\GetConversionValueRulesByAccountIdRequest $GetConversionValueRulesByAccountIdRequest GetConversionValueRulesByAccountIdRequest (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getConversionValueRulesByAccountId'] to see the possible values for this operation
     *
     * @throws \Microsoft\MsAds\Rest\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \Microsoft\MsAds\Rest\Model\CampaignManagementService\GetConversionValueRulesByAccountIdResponse|\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault|\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault|\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault|\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault
     */
    public function getConversionValueRulesByAccountId($GetConversionValueRulesByAccountIdRequest, string $contentType = self::contentTypes['getConversionValueRulesByAccountId'][0])
    {
        list($response) = $this->getConversionValueRulesByAccountIdWithHttpInfo($GetConversionValueRulesByAccountIdRequest, $contentType);
        return $response;
    }

    /**
     * Operation getConversionValueRulesByAccountIdWithHttpInfo
     *
     * @param  \Microsoft\MsAds\Rest\Model\CampaignManagementService\GetConversionValueRulesByAccountIdRequest $GetConversionValueRulesByAccountIdRequest (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getConversionValueRulesByAccountId'] to see the possible values for this operation
     *
     * @throws \Microsoft\MsAds\Rest\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \Microsoft\MsAds\Rest\Model\CampaignManagementService\GetConversionValueRulesByAccountIdResponse|\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault|\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault|\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault|\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault, HTTP status code, HTTP response headers (array of strings)
     */
    public function getConversionValueRulesByAccountIdWithHttpInfo($GetConversionValueRulesByAccountIdRequest, string $contentType = self::contentTypes['getConversionValueRulesByAccountId'][0])
    {
        $request = $this->getConversionValueRulesByAccountIdRequest($GetConversionValueRulesByAccountIdRequest, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                $response = $e->getResponse();
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            switch($statusCode) {
                case 200:
                    return $this->getResponseContent($request, $response, '\Microsoft\MsAds\Rest\Model\CampaignManagementService\GetConversionValueRulesByAccountIdResponse');
                case 400:
                    return $this->getResponseContent($request, $response, '\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault');
                case 500:
                    return $this->getResponseContent($request, $response, '\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault');
                case 401:
                    return $this->getResponseContent($request, $response, '\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault');
                case 403:
                    return $this->getResponseContent($request, $response, '\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault');
            }

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            $returnType = '\Microsoft\MsAds\Rest\Model\CampaignManagementService\GetConversionValueRulesByAccountIdResponse';
            return $this->getResponseContent($request, $response, $returnType);

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Microsoft\MsAds\Rest\Model\CampaignManagementService\GetConversionValueRulesByAccountIdResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 500:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 403:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getConversionValueRulesByAccountIdAsync
     *
     * @param  \Microsoft\MsAds\Rest\Model\CampaignManagementService\GetConversionValueRulesByAccountIdRequest $GetConversionValueRulesByAccountIdRequest (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getConversionValueRulesByAccountId'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getConversionValueRulesByAccountIdAsync($GetConversionValueRulesByAccountIdRequest, string $contentType = self::contentTypes['getConversionValueRulesByAccountId'][0])
    {
        return $this->getConversionValueRulesByAccountIdAsyncWithHttpInfo($GetConversionValueRulesByAccountIdRequest, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getConversionValueRulesByAccountIdAsyncWithHttpInfo
     *
     * @param  \Microsoft\MsAds\Rest\Model\CampaignManagementService\GetConversionValueRulesByAccountIdRequest $GetConversionValueRulesByAccountIdRequest (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getConversionValueRulesByAccountId'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getConversionValueRulesByAccountIdAsyncWithHttpInfo($GetConversionValueRulesByAccountIdRequest, string $contentType = self::contentTypes['getConversionValueRulesByAccountId'][0])
    {
        $returnType = '\Microsoft\MsAds\Rest\Model\CampaignManagementService\GetConversionValueRulesByAccountIdResponse';
        $request = $this->getConversionValueRulesByAccountIdRequest($GetConversionValueRulesByAccountIdRequest, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return $this->onFulfilledResponse($response, $returnType);
                },
                function ($exception) {
                    $this->onRejectedResponse($exception);
                }
            );
    }

    /**
     * Create request for operation 'getConversionValueRulesByAccountId'
     *
     * @param  \Microsoft\MsAds\Rest\Model\CampaignManagementService\GetConversionValueRulesByAccountIdRequest $GetConversionValueRulesByAccountIdRequest (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getConversionValueRulesByAccountId'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function getConversionValueRulesByAccountIdRequest($GetConversionValueRulesByAccountIdRequest, string $contentType = self::contentTypes['getConversionValueRulesByAccountId'][0])
    {

        // verify the required parameter 'GetConversionValueRulesByAccountIdRequest' is set
        if ($GetConversionValueRulesByAccountIdRequest === null || (is_array($GetConversionValueRulesByAccountIdRequest) && count($GetConversionValueRulesByAccountIdRequest) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $GetConversionValueRulesByAccountIdRequest when calling getConversionValueRulesByAccountId'
            );
        }


        $resourcePath = '/CampaignManagement/v13/ConversionValueRules/QueryByAccountId';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $multipart = false;

        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        return $this->setupAndSendRequest(
            'POST',
            $resourcePath,
            $headers,
            $headerParams,
            $GetConversionValueRulesByAccountIdRequest,
            $formParams,
            $multipart,
            true,
            true,
            false,
            'getHostSettingsForgetConversionValueRulesByAccountId',
            null,
            [],
            $queryParams
        );
    }

    /**
     * Operation getConversionValueRulesByIds
     *
     * @param  \Microsoft\MsAds\Rest\Model\CampaignManagementService\GetConversionValueRulesByIdsRequest $GetConversionValueRulesByIdsRequest GetConversionValueRulesByIdsRequest (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getConversionValueRulesByIds'] to see the possible values for this operation
     *
     * @throws \Microsoft\MsAds\Rest\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \Microsoft\MsAds\Rest\Model\CampaignManagementService\GetConversionValueRulesByIdsResponse|\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault|\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault|\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault|\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault
     */
    public function getConversionValueRulesByIds($GetConversionValueRulesByIdsRequest, string $contentType = self::contentTypes['getConversionValueRulesByIds'][0])
    {
        list($response) = $this->getConversionValueRulesByIdsWithHttpInfo($GetConversionValueRulesByIdsRequest, $contentType);
        return $response;
    }

    /**
     * Operation getConversionValueRulesByIdsWithHttpInfo
     *
     * @param  \Microsoft\MsAds\Rest\Model\CampaignManagementService\GetConversionValueRulesByIdsRequest $GetConversionValueRulesByIdsRequest (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getConversionValueRulesByIds'] to see the possible values for this operation
     *
     * @throws \Microsoft\MsAds\Rest\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \Microsoft\MsAds\Rest\Model\CampaignManagementService\GetConversionValueRulesByIdsResponse|\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault|\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault|\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault|\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault, HTTP status code, HTTP response headers (array of strings)
     */
    public function getConversionValueRulesByIdsWithHttpInfo($GetConversionValueRulesByIdsRequest, string $contentType = self::contentTypes['getConversionValueRulesByIds'][0])
    {
        $request = $this->getConversionValueRulesByIdsRequest($GetConversionValueRulesByIdsRequest, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                $response = $e->getResponse();
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            switch($statusCode) {
                case 200:
                    return $this->getResponseContent($request, $response, '\Microsoft\MsAds\Rest\Model\CampaignManagementService\GetConversionValueRulesByIdsResponse');
                case 400:
                    return $this->getResponseContent($request, $response, '\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault');
                case 500:
                    return $this->getResponseContent($request, $response, '\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault');
                case 401:
                    return $this->getResponseContent($request, $response, '\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault');
                case 403:
                    return $this->getResponseContent($request, $response, '\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault');
            }

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            $returnType = '\Microsoft\MsAds\Rest\Model\CampaignManagementService\GetConversionValueRulesByIdsResponse';
            return $this->getResponseContent($request, $response, $returnType);

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Microsoft\MsAds\Rest\Model\CampaignManagementService\GetConversionValueRulesByIdsResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 500:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 403:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getConversionValueRulesByIdsAsync
     *
     * @param  \Microsoft\MsAds\Rest\Model\CampaignManagementService\GetConversionValueRulesByIdsRequest $GetConversionValueRulesByIdsRequest (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getConversionValueRulesByIds'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getConversionValueRulesByIdsAsync($GetConversionValueRulesByIdsRequest, string $contentType = self::contentTypes['getConversionValueRulesByIds'][0])
    {
        return $this->getConversionValueRulesByIdsAsyncWithHttpInfo($GetConversionValueRulesByIdsRequest, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getConversionValueRulesByIdsAsyncWithHttpInfo
     *
     * @param  \Microsoft\MsAds\Rest\Model\CampaignManagementService\GetConversionValueRulesByIdsRequest $GetConversionValueRulesByIdsRequest (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getConversionValueRulesByIds'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getConversionValueRulesByIdsAsyncWithHttpInfo($GetConversionValueRulesByIdsRequest, string $contentType = self::contentTypes['getConversionValueRulesByIds'][0])
    {
        $returnType = '\Microsoft\MsAds\Rest\Model\CampaignManagementService\GetConversionValueRulesByIdsResponse';
        $request = $this->getConversionValueRulesByIdsRequest($GetConversionValueRulesByIdsRequest, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return $this->onFulfilledResponse($response, $returnType);
                },
                function ($exception) {
                    $this->onRejectedResponse($exception);
                }
            );
    }

    /**
     * Create request for operation 'getConversionValueRulesByIds'
     *
     * @param  \Microsoft\MsAds\Rest\Model\CampaignManagementService\GetConversionValueRulesByIdsRequest $GetConversionValueRulesByIdsRequest (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getConversionValueRulesByIds'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function getConversionValueRulesByIdsRequest($GetConversionValueRulesByIdsRequest, string $contentType = self::contentTypes['getConversionValueRulesByIds'][0])
    {

        // verify the required parameter 'GetConversionValueRulesByIdsRequest' is set
        if ($GetConversionValueRulesByIdsRequest === null || (is_array($GetConversionValueRulesByIdsRequest) && count($GetConversionValueRulesByIdsRequest) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $GetConversionValueRulesByIdsRequest when calling getConversionValueRulesByIds'
            );
        }


        $resourcePath = '/CampaignManagement/v13/ConversionValueRules/QueryByIds';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $multipart = false;

        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        return $this->setupAndSendRequest(
            'POST',
            $resourcePath,
            $headers,
            $headerParams,
            $GetConversionValueRulesByIdsRequest,
            $formParams,
            $multipart,
            true,
            true,
            false,
            'getHostSettingsForgetConversionValueRulesByIds',
            null,
            [],
            $queryParams
        );
    }

    /**
     * Operation getDataExclusionsByAccountId
     *
     * @param  \Microsoft\MsAds\Rest\Model\CampaignManagementService\GetDataExclusionsByAccountIdRequest $GetDataExclusionsByAccountIdRequest GetDataExclusionsByAccountIdRequest (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getDataExclusionsByAccountId'] to see the possible values for this operation
     *
     * @throws \Microsoft\MsAds\Rest\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \Microsoft\MsAds\Rest\Model\CampaignManagementService\GetDataExclusionsByAccountIdResponse|\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault|\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault|\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault|\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault
     */
    public function getDataExclusionsByAccountId($GetDataExclusionsByAccountIdRequest, string $contentType = self::contentTypes['getDataExclusionsByAccountId'][0])
    {
        list($response) = $this->getDataExclusionsByAccountIdWithHttpInfo($GetDataExclusionsByAccountIdRequest, $contentType);
        return $response;
    }

    /**
     * Operation getDataExclusionsByAccountIdWithHttpInfo
     *
     * @param  \Microsoft\MsAds\Rest\Model\CampaignManagementService\GetDataExclusionsByAccountIdRequest $GetDataExclusionsByAccountIdRequest (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getDataExclusionsByAccountId'] to see the possible values for this operation
     *
     * @throws \Microsoft\MsAds\Rest\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \Microsoft\MsAds\Rest\Model\CampaignManagementService\GetDataExclusionsByAccountIdResponse|\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault|\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault|\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault|\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault, HTTP status code, HTTP response headers (array of strings)
     */
    public function getDataExclusionsByAccountIdWithHttpInfo($GetDataExclusionsByAccountIdRequest, string $contentType = self::contentTypes['getDataExclusionsByAccountId'][0])
    {
        $request = $this->getDataExclusionsByAccountIdRequest($GetDataExclusionsByAccountIdRequest, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                $response = $e->getResponse();
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            switch($statusCode) {
                case 200:
                    return $this->getResponseContent($request, $response, '\Microsoft\MsAds\Rest\Model\CampaignManagementService\GetDataExclusionsByAccountIdResponse');
                case 400:
                    return $this->getResponseContent($request, $response, '\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault');
                case 500:
                    return $this->getResponseContent($request, $response, '\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault');
                case 401:
                    return $this->getResponseContent($request, $response, '\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault');
                case 403:
                    return $this->getResponseContent($request, $response, '\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault');
            }

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            $returnType = '\Microsoft\MsAds\Rest\Model\CampaignManagementService\GetDataExclusionsByAccountIdResponse';
            return $this->getResponseContent($request, $response, $returnType);

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Microsoft\MsAds\Rest\Model\CampaignManagementService\GetDataExclusionsByAccountIdResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 500:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 403:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getDataExclusionsByAccountIdAsync
     *
     * @param  \Microsoft\MsAds\Rest\Model\CampaignManagementService\GetDataExclusionsByAccountIdRequest $GetDataExclusionsByAccountIdRequest (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getDataExclusionsByAccountId'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getDataExclusionsByAccountIdAsync($GetDataExclusionsByAccountIdRequest, string $contentType = self::contentTypes['getDataExclusionsByAccountId'][0])
    {
        return $this->getDataExclusionsByAccountIdAsyncWithHttpInfo($GetDataExclusionsByAccountIdRequest, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getDataExclusionsByAccountIdAsyncWithHttpInfo
     *
     * @param  \Microsoft\MsAds\Rest\Model\CampaignManagementService\GetDataExclusionsByAccountIdRequest $GetDataExclusionsByAccountIdRequest (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getDataExclusionsByAccountId'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getDataExclusionsByAccountIdAsyncWithHttpInfo($GetDataExclusionsByAccountIdRequest, string $contentType = self::contentTypes['getDataExclusionsByAccountId'][0])
    {
        $returnType = '\Microsoft\MsAds\Rest\Model\CampaignManagementService\GetDataExclusionsByAccountIdResponse';
        $request = $this->getDataExclusionsByAccountIdRequest($GetDataExclusionsByAccountIdRequest, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return $this->onFulfilledResponse($response, $returnType);
                },
                function ($exception) {
                    $this->onRejectedResponse($exception);
                }
            );
    }

    /**
     * Create request for operation 'getDataExclusionsByAccountId'
     *
     * @param  \Microsoft\MsAds\Rest\Model\CampaignManagementService\GetDataExclusionsByAccountIdRequest $GetDataExclusionsByAccountIdRequest (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getDataExclusionsByAccountId'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function getDataExclusionsByAccountIdRequest($GetDataExclusionsByAccountIdRequest, string $contentType = self::contentTypes['getDataExclusionsByAccountId'][0])
    {

        // verify the required parameter 'GetDataExclusionsByAccountIdRequest' is set
        if ($GetDataExclusionsByAccountIdRequest === null || (is_array($GetDataExclusionsByAccountIdRequest) && count($GetDataExclusionsByAccountIdRequest) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $GetDataExclusionsByAccountIdRequest when calling getDataExclusionsByAccountId'
            );
        }


        $resourcePath = '/CampaignManagement/v13/DataExclusions/QueryByAccountId';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $multipart = false;

        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        return $this->setupAndSendRequest(
            'POST',
            $resourcePath,
            $headers,
            $headerParams,
            $GetDataExclusionsByAccountIdRequest,
            $formParams,
            $multipart,
            true,
            true,
            false,
            'getHostSettingsForgetDataExclusionsByAccountId',
            null,
            [],
            $queryParams
        );
    }

    /**
     * Operation getDataExclusionsByIds
     *
     * @param  \Microsoft\MsAds\Rest\Model\CampaignManagementService\GetDataExclusionsByIdsRequest $GetDataExclusionsByIdsRequest GetDataExclusionsByIdsRequest (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getDataExclusionsByIds'] to see the possible values for this operation
     *
     * @throws \Microsoft\MsAds\Rest\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \Microsoft\MsAds\Rest\Model\CampaignManagementService\GetDataExclusionsByIdsResponse|\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault|\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault|\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault|\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault
     */
    public function getDataExclusionsByIds($GetDataExclusionsByIdsRequest, string $contentType = self::contentTypes['getDataExclusionsByIds'][0])
    {
        list($response) = $this->getDataExclusionsByIdsWithHttpInfo($GetDataExclusionsByIdsRequest, $contentType);
        return $response;
    }

    /**
     * Operation getDataExclusionsByIdsWithHttpInfo
     *
     * @param  \Microsoft\MsAds\Rest\Model\CampaignManagementService\GetDataExclusionsByIdsRequest $GetDataExclusionsByIdsRequest (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getDataExclusionsByIds'] to see the possible values for this operation
     *
     * @throws \Microsoft\MsAds\Rest\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \Microsoft\MsAds\Rest\Model\CampaignManagementService\GetDataExclusionsByIdsResponse|\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault|\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault|\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault|\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault, HTTP status code, HTTP response headers (array of strings)
     */
    public function getDataExclusionsByIdsWithHttpInfo($GetDataExclusionsByIdsRequest, string $contentType = self::contentTypes['getDataExclusionsByIds'][0])
    {
        $request = $this->getDataExclusionsByIdsRequest($GetDataExclusionsByIdsRequest, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                $response = $e->getResponse();
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            switch($statusCode) {
                case 200:
                    return $this->getResponseContent($request, $response, '\Microsoft\MsAds\Rest\Model\CampaignManagementService\GetDataExclusionsByIdsResponse');
                case 400:
                    return $this->getResponseContent($request, $response, '\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault');
                case 500:
                    return $this->getResponseContent($request, $response, '\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault');
                case 401:
                    return $this->getResponseContent($request, $response, '\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault');
                case 403:
                    return $this->getResponseContent($request, $response, '\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault');
            }

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            $returnType = '\Microsoft\MsAds\Rest\Model\CampaignManagementService\GetDataExclusionsByIdsResponse';
            return $this->getResponseContent($request, $response, $returnType);

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Microsoft\MsAds\Rest\Model\CampaignManagementService\GetDataExclusionsByIdsResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 500:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 403:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getDataExclusionsByIdsAsync
     *
     * @param  \Microsoft\MsAds\Rest\Model\CampaignManagementService\GetDataExclusionsByIdsRequest $GetDataExclusionsByIdsRequest (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getDataExclusionsByIds'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getDataExclusionsByIdsAsync($GetDataExclusionsByIdsRequest, string $contentType = self::contentTypes['getDataExclusionsByIds'][0])
    {
        return $this->getDataExclusionsByIdsAsyncWithHttpInfo($GetDataExclusionsByIdsRequest, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getDataExclusionsByIdsAsyncWithHttpInfo
     *
     * @param  \Microsoft\MsAds\Rest\Model\CampaignManagementService\GetDataExclusionsByIdsRequest $GetDataExclusionsByIdsRequest (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getDataExclusionsByIds'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getDataExclusionsByIdsAsyncWithHttpInfo($GetDataExclusionsByIdsRequest, string $contentType = self::contentTypes['getDataExclusionsByIds'][0])
    {
        $returnType = '\Microsoft\MsAds\Rest\Model\CampaignManagementService\GetDataExclusionsByIdsResponse';
        $request = $this->getDataExclusionsByIdsRequest($GetDataExclusionsByIdsRequest, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return $this->onFulfilledResponse($response, $returnType);
                },
                function ($exception) {
                    $this->onRejectedResponse($exception);
                }
            );
    }

    /**
     * Create request for operation 'getDataExclusionsByIds'
     *
     * @param  \Microsoft\MsAds\Rest\Model\CampaignManagementService\GetDataExclusionsByIdsRequest $GetDataExclusionsByIdsRequest (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getDataExclusionsByIds'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function getDataExclusionsByIdsRequest($GetDataExclusionsByIdsRequest, string $contentType = self::contentTypes['getDataExclusionsByIds'][0])
    {

        // verify the required parameter 'GetDataExclusionsByIdsRequest' is set
        if ($GetDataExclusionsByIdsRequest === null || (is_array($GetDataExclusionsByIdsRequest) && count($GetDataExclusionsByIdsRequest) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $GetDataExclusionsByIdsRequest when calling getDataExclusionsByIds'
            );
        }


        $resourcePath = '/CampaignManagement/v13/DataExclusions/QueryByIds';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $multipart = false;

        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        return $this->setupAndSendRequest(
            'POST',
            $resourcePath,
            $headers,
            $headerParams,
            $GetDataExclusionsByIdsRequest,
            $formParams,
            $multipart,
            true,
            true,
            false,
            'getHostSettingsForgetDataExclusionsByIds',
            null,
            [],
            $queryParams
        );
    }

    /**
     * Operation getEditorialReasonsByIds
     *
     * @param  \Microsoft\MsAds\Rest\Model\CampaignManagementService\GetEditorialReasonsByIdsRequest $GetEditorialReasonsByIdsRequest GetEditorialReasonsByIdsRequest (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getEditorialReasonsByIds'] to see the possible values for this operation
     *
     * @throws \Microsoft\MsAds\Rest\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \Microsoft\MsAds\Rest\Model\CampaignManagementService\GetEditorialReasonsByIdsResponse|\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault|\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault|\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault|\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault
     */
    public function getEditorialReasonsByIds($GetEditorialReasonsByIdsRequest, string $contentType = self::contentTypes['getEditorialReasonsByIds'][0])
    {
        list($response) = $this->getEditorialReasonsByIdsWithHttpInfo($GetEditorialReasonsByIdsRequest, $contentType);
        return $response;
    }

    /**
     * Operation getEditorialReasonsByIdsWithHttpInfo
     *
     * @param  \Microsoft\MsAds\Rest\Model\CampaignManagementService\GetEditorialReasonsByIdsRequest $GetEditorialReasonsByIdsRequest (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getEditorialReasonsByIds'] to see the possible values for this operation
     *
     * @throws \Microsoft\MsAds\Rest\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \Microsoft\MsAds\Rest\Model\CampaignManagementService\GetEditorialReasonsByIdsResponse|\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault|\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault|\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault|\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault, HTTP status code, HTTP response headers (array of strings)
     */
    public function getEditorialReasonsByIdsWithHttpInfo($GetEditorialReasonsByIdsRequest, string $contentType = self::contentTypes['getEditorialReasonsByIds'][0])
    {
        $request = $this->getEditorialReasonsByIdsRequest($GetEditorialReasonsByIdsRequest, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                $response = $e->getResponse();
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            switch($statusCode) {
                case 200:
                    return $this->getResponseContent($request, $response, '\Microsoft\MsAds\Rest\Model\CampaignManagementService\GetEditorialReasonsByIdsResponse');
                case 400:
                    return $this->getResponseContent($request, $response, '\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault');
                case 500:
                    return $this->getResponseContent($request, $response, '\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault');
                case 401:
                    return $this->getResponseContent($request, $response, '\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault');
                case 403:
                    return $this->getResponseContent($request, $response, '\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault');
            }

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            $returnType = '\Microsoft\MsAds\Rest\Model\CampaignManagementService\GetEditorialReasonsByIdsResponse';
            return $this->getResponseContent($request, $response, $returnType);

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Microsoft\MsAds\Rest\Model\CampaignManagementService\GetEditorialReasonsByIdsResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 500:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 403:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getEditorialReasonsByIdsAsync
     *
     * @param  \Microsoft\MsAds\Rest\Model\CampaignManagementService\GetEditorialReasonsByIdsRequest $GetEditorialReasonsByIdsRequest (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getEditorialReasonsByIds'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getEditorialReasonsByIdsAsync($GetEditorialReasonsByIdsRequest, string $contentType = self::contentTypes['getEditorialReasonsByIds'][0])
    {
        return $this->getEditorialReasonsByIdsAsyncWithHttpInfo($GetEditorialReasonsByIdsRequest, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getEditorialReasonsByIdsAsyncWithHttpInfo
     *
     * @param  \Microsoft\MsAds\Rest\Model\CampaignManagementService\GetEditorialReasonsByIdsRequest $GetEditorialReasonsByIdsRequest (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getEditorialReasonsByIds'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getEditorialReasonsByIdsAsyncWithHttpInfo($GetEditorialReasonsByIdsRequest, string $contentType = self::contentTypes['getEditorialReasonsByIds'][0])
    {
        $returnType = '\Microsoft\MsAds\Rest\Model\CampaignManagementService\GetEditorialReasonsByIdsResponse';
        $request = $this->getEditorialReasonsByIdsRequest($GetEditorialReasonsByIdsRequest, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return $this->onFulfilledResponse($response, $returnType);
                },
                function ($exception) {
                    $this->onRejectedResponse($exception);
                }
            );
    }

    /**
     * Create request for operation 'getEditorialReasonsByIds'
     *
     * @param  \Microsoft\MsAds\Rest\Model\CampaignManagementService\GetEditorialReasonsByIdsRequest $GetEditorialReasonsByIdsRequest (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getEditorialReasonsByIds'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function getEditorialReasonsByIdsRequest($GetEditorialReasonsByIdsRequest, string $contentType = self::contentTypes['getEditorialReasonsByIds'][0])
    {

        // verify the required parameter 'GetEditorialReasonsByIdsRequest' is set
        if ($GetEditorialReasonsByIdsRequest === null || (is_array($GetEditorialReasonsByIdsRequest) && count($GetEditorialReasonsByIdsRequest) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $GetEditorialReasonsByIdsRequest when calling getEditorialReasonsByIds'
            );
        }


        $resourcePath = '/CampaignManagement/v13/EditorialReasons/QueryByIds';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $multipart = false;

        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        return $this->setupAndSendRequest(
            'POST',
            $resourcePath,
            $headers,
            $headerParams,
            $GetEditorialReasonsByIdsRequest,
            $formParams,
            $multipart,
            true,
            true,
            false,
            'getHostSettingsForgetEditorialReasonsByIds',
            null,
            [],
            $queryParams
        );
    }

    /**
     * Operation getExperimentsByIds
     *
     * @param  \Microsoft\MsAds\Rest\Model\CampaignManagementService\GetExperimentsByIdsRequest $GetExperimentsByIdsRequest GetExperimentsByIdsRequest (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getExperimentsByIds'] to see the possible values for this operation
     *
     * @throws \Microsoft\MsAds\Rest\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \Microsoft\MsAds\Rest\Model\CampaignManagementService\GetExperimentsByIdsResponse|\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault|\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault|\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault|\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault
     */
    public function getExperimentsByIds($GetExperimentsByIdsRequest, string $contentType = self::contentTypes['getExperimentsByIds'][0])
    {
        list($response) = $this->getExperimentsByIdsWithHttpInfo($GetExperimentsByIdsRequest, $contentType);
        return $response;
    }

    /**
     * Operation getExperimentsByIdsWithHttpInfo
     *
     * @param  \Microsoft\MsAds\Rest\Model\CampaignManagementService\GetExperimentsByIdsRequest $GetExperimentsByIdsRequest (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getExperimentsByIds'] to see the possible values for this operation
     *
     * @throws \Microsoft\MsAds\Rest\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \Microsoft\MsAds\Rest\Model\CampaignManagementService\GetExperimentsByIdsResponse|\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault|\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault|\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault|\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault, HTTP status code, HTTP response headers (array of strings)
     */
    public function getExperimentsByIdsWithHttpInfo($GetExperimentsByIdsRequest, string $contentType = self::contentTypes['getExperimentsByIds'][0])
    {
        $request = $this->getExperimentsByIdsRequest($GetExperimentsByIdsRequest, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                $response = $e->getResponse();
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            switch($statusCode) {
                case 200:
                    return $this->getResponseContent($request, $response, '\Microsoft\MsAds\Rest\Model\CampaignManagementService\GetExperimentsByIdsResponse');
                case 400:
                    return $this->getResponseContent($request, $response, '\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault');
                case 500:
                    return $this->getResponseContent($request, $response, '\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault');
                case 401:
                    return $this->getResponseContent($request, $response, '\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault');
                case 403:
                    return $this->getResponseContent($request, $response, '\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault');
            }

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            $returnType = '\Microsoft\MsAds\Rest\Model\CampaignManagementService\GetExperimentsByIdsResponse';
            return $this->getResponseContent($request, $response, $returnType);

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Microsoft\MsAds\Rest\Model\CampaignManagementService\GetExperimentsByIdsResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 500:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 403:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getExperimentsByIdsAsync
     *
     * @param  \Microsoft\MsAds\Rest\Model\CampaignManagementService\GetExperimentsByIdsRequest $GetExperimentsByIdsRequest (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getExperimentsByIds'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getExperimentsByIdsAsync($GetExperimentsByIdsRequest, string $contentType = self::contentTypes['getExperimentsByIds'][0])
    {
        return $this->getExperimentsByIdsAsyncWithHttpInfo($GetExperimentsByIdsRequest, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getExperimentsByIdsAsyncWithHttpInfo
     *
     * @param  \Microsoft\MsAds\Rest\Model\CampaignManagementService\GetExperimentsByIdsRequest $GetExperimentsByIdsRequest (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getExperimentsByIds'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getExperimentsByIdsAsyncWithHttpInfo($GetExperimentsByIdsRequest, string $contentType = self::contentTypes['getExperimentsByIds'][0])
    {
        $returnType = '\Microsoft\MsAds\Rest\Model\CampaignManagementService\GetExperimentsByIdsResponse';
        $request = $this->getExperimentsByIdsRequest($GetExperimentsByIdsRequest, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return $this->onFulfilledResponse($response, $returnType);
                },
                function ($exception) {
                    $this->onRejectedResponse($exception);
                }
            );
    }

    /**
     * Create request for operation 'getExperimentsByIds'
     *
     * @param  \Microsoft\MsAds\Rest\Model\CampaignManagementService\GetExperimentsByIdsRequest $GetExperimentsByIdsRequest (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getExperimentsByIds'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function getExperimentsByIdsRequest($GetExperimentsByIdsRequest, string $contentType = self::contentTypes['getExperimentsByIds'][0])
    {

        // verify the required parameter 'GetExperimentsByIdsRequest' is set
        if ($GetExperimentsByIdsRequest === null || (is_array($GetExperimentsByIdsRequest) && count($GetExperimentsByIdsRequest) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $GetExperimentsByIdsRequest when calling getExperimentsByIds'
            );
        }


        $resourcePath = '/CampaignManagement/v13/Experiments/QueryByIds';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $multipart = false;

        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        return $this->setupAndSendRequest(
            'POST',
            $resourcePath,
            $headers,
            $headerParams,
            $GetExperimentsByIdsRequest,
            $formParams,
            $multipart,
            true,
            true,
            false,
            'getHostSettingsForgetExperimentsByIds',
            null,
            [],
            $queryParams
        );
    }

    /**
     * Operation getFileImportUploadUrl
     *
     * @param  object $Body Body (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getFileImportUploadUrl'] to see the possible values for this operation
     *
     * @throws \Microsoft\MsAds\Rest\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \Microsoft\MsAds\Rest\Model\CampaignManagementService\GetFileImportUploadUrlResponse|\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault|\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault|\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault|\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault
     */
    public function getFileImportUploadUrl($Body, string $contentType = self::contentTypes['getFileImportUploadUrl'][0])
    {
        list($response) = $this->getFileImportUploadUrlWithHttpInfo($Body, $contentType);
        return $response;
    }

    /**
     * Operation getFileImportUploadUrlWithHttpInfo
     *
     * @param  object $Body (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getFileImportUploadUrl'] to see the possible values for this operation
     *
     * @throws \Microsoft\MsAds\Rest\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \Microsoft\MsAds\Rest\Model\CampaignManagementService\GetFileImportUploadUrlResponse|\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault|\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault|\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault|\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault, HTTP status code, HTTP response headers (array of strings)
     */
    public function getFileImportUploadUrlWithHttpInfo($Body, string $contentType = self::contentTypes['getFileImportUploadUrl'][0])
    {
        $request = $this->getFileImportUploadUrlRequest($Body, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                $response = $e->getResponse();
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            switch($statusCode) {
                case 200:
                    return $this->getResponseContent($request, $response, '\Microsoft\MsAds\Rest\Model\CampaignManagementService\GetFileImportUploadUrlResponse');
                case 400:
                    return $this->getResponseContent($request, $response, '\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault');
                case 500:
                    return $this->getResponseContent($request, $response, '\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault');
                case 401:
                    return $this->getResponseContent($request, $response, '\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault');
                case 403:
                    return $this->getResponseContent($request, $response, '\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault');
            }

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            $returnType = '\Microsoft\MsAds\Rest\Model\CampaignManagementService\GetFileImportUploadUrlResponse';
            return $this->getResponseContent($request, $response, $returnType);

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Microsoft\MsAds\Rest\Model\CampaignManagementService\GetFileImportUploadUrlResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 500:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 403:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getFileImportUploadUrlAsync
     *
     * @param  object $Body (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getFileImportUploadUrl'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getFileImportUploadUrlAsync($Body, string $contentType = self::contentTypes['getFileImportUploadUrl'][0])
    {
        return $this->getFileImportUploadUrlAsyncWithHttpInfo($Body, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getFileImportUploadUrlAsyncWithHttpInfo
     *
     * @param  object $Body (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getFileImportUploadUrl'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getFileImportUploadUrlAsyncWithHttpInfo($Body, string $contentType = self::contentTypes['getFileImportUploadUrl'][0])
    {
        $returnType = '\Microsoft\MsAds\Rest\Model\CampaignManagementService\GetFileImportUploadUrlResponse';
        $request = $this->getFileImportUploadUrlRequest($Body, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return $this->onFulfilledResponse($response, $returnType);
                },
                function ($exception) {
                    $this->onRejectedResponse($exception);
                }
            );
    }

    /**
     * Create request for operation 'getFileImportUploadUrl'
     *
     * @param  object $Body (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getFileImportUploadUrl'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function getFileImportUploadUrlRequest($Body, string $contentType = self::contentTypes['getFileImportUploadUrl'][0])
    {

        // verify the required parameter 'Body' is set
        if ($Body === null || (is_array($Body) && count($Body) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $Body when calling getFileImportUploadUrl'
            );
        }


        $resourcePath = '/CampaignManagement/v13/FileImportUploadUrl/Query';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $multipart = false;

        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        return $this->setupAndSendRequest(
            'POST',
            $resourcePath,
            $headers,
            $headerParams,
            $Body,
            $formParams,
            $multipart,
            true,
            true,
            false,
            'getHostSettingsForgetFileImportUploadUrl',
            null,
            [],
            $queryParams
        );
    }

    /**
     * Operation getGeoLocationsFileUrl
     *
     * @param  \Microsoft\MsAds\Rest\Model\CampaignManagementService\GetGeoLocationsFileUrlRequest $GetGeoLocationsFileUrlRequest GetGeoLocationsFileUrlRequest (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getGeoLocationsFileUrl'] to see the possible values for this operation
     *
     * @throws \Microsoft\MsAds\Rest\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \Microsoft\MsAds\Rest\Model\CampaignManagementService\GetGeoLocationsFileUrlResponse|\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault|\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault|\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault|\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault
     */
    public function getGeoLocationsFileUrl($GetGeoLocationsFileUrlRequest, string $contentType = self::contentTypes['getGeoLocationsFileUrl'][0])
    {
        list($response) = $this->getGeoLocationsFileUrlWithHttpInfo($GetGeoLocationsFileUrlRequest, $contentType);
        return $response;
    }

    /**
     * Operation getGeoLocationsFileUrlWithHttpInfo
     *
     * @param  \Microsoft\MsAds\Rest\Model\CampaignManagementService\GetGeoLocationsFileUrlRequest $GetGeoLocationsFileUrlRequest (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getGeoLocationsFileUrl'] to see the possible values for this operation
     *
     * @throws \Microsoft\MsAds\Rest\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \Microsoft\MsAds\Rest\Model\CampaignManagementService\GetGeoLocationsFileUrlResponse|\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault|\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault|\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault|\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault, HTTP status code, HTTP response headers (array of strings)
     */
    public function getGeoLocationsFileUrlWithHttpInfo($GetGeoLocationsFileUrlRequest, string $contentType = self::contentTypes['getGeoLocationsFileUrl'][0])
    {
        $request = $this->getGeoLocationsFileUrlRequest($GetGeoLocationsFileUrlRequest, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                $response = $e->getResponse();
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            switch($statusCode) {
                case 200:
                    return $this->getResponseContent($request, $response, '\Microsoft\MsAds\Rest\Model\CampaignManagementService\GetGeoLocationsFileUrlResponse');
                case 400:
                    return $this->getResponseContent($request, $response, '\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault');
                case 500:
                    return $this->getResponseContent($request, $response, '\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault');
                case 401:
                    return $this->getResponseContent($request, $response, '\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault');
                case 403:
                    return $this->getResponseContent($request, $response, '\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault');
            }

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            $returnType = '\Microsoft\MsAds\Rest\Model\CampaignManagementService\GetGeoLocationsFileUrlResponse';
            return $this->getResponseContent($request, $response, $returnType);

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Microsoft\MsAds\Rest\Model\CampaignManagementService\GetGeoLocationsFileUrlResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 500:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 403:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getGeoLocationsFileUrlAsync
     *
     * @param  \Microsoft\MsAds\Rest\Model\CampaignManagementService\GetGeoLocationsFileUrlRequest $GetGeoLocationsFileUrlRequest (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getGeoLocationsFileUrl'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getGeoLocationsFileUrlAsync($GetGeoLocationsFileUrlRequest, string $contentType = self::contentTypes['getGeoLocationsFileUrl'][0])
    {
        return $this->getGeoLocationsFileUrlAsyncWithHttpInfo($GetGeoLocationsFileUrlRequest, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getGeoLocationsFileUrlAsyncWithHttpInfo
     *
     * @param  \Microsoft\MsAds\Rest\Model\CampaignManagementService\GetGeoLocationsFileUrlRequest $GetGeoLocationsFileUrlRequest (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getGeoLocationsFileUrl'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getGeoLocationsFileUrlAsyncWithHttpInfo($GetGeoLocationsFileUrlRequest, string $contentType = self::contentTypes['getGeoLocationsFileUrl'][0])
    {
        $returnType = '\Microsoft\MsAds\Rest\Model\CampaignManagementService\GetGeoLocationsFileUrlResponse';
        $request = $this->getGeoLocationsFileUrlRequest($GetGeoLocationsFileUrlRequest, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return $this->onFulfilledResponse($response, $returnType);
                },
                function ($exception) {
                    $this->onRejectedResponse($exception);
                }
            );
    }

    /**
     * Create request for operation 'getGeoLocationsFileUrl'
     *
     * @param  \Microsoft\MsAds\Rest\Model\CampaignManagementService\GetGeoLocationsFileUrlRequest $GetGeoLocationsFileUrlRequest (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getGeoLocationsFileUrl'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function getGeoLocationsFileUrlRequest($GetGeoLocationsFileUrlRequest, string $contentType = self::contentTypes['getGeoLocationsFileUrl'][0])
    {

        // verify the required parameter 'GetGeoLocationsFileUrlRequest' is set
        if ($GetGeoLocationsFileUrlRequest === null || (is_array($GetGeoLocationsFileUrlRequest) && count($GetGeoLocationsFileUrlRequest) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $GetGeoLocationsFileUrlRequest when calling getGeoLocationsFileUrl'
            );
        }


        $resourcePath = '/CampaignManagement/v13/GeoLocationsFileUrl/Query';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $multipart = false;

        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        return $this->setupAndSendRequest(
            'POST',
            $resourcePath,
            $headers,
            $headerParams,
            $GetGeoLocationsFileUrlRequest,
            $formParams,
            $multipart,
            true,
            true,
            false,
            'getHostSettingsForgetGeoLocationsFileUrl',
            null,
            [],
            $queryParams
        );
    }

    /**
     * Operation getHealthCheck
     *
     * @param  \Microsoft\MsAds\Rest\Model\CampaignManagementService\GetHealthCheckRequest $GetHealthCheckRequest GetHealthCheckRequest (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getHealthCheck'] to see the possible values for this operation
     *
     * @throws \Microsoft\MsAds\Rest\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \Microsoft\MsAds\Rest\Model\CampaignManagementService\GetHealthCheckResponse|\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault|\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault|\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault|\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault
     */
    public function getHealthCheck($GetHealthCheckRequest, string $contentType = self::contentTypes['getHealthCheck'][0])
    {
        list($response) = $this->getHealthCheckWithHttpInfo($GetHealthCheckRequest, $contentType);
        return $response;
    }

    /**
     * Operation getHealthCheckWithHttpInfo
     *
     * @param  \Microsoft\MsAds\Rest\Model\CampaignManagementService\GetHealthCheckRequest $GetHealthCheckRequest (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getHealthCheck'] to see the possible values for this operation
     *
     * @throws \Microsoft\MsAds\Rest\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \Microsoft\MsAds\Rest\Model\CampaignManagementService\GetHealthCheckResponse|\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault|\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault|\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault|\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault, HTTP status code, HTTP response headers (array of strings)
     */
    public function getHealthCheckWithHttpInfo($GetHealthCheckRequest, string $contentType = self::contentTypes['getHealthCheck'][0])
    {
        $request = $this->getHealthCheckRequest($GetHealthCheckRequest, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                $response = $e->getResponse();
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            switch($statusCode) {
                case 200:
                    return $this->getResponseContent($request, $response, '\Microsoft\MsAds\Rest\Model\CampaignManagementService\GetHealthCheckResponse');
                case 400:
                    return $this->getResponseContent($request, $response, '\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault');
                case 500:
                    return $this->getResponseContent($request, $response, '\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault');
                case 401:
                    return $this->getResponseContent($request, $response, '\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault');
                case 403:
                    return $this->getResponseContent($request, $response, '\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault');
            }

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            $returnType = '\Microsoft\MsAds\Rest\Model\CampaignManagementService\GetHealthCheckResponse';
            return $this->getResponseContent($request, $response, $returnType);

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Microsoft\MsAds\Rest\Model\CampaignManagementService\GetHealthCheckResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 500:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 403:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getHealthCheckAsync
     *
     * @param  \Microsoft\MsAds\Rest\Model\CampaignManagementService\GetHealthCheckRequest $GetHealthCheckRequest (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getHealthCheck'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getHealthCheckAsync($GetHealthCheckRequest, string $contentType = self::contentTypes['getHealthCheck'][0])
    {
        return $this->getHealthCheckAsyncWithHttpInfo($GetHealthCheckRequest, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getHealthCheckAsyncWithHttpInfo
     *
     * @param  \Microsoft\MsAds\Rest\Model\CampaignManagementService\GetHealthCheckRequest $GetHealthCheckRequest (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getHealthCheck'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getHealthCheckAsyncWithHttpInfo($GetHealthCheckRequest, string $contentType = self::contentTypes['getHealthCheck'][0])
    {
        $returnType = '\Microsoft\MsAds\Rest\Model\CampaignManagementService\GetHealthCheckResponse';
        $request = $this->getHealthCheckRequest($GetHealthCheckRequest, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return $this->onFulfilledResponse($response, $returnType);
                },
                function ($exception) {
                    $this->onRejectedResponse($exception);
                }
            );
    }

    /**
     * Create request for operation 'getHealthCheck'
     *
     * @param  \Microsoft\MsAds\Rest\Model\CampaignManagementService\GetHealthCheckRequest $GetHealthCheckRequest (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getHealthCheck'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function getHealthCheckRequest($GetHealthCheckRequest, string $contentType = self::contentTypes['getHealthCheck'][0])
    {

        // verify the required parameter 'GetHealthCheckRequest' is set
        if ($GetHealthCheckRequest === null || (is_array($GetHealthCheckRequest) && count($GetHealthCheckRequest) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $GetHealthCheckRequest when calling getHealthCheck'
            );
        }


        $resourcePath = '/CampaignManagement/v13/HealthCheck/Query';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $multipart = false;

        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        return $this->setupAndSendRequest(
            'POST',
            $resourcePath,
            $headers,
            $headerParams,
            $GetHealthCheckRequest,
            $formParams,
            $multipart,
            true,
            true,
            false,
            'getHostSettingsForgetHealthCheck',
            null,
            [],
            $queryParams
        );
    }

    /**
     * Operation getImportEntityIdsMapping
     *
     * @param  \Microsoft\MsAds\Rest\Model\CampaignManagementService\GetImportEntityIdsMappingRequest $GetImportEntityIdsMappingRequest GetImportEntityIdsMappingRequest (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getImportEntityIdsMapping'] to see the possible values for this operation
     *
     * @throws \Microsoft\MsAds\Rest\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \Microsoft\MsAds\Rest\Model\CampaignManagementService\GetImportEntityIdsMappingResponse|\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault|\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault|\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault|\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault
     */
    public function getImportEntityIdsMapping($GetImportEntityIdsMappingRequest, string $contentType = self::contentTypes['getImportEntityIdsMapping'][0])
    {
        list($response) = $this->getImportEntityIdsMappingWithHttpInfo($GetImportEntityIdsMappingRequest, $contentType);
        return $response;
    }

    /**
     * Operation getImportEntityIdsMappingWithHttpInfo
     *
     * @param  \Microsoft\MsAds\Rest\Model\CampaignManagementService\GetImportEntityIdsMappingRequest $GetImportEntityIdsMappingRequest (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getImportEntityIdsMapping'] to see the possible values for this operation
     *
     * @throws \Microsoft\MsAds\Rest\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \Microsoft\MsAds\Rest\Model\CampaignManagementService\GetImportEntityIdsMappingResponse|\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault|\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault|\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault|\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault, HTTP status code, HTTP response headers (array of strings)
     */
    public function getImportEntityIdsMappingWithHttpInfo($GetImportEntityIdsMappingRequest, string $contentType = self::contentTypes['getImportEntityIdsMapping'][0])
    {
        $request = $this->getImportEntityIdsMappingRequest($GetImportEntityIdsMappingRequest, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                $response = $e->getResponse();
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            switch($statusCode) {
                case 200:
                    return $this->getResponseContent($request, $response, '\Microsoft\MsAds\Rest\Model\CampaignManagementService\GetImportEntityIdsMappingResponse');
                case 400:
                    return $this->getResponseContent($request, $response, '\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault');
                case 500:
                    return $this->getResponseContent($request, $response, '\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault');
                case 401:
                    return $this->getResponseContent($request, $response, '\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault');
                case 403:
                    return $this->getResponseContent($request, $response, '\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault');
            }

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            $returnType = '\Microsoft\MsAds\Rest\Model\CampaignManagementService\GetImportEntityIdsMappingResponse';
            return $this->getResponseContent($request, $response, $returnType);

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Microsoft\MsAds\Rest\Model\CampaignManagementService\GetImportEntityIdsMappingResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 500:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 403:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getImportEntityIdsMappingAsync
     *
     * @param  \Microsoft\MsAds\Rest\Model\CampaignManagementService\GetImportEntityIdsMappingRequest $GetImportEntityIdsMappingRequest (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getImportEntityIdsMapping'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getImportEntityIdsMappingAsync($GetImportEntityIdsMappingRequest, string $contentType = self::contentTypes['getImportEntityIdsMapping'][0])
    {
        return $this->getImportEntityIdsMappingAsyncWithHttpInfo($GetImportEntityIdsMappingRequest, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getImportEntityIdsMappingAsyncWithHttpInfo
     *
     * @param  \Microsoft\MsAds\Rest\Model\CampaignManagementService\GetImportEntityIdsMappingRequest $GetImportEntityIdsMappingRequest (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getImportEntityIdsMapping'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getImportEntityIdsMappingAsyncWithHttpInfo($GetImportEntityIdsMappingRequest, string $contentType = self::contentTypes['getImportEntityIdsMapping'][0])
    {
        $returnType = '\Microsoft\MsAds\Rest\Model\CampaignManagementService\GetImportEntityIdsMappingResponse';
        $request = $this->getImportEntityIdsMappingRequest($GetImportEntityIdsMappingRequest, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return $this->onFulfilledResponse($response, $returnType);
                },
                function ($exception) {
                    $this->onRejectedResponse($exception);
                }
            );
    }

    /**
     * Create request for operation 'getImportEntityIdsMapping'
     *
     * @param  \Microsoft\MsAds\Rest\Model\CampaignManagementService\GetImportEntityIdsMappingRequest $GetImportEntityIdsMappingRequest (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getImportEntityIdsMapping'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function getImportEntityIdsMappingRequest($GetImportEntityIdsMappingRequest, string $contentType = self::contentTypes['getImportEntityIdsMapping'][0])
    {

        // verify the required parameter 'GetImportEntityIdsMappingRequest' is set
        if ($GetImportEntityIdsMappingRequest === null || (is_array($GetImportEntityIdsMappingRequest) && count($GetImportEntityIdsMappingRequest) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $GetImportEntityIdsMappingRequest when calling getImportEntityIdsMapping'
            );
        }


        $resourcePath = '/CampaignManagement/v13/ImportEntityIdsMapping/Query';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $multipart = false;

        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        return $this->setupAndSendRequest(
            'POST',
            $resourcePath,
            $headers,
            $headerParams,
            $GetImportEntityIdsMappingRequest,
            $formParams,
            $multipart,
            true,
            true,
            false,
            'getHostSettingsForgetImportEntityIdsMapping',
            null,
            [],
            $queryParams
        );
    }

    /**
     * Operation getImportJobsByIds
     *
     * @param  \Microsoft\MsAds\Rest\Model\CampaignManagementService\GetImportJobsByIdsRequest $GetImportJobsByIdsRequest GetImportJobsByIdsRequest (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getImportJobsByIds'] to see the possible values for this operation
     *
     * @throws \Microsoft\MsAds\Rest\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \Microsoft\MsAds\Rest\Model\CampaignManagementService\GetImportJobsByIdsResponse|\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault|\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault|\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault|\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault
     */
    public function getImportJobsByIds($GetImportJobsByIdsRequest, string $contentType = self::contentTypes['getImportJobsByIds'][0])
    {
        list($response) = $this->getImportJobsByIdsWithHttpInfo($GetImportJobsByIdsRequest, $contentType);
        return $response;
    }

    /**
     * Operation getImportJobsByIdsWithHttpInfo
     *
     * @param  \Microsoft\MsAds\Rest\Model\CampaignManagementService\GetImportJobsByIdsRequest $GetImportJobsByIdsRequest (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getImportJobsByIds'] to see the possible values for this operation
     *
     * @throws \Microsoft\MsAds\Rest\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \Microsoft\MsAds\Rest\Model\CampaignManagementService\GetImportJobsByIdsResponse|\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault|\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault|\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault|\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault, HTTP status code, HTTP response headers (array of strings)
     */
    public function getImportJobsByIdsWithHttpInfo($GetImportJobsByIdsRequest, string $contentType = self::contentTypes['getImportJobsByIds'][0])
    {
        $request = $this->getImportJobsByIdsRequest($GetImportJobsByIdsRequest, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                $response = $e->getResponse();
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            switch($statusCode) {
                case 200:
                    return $this->getResponseContent($request, $response, '\Microsoft\MsAds\Rest\Model\CampaignManagementService\GetImportJobsByIdsResponse');
                case 400:
                    return $this->getResponseContent($request, $response, '\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault');
                case 500:
                    return $this->getResponseContent($request, $response, '\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault');
                case 401:
                    return $this->getResponseContent($request, $response, '\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault');
                case 403:
                    return $this->getResponseContent($request, $response, '\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault');
            }

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            $returnType = '\Microsoft\MsAds\Rest\Model\CampaignManagementService\GetImportJobsByIdsResponse';
            return $this->getResponseContent($request, $response, $returnType);

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Microsoft\MsAds\Rest\Model\CampaignManagementService\GetImportJobsByIdsResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 500:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 403:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getImportJobsByIdsAsync
     *
     * @param  \Microsoft\MsAds\Rest\Model\CampaignManagementService\GetImportJobsByIdsRequest $GetImportJobsByIdsRequest (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getImportJobsByIds'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getImportJobsByIdsAsync($GetImportJobsByIdsRequest, string $contentType = self::contentTypes['getImportJobsByIds'][0])
    {
        return $this->getImportJobsByIdsAsyncWithHttpInfo($GetImportJobsByIdsRequest, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getImportJobsByIdsAsyncWithHttpInfo
     *
     * @param  \Microsoft\MsAds\Rest\Model\CampaignManagementService\GetImportJobsByIdsRequest $GetImportJobsByIdsRequest (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getImportJobsByIds'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getImportJobsByIdsAsyncWithHttpInfo($GetImportJobsByIdsRequest, string $contentType = self::contentTypes['getImportJobsByIds'][0])
    {
        $returnType = '\Microsoft\MsAds\Rest\Model\CampaignManagementService\GetImportJobsByIdsResponse';
        $request = $this->getImportJobsByIdsRequest($GetImportJobsByIdsRequest, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return $this->onFulfilledResponse($response, $returnType);
                },
                function ($exception) {
                    $this->onRejectedResponse($exception);
                }
            );
    }

    /**
     * Create request for operation 'getImportJobsByIds'
     *
     * @param  \Microsoft\MsAds\Rest\Model\CampaignManagementService\GetImportJobsByIdsRequest $GetImportJobsByIdsRequest (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getImportJobsByIds'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function getImportJobsByIdsRequest($GetImportJobsByIdsRequest, string $contentType = self::contentTypes['getImportJobsByIds'][0])
    {

        // verify the required parameter 'GetImportJobsByIdsRequest' is set
        if ($GetImportJobsByIdsRequest === null || (is_array($GetImportJobsByIdsRequest) && count($GetImportJobsByIdsRequest) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $GetImportJobsByIdsRequest when calling getImportJobsByIds'
            );
        }


        $resourcePath = '/CampaignManagement/v13/ImportJobs/QueryByIds';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $multipart = false;

        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        return $this->setupAndSendRequest(
            'POST',
            $resourcePath,
            $headers,
            $headerParams,
            $GetImportJobsByIdsRequest,
            $formParams,
            $multipart,
            true,
            true,
            false,
            'getHostSettingsForgetImportJobsByIds',
            null,
            [],
            $queryParams
        );
    }

    /**
     * Operation getImportResults
     *
     * @param  \Microsoft\MsAds\Rest\Model\CampaignManagementService\GetImportResultsRequest $GetImportResultsRequest GetImportResultsRequest (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getImportResults'] to see the possible values for this operation
     *
     * @throws \Microsoft\MsAds\Rest\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \Microsoft\MsAds\Rest\Model\CampaignManagementService\GetImportResultsResponse|\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault|\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault|\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault|\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault
     */
    public function getImportResults($GetImportResultsRequest, string $contentType = self::contentTypes['getImportResults'][0])
    {
        list($response) = $this->getImportResultsWithHttpInfo($GetImportResultsRequest, $contentType);
        return $response;
    }

    /**
     * Operation getImportResultsWithHttpInfo
     *
     * @param  \Microsoft\MsAds\Rest\Model\CampaignManagementService\GetImportResultsRequest $GetImportResultsRequest (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getImportResults'] to see the possible values for this operation
     *
     * @throws \Microsoft\MsAds\Rest\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \Microsoft\MsAds\Rest\Model\CampaignManagementService\GetImportResultsResponse|\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault|\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault|\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault|\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault, HTTP status code, HTTP response headers (array of strings)
     */
    public function getImportResultsWithHttpInfo($GetImportResultsRequest, string $contentType = self::contentTypes['getImportResults'][0])
    {
        $request = $this->getImportResultsRequest($GetImportResultsRequest, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                $response = $e->getResponse();
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            switch($statusCode) {
                case 200:
                    return $this->getResponseContent($request, $response, '\Microsoft\MsAds\Rest\Model\CampaignManagementService\GetImportResultsResponse');
                case 400:
                    return $this->getResponseContent($request, $response, '\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault');
                case 500:
                    return $this->getResponseContent($request, $response, '\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault');
                case 401:
                    return $this->getResponseContent($request, $response, '\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault');
                case 403:
                    return $this->getResponseContent($request, $response, '\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault');
            }

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            $returnType = '\Microsoft\MsAds\Rest\Model\CampaignManagementService\GetImportResultsResponse';
            return $this->getResponseContent($request, $response, $returnType);

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Microsoft\MsAds\Rest\Model\CampaignManagementService\GetImportResultsResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 500:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 403:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getImportResultsAsync
     *
     * @param  \Microsoft\MsAds\Rest\Model\CampaignManagementService\GetImportResultsRequest $GetImportResultsRequest (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getImportResults'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getImportResultsAsync($GetImportResultsRequest, string $contentType = self::contentTypes['getImportResults'][0])
    {
        return $this->getImportResultsAsyncWithHttpInfo($GetImportResultsRequest, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getImportResultsAsyncWithHttpInfo
     *
     * @param  \Microsoft\MsAds\Rest\Model\CampaignManagementService\GetImportResultsRequest $GetImportResultsRequest (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getImportResults'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getImportResultsAsyncWithHttpInfo($GetImportResultsRequest, string $contentType = self::contentTypes['getImportResults'][0])
    {
        $returnType = '\Microsoft\MsAds\Rest\Model\CampaignManagementService\GetImportResultsResponse';
        $request = $this->getImportResultsRequest($GetImportResultsRequest, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return $this->onFulfilledResponse($response, $returnType);
                },
                function ($exception) {
                    $this->onRejectedResponse($exception);
                }
            );
    }

    /**
     * Create request for operation 'getImportResults'
     *
     * @param  \Microsoft\MsAds\Rest\Model\CampaignManagementService\GetImportResultsRequest $GetImportResultsRequest (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getImportResults'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function getImportResultsRequest($GetImportResultsRequest, string $contentType = self::contentTypes['getImportResults'][0])
    {

        // verify the required parameter 'GetImportResultsRequest' is set
        if ($GetImportResultsRequest === null || (is_array($GetImportResultsRequest) && count($GetImportResultsRequest) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $GetImportResultsRequest when calling getImportResults'
            );
        }


        $resourcePath = '/CampaignManagement/v13/ImportResults/Query';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $multipart = false;

        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        return $this->setupAndSendRequest(
            'POST',
            $resourcePath,
            $headers,
            $headerParams,
            $GetImportResultsRequest,
            $formParams,
            $multipart,
            true,
            true,
            false,
            'getHostSettingsForgetImportResults',
            null,
            [],
            $queryParams
        );
    }

    /**
     * Operation getKeywordsByAdGroupId
     *
     * @param  \Microsoft\MsAds\Rest\Model\CampaignManagementService\GetKeywordsByAdGroupIdRequest $GetKeywordsByAdGroupIdRequest GetKeywordsByAdGroupIdRequest (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getKeywordsByAdGroupId'] to see the possible values for this operation
     *
     * @throws \Microsoft\MsAds\Rest\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \Microsoft\MsAds\Rest\Model\CampaignManagementService\GetKeywordsByAdGroupIdResponse|\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault|\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault|\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault|\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault
     */
    public function getKeywordsByAdGroupId($GetKeywordsByAdGroupIdRequest, string $contentType = self::contentTypes['getKeywordsByAdGroupId'][0])
    {
        list($response) = $this->getKeywordsByAdGroupIdWithHttpInfo($GetKeywordsByAdGroupIdRequest, $contentType);
        return $response;
    }

    /**
     * Operation getKeywordsByAdGroupIdWithHttpInfo
     *
     * @param  \Microsoft\MsAds\Rest\Model\CampaignManagementService\GetKeywordsByAdGroupIdRequest $GetKeywordsByAdGroupIdRequest (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getKeywordsByAdGroupId'] to see the possible values for this operation
     *
     * @throws \Microsoft\MsAds\Rest\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \Microsoft\MsAds\Rest\Model\CampaignManagementService\GetKeywordsByAdGroupIdResponse|\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault|\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault|\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault|\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault, HTTP status code, HTTP response headers (array of strings)
     */
    public function getKeywordsByAdGroupIdWithHttpInfo($GetKeywordsByAdGroupIdRequest, string $contentType = self::contentTypes['getKeywordsByAdGroupId'][0])
    {
        $request = $this->getKeywordsByAdGroupIdRequest($GetKeywordsByAdGroupIdRequest, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                $response = $e->getResponse();
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            switch($statusCode) {
                case 200:
                    return $this->getResponseContent($request, $response, '\Microsoft\MsAds\Rest\Model\CampaignManagementService\GetKeywordsByAdGroupIdResponse');
                case 400:
                    return $this->getResponseContent($request, $response, '\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault');
                case 500:
                    return $this->getResponseContent($request, $response, '\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault');
                case 401:
                    return $this->getResponseContent($request, $response, '\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault');
                case 403:
                    return $this->getResponseContent($request, $response, '\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault');
            }

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            $returnType = '\Microsoft\MsAds\Rest\Model\CampaignManagementService\GetKeywordsByAdGroupIdResponse';
            return $this->getResponseContent($request, $response, $returnType);

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Microsoft\MsAds\Rest\Model\CampaignManagementService\GetKeywordsByAdGroupIdResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 500:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 403:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getKeywordsByAdGroupIdAsync
     *
     * @param  \Microsoft\MsAds\Rest\Model\CampaignManagementService\GetKeywordsByAdGroupIdRequest $GetKeywordsByAdGroupIdRequest (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getKeywordsByAdGroupId'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getKeywordsByAdGroupIdAsync($GetKeywordsByAdGroupIdRequest, string $contentType = self::contentTypes['getKeywordsByAdGroupId'][0])
    {
        return $this->getKeywordsByAdGroupIdAsyncWithHttpInfo($GetKeywordsByAdGroupIdRequest, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getKeywordsByAdGroupIdAsyncWithHttpInfo
     *
     * @param  \Microsoft\MsAds\Rest\Model\CampaignManagementService\GetKeywordsByAdGroupIdRequest $GetKeywordsByAdGroupIdRequest (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getKeywordsByAdGroupId'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getKeywordsByAdGroupIdAsyncWithHttpInfo($GetKeywordsByAdGroupIdRequest, string $contentType = self::contentTypes['getKeywordsByAdGroupId'][0])
    {
        $returnType = '\Microsoft\MsAds\Rest\Model\CampaignManagementService\GetKeywordsByAdGroupIdResponse';
        $request = $this->getKeywordsByAdGroupIdRequest($GetKeywordsByAdGroupIdRequest, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return $this->onFulfilledResponse($response, $returnType);
                },
                function ($exception) {
                    $this->onRejectedResponse($exception);
                }
            );
    }

    /**
     * Create request for operation 'getKeywordsByAdGroupId'
     *
     * @param  \Microsoft\MsAds\Rest\Model\CampaignManagementService\GetKeywordsByAdGroupIdRequest $GetKeywordsByAdGroupIdRequest (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getKeywordsByAdGroupId'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function getKeywordsByAdGroupIdRequest($GetKeywordsByAdGroupIdRequest, string $contentType = self::contentTypes['getKeywordsByAdGroupId'][0])
    {

        // verify the required parameter 'GetKeywordsByAdGroupIdRequest' is set
        if ($GetKeywordsByAdGroupIdRequest === null || (is_array($GetKeywordsByAdGroupIdRequest) && count($GetKeywordsByAdGroupIdRequest) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $GetKeywordsByAdGroupIdRequest when calling getKeywordsByAdGroupId'
            );
        }


        $resourcePath = '/CampaignManagement/v13/Keywords/QueryByAdGroupId';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $multipart = false;

        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        return $this->setupAndSendRequest(
            'POST',
            $resourcePath,
            $headers,
            $headerParams,
            $GetKeywordsByAdGroupIdRequest,
            $formParams,
            $multipart,
            true,
            true,
            false,
            'getHostSettingsForgetKeywordsByAdGroupId',
            null,
            [],
            $queryParams
        );
    }

    /**
     * Operation getKeywordsByEditorialStatus
     *
     * @param  \Microsoft\MsAds\Rest\Model\CampaignManagementService\GetKeywordsByEditorialStatusRequest $GetKeywordsByEditorialStatusRequest GetKeywordsByEditorialStatusRequest (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getKeywordsByEditorialStatus'] to see the possible values for this operation
     *
     * @throws \Microsoft\MsAds\Rest\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \Microsoft\MsAds\Rest\Model\CampaignManagementService\GetKeywordsByEditorialStatusResponse|\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault|\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault|\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault|\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault
     */
    public function getKeywordsByEditorialStatus($GetKeywordsByEditorialStatusRequest, string $contentType = self::contentTypes['getKeywordsByEditorialStatus'][0])
    {
        list($response) = $this->getKeywordsByEditorialStatusWithHttpInfo($GetKeywordsByEditorialStatusRequest, $contentType);
        return $response;
    }

    /**
     * Operation getKeywordsByEditorialStatusWithHttpInfo
     *
     * @param  \Microsoft\MsAds\Rest\Model\CampaignManagementService\GetKeywordsByEditorialStatusRequest $GetKeywordsByEditorialStatusRequest (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getKeywordsByEditorialStatus'] to see the possible values for this operation
     *
     * @throws \Microsoft\MsAds\Rest\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \Microsoft\MsAds\Rest\Model\CampaignManagementService\GetKeywordsByEditorialStatusResponse|\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault|\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault|\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault|\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault, HTTP status code, HTTP response headers (array of strings)
     */
    public function getKeywordsByEditorialStatusWithHttpInfo($GetKeywordsByEditorialStatusRequest, string $contentType = self::contentTypes['getKeywordsByEditorialStatus'][0])
    {
        $request = $this->getKeywordsByEditorialStatusRequest($GetKeywordsByEditorialStatusRequest, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                $response = $e->getResponse();
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            switch($statusCode) {
                case 200:
                    return $this->getResponseContent($request, $response, '\Microsoft\MsAds\Rest\Model\CampaignManagementService\GetKeywordsByEditorialStatusResponse');
                case 400:
                    return $this->getResponseContent($request, $response, '\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault');
                case 500:
                    return $this->getResponseContent($request, $response, '\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault');
                case 401:
                    return $this->getResponseContent($request, $response, '\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault');
                case 403:
                    return $this->getResponseContent($request, $response, '\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault');
            }

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            $returnType = '\Microsoft\MsAds\Rest\Model\CampaignManagementService\GetKeywordsByEditorialStatusResponse';
            return $this->getResponseContent($request, $response, $returnType);

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Microsoft\MsAds\Rest\Model\CampaignManagementService\GetKeywordsByEditorialStatusResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 500:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 403:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getKeywordsByEditorialStatusAsync
     *
     * @param  \Microsoft\MsAds\Rest\Model\CampaignManagementService\GetKeywordsByEditorialStatusRequest $GetKeywordsByEditorialStatusRequest (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getKeywordsByEditorialStatus'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getKeywordsByEditorialStatusAsync($GetKeywordsByEditorialStatusRequest, string $contentType = self::contentTypes['getKeywordsByEditorialStatus'][0])
    {
        return $this->getKeywordsByEditorialStatusAsyncWithHttpInfo($GetKeywordsByEditorialStatusRequest, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getKeywordsByEditorialStatusAsyncWithHttpInfo
     *
     * @param  \Microsoft\MsAds\Rest\Model\CampaignManagementService\GetKeywordsByEditorialStatusRequest $GetKeywordsByEditorialStatusRequest (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getKeywordsByEditorialStatus'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getKeywordsByEditorialStatusAsyncWithHttpInfo($GetKeywordsByEditorialStatusRequest, string $contentType = self::contentTypes['getKeywordsByEditorialStatus'][0])
    {
        $returnType = '\Microsoft\MsAds\Rest\Model\CampaignManagementService\GetKeywordsByEditorialStatusResponse';
        $request = $this->getKeywordsByEditorialStatusRequest($GetKeywordsByEditorialStatusRequest, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return $this->onFulfilledResponse($response, $returnType);
                },
                function ($exception) {
                    $this->onRejectedResponse($exception);
                }
            );
    }

    /**
     * Create request for operation 'getKeywordsByEditorialStatus'
     *
     * @param  \Microsoft\MsAds\Rest\Model\CampaignManagementService\GetKeywordsByEditorialStatusRequest $GetKeywordsByEditorialStatusRequest (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getKeywordsByEditorialStatus'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function getKeywordsByEditorialStatusRequest($GetKeywordsByEditorialStatusRequest, string $contentType = self::contentTypes['getKeywordsByEditorialStatus'][0])
    {

        // verify the required parameter 'GetKeywordsByEditorialStatusRequest' is set
        if ($GetKeywordsByEditorialStatusRequest === null || (is_array($GetKeywordsByEditorialStatusRequest) && count($GetKeywordsByEditorialStatusRequest) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $GetKeywordsByEditorialStatusRequest when calling getKeywordsByEditorialStatus'
            );
        }


        $resourcePath = '/CampaignManagement/v13/Keywords/QueryByEditorialStatus';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $multipart = false;

        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        return $this->setupAndSendRequest(
            'POST',
            $resourcePath,
            $headers,
            $headerParams,
            $GetKeywordsByEditorialStatusRequest,
            $formParams,
            $multipart,
            true,
            true,
            false,
            'getHostSettingsForgetKeywordsByEditorialStatus',
            null,
            [],
            $queryParams
        );
    }

    /**
     * Operation getKeywordsByIds
     *
     * @param  \Microsoft\MsAds\Rest\Model\CampaignManagementService\GetKeywordsByIdsRequest $GetKeywordsByIdsRequest GetKeywordsByIdsRequest (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getKeywordsByIds'] to see the possible values for this operation
     *
     * @throws \Microsoft\MsAds\Rest\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \Microsoft\MsAds\Rest\Model\CampaignManagementService\GetKeywordsByIdsResponse|\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault|\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault|\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault|\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault
     */
    public function getKeywordsByIds($GetKeywordsByIdsRequest, string $contentType = self::contentTypes['getKeywordsByIds'][0])
    {
        list($response) = $this->getKeywordsByIdsWithHttpInfo($GetKeywordsByIdsRequest, $contentType);
        return $response;
    }

    /**
     * Operation getKeywordsByIdsWithHttpInfo
     *
     * @param  \Microsoft\MsAds\Rest\Model\CampaignManagementService\GetKeywordsByIdsRequest $GetKeywordsByIdsRequest (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getKeywordsByIds'] to see the possible values for this operation
     *
     * @throws \Microsoft\MsAds\Rest\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \Microsoft\MsAds\Rest\Model\CampaignManagementService\GetKeywordsByIdsResponse|\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault|\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault|\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault|\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault, HTTP status code, HTTP response headers (array of strings)
     */
    public function getKeywordsByIdsWithHttpInfo($GetKeywordsByIdsRequest, string $contentType = self::contentTypes['getKeywordsByIds'][0])
    {
        $request = $this->getKeywordsByIdsRequest($GetKeywordsByIdsRequest, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                $response = $e->getResponse();
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            switch($statusCode) {
                case 200:
                    return $this->getResponseContent($request, $response, '\Microsoft\MsAds\Rest\Model\CampaignManagementService\GetKeywordsByIdsResponse');
                case 400:
                    return $this->getResponseContent($request, $response, '\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault');
                case 500:
                    return $this->getResponseContent($request, $response, '\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault');
                case 401:
                    return $this->getResponseContent($request, $response, '\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault');
                case 403:
                    return $this->getResponseContent($request, $response, '\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault');
            }

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            $returnType = '\Microsoft\MsAds\Rest\Model\CampaignManagementService\GetKeywordsByIdsResponse';
            return $this->getResponseContent($request, $response, $returnType);

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Microsoft\MsAds\Rest\Model\CampaignManagementService\GetKeywordsByIdsResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 500:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 403:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getKeywordsByIdsAsync
     *
     * @param  \Microsoft\MsAds\Rest\Model\CampaignManagementService\GetKeywordsByIdsRequest $GetKeywordsByIdsRequest (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getKeywordsByIds'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getKeywordsByIdsAsync($GetKeywordsByIdsRequest, string $contentType = self::contentTypes['getKeywordsByIds'][0])
    {
        return $this->getKeywordsByIdsAsyncWithHttpInfo($GetKeywordsByIdsRequest, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getKeywordsByIdsAsyncWithHttpInfo
     *
     * @param  \Microsoft\MsAds\Rest\Model\CampaignManagementService\GetKeywordsByIdsRequest $GetKeywordsByIdsRequest (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getKeywordsByIds'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getKeywordsByIdsAsyncWithHttpInfo($GetKeywordsByIdsRequest, string $contentType = self::contentTypes['getKeywordsByIds'][0])
    {
        $returnType = '\Microsoft\MsAds\Rest\Model\CampaignManagementService\GetKeywordsByIdsResponse';
        $request = $this->getKeywordsByIdsRequest($GetKeywordsByIdsRequest, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return $this->onFulfilledResponse($response, $returnType);
                },
                function ($exception) {
                    $this->onRejectedResponse($exception);
                }
            );
    }

    /**
     * Create request for operation 'getKeywordsByIds'
     *
     * @param  \Microsoft\MsAds\Rest\Model\CampaignManagementService\GetKeywordsByIdsRequest $GetKeywordsByIdsRequest (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getKeywordsByIds'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function getKeywordsByIdsRequest($GetKeywordsByIdsRequest, string $contentType = self::contentTypes['getKeywordsByIds'][0])
    {

        // verify the required parameter 'GetKeywordsByIdsRequest' is set
        if ($GetKeywordsByIdsRequest === null || (is_array($GetKeywordsByIdsRequest) && count($GetKeywordsByIdsRequest) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $GetKeywordsByIdsRequest when calling getKeywordsByIds'
            );
        }


        $resourcePath = '/CampaignManagement/v13/Keywords/QueryByIds';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $multipart = false;

        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        return $this->setupAndSendRequest(
            'POST',
            $resourcePath,
            $headers,
            $headerParams,
            $GetKeywordsByIdsRequest,
            $formParams,
            $multipart,
            true,
            true,
            false,
            'getHostSettingsForgetKeywordsByIds',
            null,
            [],
            $queryParams
        );
    }

    /**
     * Operation getLabelAssociationsByEntityIds
     *
     * @param  \Microsoft\MsAds\Rest\Model\CampaignManagementService\GetLabelAssociationsByEntityIdsRequest $GetLabelAssociationsByEntityIdsRequest GetLabelAssociationsByEntityIdsRequest (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getLabelAssociationsByEntityIds'] to see the possible values for this operation
     *
     * @throws \Microsoft\MsAds\Rest\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \Microsoft\MsAds\Rest\Model\CampaignManagementService\GetLabelAssociationsByEntityIdsResponse|\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault|\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault|\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault|\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault
     */
    public function getLabelAssociationsByEntityIds($GetLabelAssociationsByEntityIdsRequest, string $contentType = self::contentTypes['getLabelAssociationsByEntityIds'][0])
    {
        list($response) = $this->getLabelAssociationsByEntityIdsWithHttpInfo($GetLabelAssociationsByEntityIdsRequest, $contentType);
        return $response;
    }

    /**
     * Operation getLabelAssociationsByEntityIdsWithHttpInfo
     *
     * @param  \Microsoft\MsAds\Rest\Model\CampaignManagementService\GetLabelAssociationsByEntityIdsRequest $GetLabelAssociationsByEntityIdsRequest (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getLabelAssociationsByEntityIds'] to see the possible values for this operation
     *
     * @throws \Microsoft\MsAds\Rest\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \Microsoft\MsAds\Rest\Model\CampaignManagementService\GetLabelAssociationsByEntityIdsResponse|\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault|\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault|\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault|\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault, HTTP status code, HTTP response headers (array of strings)
     */
    public function getLabelAssociationsByEntityIdsWithHttpInfo($GetLabelAssociationsByEntityIdsRequest, string $contentType = self::contentTypes['getLabelAssociationsByEntityIds'][0])
    {
        $request = $this->getLabelAssociationsByEntityIdsRequest($GetLabelAssociationsByEntityIdsRequest, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                $response = $e->getResponse();
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            switch($statusCode) {
                case 200:
                    return $this->getResponseContent($request, $response, '\Microsoft\MsAds\Rest\Model\CampaignManagementService\GetLabelAssociationsByEntityIdsResponse');
                case 400:
                    return $this->getResponseContent($request, $response, '\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault');
                case 500:
                    return $this->getResponseContent($request, $response, '\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault');
                case 401:
                    return $this->getResponseContent($request, $response, '\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault');
                case 403:
                    return $this->getResponseContent($request, $response, '\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault');
            }

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            $returnType = '\Microsoft\MsAds\Rest\Model\CampaignManagementService\GetLabelAssociationsByEntityIdsResponse';
            return $this->getResponseContent($request, $response, $returnType);

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Microsoft\MsAds\Rest\Model\CampaignManagementService\GetLabelAssociationsByEntityIdsResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 500:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 403:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getLabelAssociationsByEntityIdsAsync
     *
     * @param  \Microsoft\MsAds\Rest\Model\CampaignManagementService\GetLabelAssociationsByEntityIdsRequest $GetLabelAssociationsByEntityIdsRequest (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getLabelAssociationsByEntityIds'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getLabelAssociationsByEntityIdsAsync($GetLabelAssociationsByEntityIdsRequest, string $contentType = self::contentTypes['getLabelAssociationsByEntityIds'][0])
    {
        return $this->getLabelAssociationsByEntityIdsAsyncWithHttpInfo($GetLabelAssociationsByEntityIdsRequest, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getLabelAssociationsByEntityIdsAsyncWithHttpInfo
     *
     * @param  \Microsoft\MsAds\Rest\Model\CampaignManagementService\GetLabelAssociationsByEntityIdsRequest $GetLabelAssociationsByEntityIdsRequest (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getLabelAssociationsByEntityIds'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getLabelAssociationsByEntityIdsAsyncWithHttpInfo($GetLabelAssociationsByEntityIdsRequest, string $contentType = self::contentTypes['getLabelAssociationsByEntityIds'][0])
    {
        $returnType = '\Microsoft\MsAds\Rest\Model\CampaignManagementService\GetLabelAssociationsByEntityIdsResponse';
        $request = $this->getLabelAssociationsByEntityIdsRequest($GetLabelAssociationsByEntityIdsRequest, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return $this->onFulfilledResponse($response, $returnType);
                },
                function ($exception) {
                    $this->onRejectedResponse($exception);
                }
            );
    }

    /**
     * Create request for operation 'getLabelAssociationsByEntityIds'
     *
     * @param  \Microsoft\MsAds\Rest\Model\CampaignManagementService\GetLabelAssociationsByEntityIdsRequest $GetLabelAssociationsByEntityIdsRequest (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getLabelAssociationsByEntityIds'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function getLabelAssociationsByEntityIdsRequest($GetLabelAssociationsByEntityIdsRequest, string $contentType = self::contentTypes['getLabelAssociationsByEntityIds'][0])
    {

        // verify the required parameter 'GetLabelAssociationsByEntityIdsRequest' is set
        if ($GetLabelAssociationsByEntityIdsRequest === null || (is_array($GetLabelAssociationsByEntityIdsRequest) && count($GetLabelAssociationsByEntityIdsRequest) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $GetLabelAssociationsByEntityIdsRequest when calling getLabelAssociationsByEntityIds'
            );
        }


        $resourcePath = '/CampaignManagement/v13/LabelAssociations/QueryByEntityIds';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $multipart = false;

        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        return $this->setupAndSendRequest(
            'POST',
            $resourcePath,
            $headers,
            $headerParams,
            $GetLabelAssociationsByEntityIdsRequest,
            $formParams,
            $multipart,
            true,
            true,
            false,
            'getHostSettingsForgetLabelAssociationsByEntityIds',
            null,
            [],
            $queryParams
        );
    }

    /**
     * Operation getLabelAssociationsByLabelIds
     *
     * @param  \Microsoft\MsAds\Rest\Model\CampaignManagementService\GetLabelAssociationsByLabelIdsRequest $GetLabelAssociationsByLabelIdsRequest GetLabelAssociationsByLabelIdsRequest (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getLabelAssociationsByLabelIds'] to see the possible values for this operation
     *
     * @throws \Microsoft\MsAds\Rest\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \Microsoft\MsAds\Rest\Model\CampaignManagementService\GetLabelAssociationsByLabelIdsResponse|\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault|\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault|\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault|\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault
     */
    public function getLabelAssociationsByLabelIds($GetLabelAssociationsByLabelIdsRequest, string $contentType = self::contentTypes['getLabelAssociationsByLabelIds'][0])
    {
        list($response) = $this->getLabelAssociationsByLabelIdsWithHttpInfo($GetLabelAssociationsByLabelIdsRequest, $contentType);
        return $response;
    }

    /**
     * Operation getLabelAssociationsByLabelIdsWithHttpInfo
     *
     * @param  \Microsoft\MsAds\Rest\Model\CampaignManagementService\GetLabelAssociationsByLabelIdsRequest $GetLabelAssociationsByLabelIdsRequest (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getLabelAssociationsByLabelIds'] to see the possible values for this operation
     *
     * @throws \Microsoft\MsAds\Rest\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \Microsoft\MsAds\Rest\Model\CampaignManagementService\GetLabelAssociationsByLabelIdsResponse|\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault|\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault|\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault|\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault, HTTP status code, HTTP response headers (array of strings)
     */
    public function getLabelAssociationsByLabelIdsWithHttpInfo($GetLabelAssociationsByLabelIdsRequest, string $contentType = self::contentTypes['getLabelAssociationsByLabelIds'][0])
    {
        $request = $this->getLabelAssociationsByLabelIdsRequest($GetLabelAssociationsByLabelIdsRequest, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                $response = $e->getResponse();
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            switch($statusCode) {
                case 200:
                    return $this->getResponseContent($request, $response, '\Microsoft\MsAds\Rest\Model\CampaignManagementService\GetLabelAssociationsByLabelIdsResponse');
                case 400:
                    return $this->getResponseContent($request, $response, '\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault');
                case 500:
                    return $this->getResponseContent($request, $response, '\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault');
                case 401:
                    return $this->getResponseContent($request, $response, '\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault');
                case 403:
                    return $this->getResponseContent($request, $response, '\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault');
            }

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            $returnType = '\Microsoft\MsAds\Rest\Model\CampaignManagementService\GetLabelAssociationsByLabelIdsResponse';
            return $this->getResponseContent($request, $response, $returnType);

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Microsoft\MsAds\Rest\Model\CampaignManagementService\GetLabelAssociationsByLabelIdsResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 500:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 403:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getLabelAssociationsByLabelIdsAsync
     *
     * @param  \Microsoft\MsAds\Rest\Model\CampaignManagementService\GetLabelAssociationsByLabelIdsRequest $GetLabelAssociationsByLabelIdsRequest (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getLabelAssociationsByLabelIds'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getLabelAssociationsByLabelIdsAsync($GetLabelAssociationsByLabelIdsRequest, string $contentType = self::contentTypes['getLabelAssociationsByLabelIds'][0])
    {
        return $this->getLabelAssociationsByLabelIdsAsyncWithHttpInfo($GetLabelAssociationsByLabelIdsRequest, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getLabelAssociationsByLabelIdsAsyncWithHttpInfo
     *
     * @param  \Microsoft\MsAds\Rest\Model\CampaignManagementService\GetLabelAssociationsByLabelIdsRequest $GetLabelAssociationsByLabelIdsRequest (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getLabelAssociationsByLabelIds'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getLabelAssociationsByLabelIdsAsyncWithHttpInfo($GetLabelAssociationsByLabelIdsRequest, string $contentType = self::contentTypes['getLabelAssociationsByLabelIds'][0])
    {
        $returnType = '\Microsoft\MsAds\Rest\Model\CampaignManagementService\GetLabelAssociationsByLabelIdsResponse';
        $request = $this->getLabelAssociationsByLabelIdsRequest($GetLabelAssociationsByLabelIdsRequest, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return $this->onFulfilledResponse($response, $returnType);
                },
                function ($exception) {
                    $this->onRejectedResponse($exception);
                }
            );
    }

    /**
     * Create request for operation 'getLabelAssociationsByLabelIds'
     *
     * @param  \Microsoft\MsAds\Rest\Model\CampaignManagementService\GetLabelAssociationsByLabelIdsRequest $GetLabelAssociationsByLabelIdsRequest (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getLabelAssociationsByLabelIds'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function getLabelAssociationsByLabelIdsRequest($GetLabelAssociationsByLabelIdsRequest, string $contentType = self::contentTypes['getLabelAssociationsByLabelIds'][0])
    {

        // verify the required parameter 'GetLabelAssociationsByLabelIdsRequest' is set
        if ($GetLabelAssociationsByLabelIdsRequest === null || (is_array($GetLabelAssociationsByLabelIdsRequest) && count($GetLabelAssociationsByLabelIdsRequest) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $GetLabelAssociationsByLabelIdsRequest when calling getLabelAssociationsByLabelIds'
            );
        }


        $resourcePath = '/CampaignManagement/v13/LabelAssociations/QueryByLabelIds';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $multipart = false;

        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        return $this->setupAndSendRequest(
            'POST',
            $resourcePath,
            $headers,
            $headerParams,
            $GetLabelAssociationsByLabelIdsRequest,
            $formParams,
            $multipart,
            true,
            true,
            false,
            'getHostSettingsForgetLabelAssociationsByLabelIds',
            null,
            [],
            $queryParams
        );
    }

    /**
     * Operation getLabelsByIds
     *
     * @param  \Microsoft\MsAds\Rest\Model\CampaignManagementService\GetLabelsByIdsRequest $GetLabelsByIdsRequest GetLabelsByIdsRequest (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getLabelsByIds'] to see the possible values for this operation
     *
     * @throws \Microsoft\MsAds\Rest\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \Microsoft\MsAds\Rest\Model\CampaignManagementService\GetLabelsByIdsResponse|\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault|\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault|\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault|\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault
     */
    public function getLabelsByIds($GetLabelsByIdsRequest, string $contentType = self::contentTypes['getLabelsByIds'][0])
    {
        list($response) = $this->getLabelsByIdsWithHttpInfo($GetLabelsByIdsRequest, $contentType);
        return $response;
    }

    /**
     * Operation getLabelsByIdsWithHttpInfo
     *
     * @param  \Microsoft\MsAds\Rest\Model\CampaignManagementService\GetLabelsByIdsRequest $GetLabelsByIdsRequest (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getLabelsByIds'] to see the possible values for this operation
     *
     * @throws \Microsoft\MsAds\Rest\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \Microsoft\MsAds\Rest\Model\CampaignManagementService\GetLabelsByIdsResponse|\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault|\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault|\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault|\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault, HTTP status code, HTTP response headers (array of strings)
     */
    public function getLabelsByIdsWithHttpInfo($GetLabelsByIdsRequest, string $contentType = self::contentTypes['getLabelsByIds'][0])
    {
        $request = $this->getLabelsByIdsRequest($GetLabelsByIdsRequest, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                $response = $e->getResponse();
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            switch($statusCode) {
                case 200:
                    return $this->getResponseContent($request, $response, '\Microsoft\MsAds\Rest\Model\CampaignManagementService\GetLabelsByIdsResponse');
                case 400:
                    return $this->getResponseContent($request, $response, '\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault');
                case 500:
                    return $this->getResponseContent($request, $response, '\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault');
                case 401:
                    return $this->getResponseContent($request, $response, '\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault');
                case 403:
                    return $this->getResponseContent($request, $response, '\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault');
            }

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            $returnType = '\Microsoft\MsAds\Rest\Model\CampaignManagementService\GetLabelsByIdsResponse';
            return $this->getResponseContent($request, $response, $returnType);

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Microsoft\MsAds\Rest\Model\CampaignManagementService\GetLabelsByIdsResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 500:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 403:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getLabelsByIdsAsync
     *
     * @param  \Microsoft\MsAds\Rest\Model\CampaignManagementService\GetLabelsByIdsRequest $GetLabelsByIdsRequest (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getLabelsByIds'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getLabelsByIdsAsync($GetLabelsByIdsRequest, string $contentType = self::contentTypes['getLabelsByIds'][0])
    {
        return $this->getLabelsByIdsAsyncWithHttpInfo($GetLabelsByIdsRequest, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getLabelsByIdsAsyncWithHttpInfo
     *
     * @param  \Microsoft\MsAds\Rest\Model\CampaignManagementService\GetLabelsByIdsRequest $GetLabelsByIdsRequest (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getLabelsByIds'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getLabelsByIdsAsyncWithHttpInfo($GetLabelsByIdsRequest, string $contentType = self::contentTypes['getLabelsByIds'][0])
    {
        $returnType = '\Microsoft\MsAds\Rest\Model\CampaignManagementService\GetLabelsByIdsResponse';
        $request = $this->getLabelsByIdsRequest($GetLabelsByIdsRequest, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return $this->onFulfilledResponse($response, $returnType);
                },
                function ($exception) {
                    $this->onRejectedResponse($exception);
                }
            );
    }

    /**
     * Create request for operation 'getLabelsByIds'
     *
     * @param  \Microsoft\MsAds\Rest\Model\CampaignManagementService\GetLabelsByIdsRequest $GetLabelsByIdsRequest (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getLabelsByIds'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function getLabelsByIdsRequest($GetLabelsByIdsRequest, string $contentType = self::contentTypes['getLabelsByIds'][0])
    {

        // verify the required parameter 'GetLabelsByIdsRequest' is set
        if ($GetLabelsByIdsRequest === null || (is_array($GetLabelsByIdsRequest) && count($GetLabelsByIdsRequest) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $GetLabelsByIdsRequest when calling getLabelsByIds'
            );
        }


        $resourcePath = '/CampaignManagement/v13/Labels/QueryByIds';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $multipart = false;

        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        return $this->setupAndSendRequest(
            'POST',
            $resourcePath,
            $headers,
            $headerParams,
            $GetLabelsByIdsRequest,
            $formParams,
            $multipart,
            true,
            true,
            false,
            'getHostSettingsForgetLabelsByIds',
            null,
            [],
            $queryParams
        );
    }

    /**
     * Operation getListItemsBySharedList
     *
     * @param  \Microsoft\MsAds\Rest\Model\CampaignManagementService\GetListItemsBySharedListRequest $GetListItemsBySharedListRequest GetListItemsBySharedListRequest (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getListItemsBySharedList'] to see the possible values for this operation
     *
     * @throws \Microsoft\MsAds\Rest\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \Microsoft\MsAds\Rest\Model\CampaignManagementService\GetListItemsBySharedListResponse|\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault|\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault|\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault|\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault
     */
    public function getListItemsBySharedList($GetListItemsBySharedListRequest, string $contentType = self::contentTypes['getListItemsBySharedList'][0])
    {
        list($response) = $this->getListItemsBySharedListWithHttpInfo($GetListItemsBySharedListRequest, $contentType);
        return $response;
    }

    /**
     * Operation getListItemsBySharedListWithHttpInfo
     *
     * @param  \Microsoft\MsAds\Rest\Model\CampaignManagementService\GetListItemsBySharedListRequest $GetListItemsBySharedListRequest (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getListItemsBySharedList'] to see the possible values for this operation
     *
     * @throws \Microsoft\MsAds\Rest\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \Microsoft\MsAds\Rest\Model\CampaignManagementService\GetListItemsBySharedListResponse|\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault|\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault|\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault|\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault, HTTP status code, HTTP response headers (array of strings)
     */
    public function getListItemsBySharedListWithHttpInfo($GetListItemsBySharedListRequest, string $contentType = self::contentTypes['getListItemsBySharedList'][0])
    {
        $request = $this->getListItemsBySharedListRequest($GetListItemsBySharedListRequest, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                $response = $e->getResponse();
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            switch($statusCode) {
                case 200:
                    return $this->getResponseContent($request, $response, '\Microsoft\MsAds\Rest\Model\CampaignManagementService\GetListItemsBySharedListResponse');
                case 400:
                    return $this->getResponseContent($request, $response, '\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault');
                case 500:
                    return $this->getResponseContent($request, $response, '\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault');
                case 401:
                    return $this->getResponseContent($request, $response, '\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault');
                case 403:
                    return $this->getResponseContent($request, $response, '\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault');
            }

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            $returnType = '\Microsoft\MsAds\Rest\Model\CampaignManagementService\GetListItemsBySharedListResponse';
            return $this->getResponseContent($request, $response, $returnType);

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Microsoft\MsAds\Rest\Model\CampaignManagementService\GetListItemsBySharedListResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 500:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 403:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getListItemsBySharedListAsync
     *
     * @param  \Microsoft\MsAds\Rest\Model\CampaignManagementService\GetListItemsBySharedListRequest $GetListItemsBySharedListRequest (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getListItemsBySharedList'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getListItemsBySharedListAsync($GetListItemsBySharedListRequest, string $contentType = self::contentTypes['getListItemsBySharedList'][0])
    {
        return $this->getListItemsBySharedListAsyncWithHttpInfo($GetListItemsBySharedListRequest, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getListItemsBySharedListAsyncWithHttpInfo
     *
     * @param  \Microsoft\MsAds\Rest\Model\CampaignManagementService\GetListItemsBySharedListRequest $GetListItemsBySharedListRequest (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getListItemsBySharedList'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getListItemsBySharedListAsyncWithHttpInfo($GetListItemsBySharedListRequest, string $contentType = self::contentTypes['getListItemsBySharedList'][0])
    {
        $returnType = '\Microsoft\MsAds\Rest\Model\CampaignManagementService\GetListItemsBySharedListResponse';
        $request = $this->getListItemsBySharedListRequest($GetListItemsBySharedListRequest, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return $this->onFulfilledResponse($response, $returnType);
                },
                function ($exception) {
                    $this->onRejectedResponse($exception);
                }
            );
    }

    /**
     * Create request for operation 'getListItemsBySharedList'
     *
     * @param  \Microsoft\MsAds\Rest\Model\CampaignManagementService\GetListItemsBySharedListRequest $GetListItemsBySharedListRequest (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getListItemsBySharedList'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function getListItemsBySharedListRequest($GetListItemsBySharedListRequest, string $contentType = self::contentTypes['getListItemsBySharedList'][0])
    {

        // verify the required parameter 'GetListItemsBySharedListRequest' is set
        if ($GetListItemsBySharedListRequest === null || (is_array($GetListItemsBySharedListRequest) && count($GetListItemsBySharedListRequest) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $GetListItemsBySharedListRequest when calling getListItemsBySharedList'
            );
        }


        $resourcePath = '/CampaignManagement/v13/ListItems/QueryBySharedList';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $multipart = false;

        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        return $this->setupAndSendRequest(
            'POST',
            $resourcePath,
            $headers,
            $headerParams,
            $GetListItemsBySharedListRequest,
            $formParams,
            $multipart,
            true,
            true,
            false,
            'getHostSettingsForgetListItemsBySharedList',
            null,
            [],
            $queryParams
        );
    }

    /**
     * Operation getMediaAssociations
     *
     * @param  \Microsoft\MsAds\Rest\Model\CampaignManagementService\GetMediaAssociationsRequest $GetMediaAssociationsRequest GetMediaAssociationsRequest (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getMediaAssociations'] to see the possible values for this operation
     *
     * @throws \Microsoft\MsAds\Rest\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \Microsoft\MsAds\Rest\Model\CampaignManagementService\GetMediaAssociationsResponse|\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault|\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault|\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault|\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault
     */
    public function getMediaAssociations($GetMediaAssociationsRequest, string $contentType = self::contentTypes['getMediaAssociations'][0])
    {
        list($response) = $this->getMediaAssociationsWithHttpInfo($GetMediaAssociationsRequest, $contentType);
        return $response;
    }

    /**
     * Operation getMediaAssociationsWithHttpInfo
     *
     * @param  \Microsoft\MsAds\Rest\Model\CampaignManagementService\GetMediaAssociationsRequest $GetMediaAssociationsRequest (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getMediaAssociations'] to see the possible values for this operation
     *
     * @throws \Microsoft\MsAds\Rest\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \Microsoft\MsAds\Rest\Model\CampaignManagementService\GetMediaAssociationsResponse|\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault|\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault|\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault|\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault, HTTP status code, HTTP response headers (array of strings)
     */
    public function getMediaAssociationsWithHttpInfo($GetMediaAssociationsRequest, string $contentType = self::contentTypes['getMediaAssociations'][0])
    {
        $request = $this->getMediaAssociationsRequest($GetMediaAssociationsRequest, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                $response = $e->getResponse();
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            switch($statusCode) {
                case 200:
                    return $this->getResponseContent($request, $response, '\Microsoft\MsAds\Rest\Model\CampaignManagementService\GetMediaAssociationsResponse');
                case 400:
                    return $this->getResponseContent($request, $response, '\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault');
                case 500:
                    return $this->getResponseContent($request, $response, '\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault');
                case 401:
                    return $this->getResponseContent($request, $response, '\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault');
                case 403:
                    return $this->getResponseContent($request, $response, '\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault');
            }

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            $returnType = '\Microsoft\MsAds\Rest\Model\CampaignManagementService\GetMediaAssociationsResponse';
            return $this->getResponseContent($request, $response, $returnType);

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Microsoft\MsAds\Rest\Model\CampaignManagementService\GetMediaAssociationsResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 500:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 403:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getMediaAssociationsAsync
     *
     * @param  \Microsoft\MsAds\Rest\Model\CampaignManagementService\GetMediaAssociationsRequest $GetMediaAssociationsRequest (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getMediaAssociations'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getMediaAssociationsAsync($GetMediaAssociationsRequest, string $contentType = self::contentTypes['getMediaAssociations'][0])
    {
        return $this->getMediaAssociationsAsyncWithHttpInfo($GetMediaAssociationsRequest, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getMediaAssociationsAsyncWithHttpInfo
     *
     * @param  \Microsoft\MsAds\Rest\Model\CampaignManagementService\GetMediaAssociationsRequest $GetMediaAssociationsRequest (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getMediaAssociations'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getMediaAssociationsAsyncWithHttpInfo($GetMediaAssociationsRequest, string $contentType = self::contentTypes['getMediaAssociations'][0])
    {
        $returnType = '\Microsoft\MsAds\Rest\Model\CampaignManagementService\GetMediaAssociationsResponse';
        $request = $this->getMediaAssociationsRequest($GetMediaAssociationsRequest, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return $this->onFulfilledResponse($response, $returnType);
                },
                function ($exception) {
                    $this->onRejectedResponse($exception);
                }
            );
    }

    /**
     * Create request for operation 'getMediaAssociations'
     *
     * @param  \Microsoft\MsAds\Rest\Model\CampaignManagementService\GetMediaAssociationsRequest $GetMediaAssociationsRequest (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getMediaAssociations'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function getMediaAssociationsRequest($GetMediaAssociationsRequest, string $contentType = self::contentTypes['getMediaAssociations'][0])
    {

        // verify the required parameter 'GetMediaAssociationsRequest' is set
        if ($GetMediaAssociationsRequest === null || (is_array($GetMediaAssociationsRequest) && count($GetMediaAssociationsRequest) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $GetMediaAssociationsRequest when calling getMediaAssociations'
            );
        }


        $resourcePath = '/CampaignManagement/v13/MediaAssociations/Query';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $multipart = false;

        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        return $this->setupAndSendRequest(
            'POST',
            $resourcePath,
            $headers,
            $headerParams,
            $GetMediaAssociationsRequest,
            $formParams,
            $multipart,
            true,
            true,
            false,
            'getHostSettingsForgetMediaAssociations',
            null,
            [],
            $queryParams
        );
    }

    /**
     * Operation getMediaMetaDataByAccountId
     *
     * @param  \Microsoft\MsAds\Rest\Model\CampaignManagementService\GetMediaMetaDataByAccountIdRequest $GetMediaMetaDataByAccountIdRequest GetMediaMetaDataByAccountIdRequest (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getMediaMetaDataByAccountId'] to see the possible values for this operation
     *
     * @throws \Microsoft\MsAds\Rest\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \Microsoft\MsAds\Rest\Model\CampaignManagementService\GetMediaMetaDataByAccountIdResponse|\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault|\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault|\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault|\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault
     */
    public function getMediaMetaDataByAccountId($GetMediaMetaDataByAccountIdRequest, string $contentType = self::contentTypes['getMediaMetaDataByAccountId'][0])
    {
        list($response) = $this->getMediaMetaDataByAccountIdWithHttpInfo($GetMediaMetaDataByAccountIdRequest, $contentType);
        return $response;
    }

    /**
     * Operation getMediaMetaDataByAccountIdWithHttpInfo
     *
     * @param  \Microsoft\MsAds\Rest\Model\CampaignManagementService\GetMediaMetaDataByAccountIdRequest $GetMediaMetaDataByAccountIdRequest (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getMediaMetaDataByAccountId'] to see the possible values for this operation
     *
     * @throws \Microsoft\MsAds\Rest\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \Microsoft\MsAds\Rest\Model\CampaignManagementService\GetMediaMetaDataByAccountIdResponse|\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault|\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault|\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault|\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault, HTTP status code, HTTP response headers (array of strings)
     */
    public function getMediaMetaDataByAccountIdWithHttpInfo($GetMediaMetaDataByAccountIdRequest, string $contentType = self::contentTypes['getMediaMetaDataByAccountId'][0])
    {
        $request = $this->getMediaMetaDataByAccountIdRequest($GetMediaMetaDataByAccountIdRequest, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                $response = $e->getResponse();
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            switch($statusCode) {
                case 200:
                    return $this->getResponseContent($request, $response, '\Microsoft\MsAds\Rest\Model\CampaignManagementService\GetMediaMetaDataByAccountIdResponse');
                case 400:
                    return $this->getResponseContent($request, $response, '\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault');
                case 500:
                    return $this->getResponseContent($request, $response, '\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault');
                case 401:
                    return $this->getResponseContent($request, $response, '\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault');
                case 403:
                    return $this->getResponseContent($request, $response, '\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault');
            }

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            $returnType = '\Microsoft\MsAds\Rest\Model\CampaignManagementService\GetMediaMetaDataByAccountIdResponse';
            return $this->getResponseContent($request, $response, $returnType);

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Microsoft\MsAds\Rest\Model\CampaignManagementService\GetMediaMetaDataByAccountIdResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 500:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 403:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getMediaMetaDataByAccountIdAsync
     *
     * @param  \Microsoft\MsAds\Rest\Model\CampaignManagementService\GetMediaMetaDataByAccountIdRequest $GetMediaMetaDataByAccountIdRequest (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getMediaMetaDataByAccountId'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getMediaMetaDataByAccountIdAsync($GetMediaMetaDataByAccountIdRequest, string $contentType = self::contentTypes['getMediaMetaDataByAccountId'][0])
    {
        return $this->getMediaMetaDataByAccountIdAsyncWithHttpInfo($GetMediaMetaDataByAccountIdRequest, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getMediaMetaDataByAccountIdAsyncWithHttpInfo
     *
     * @param  \Microsoft\MsAds\Rest\Model\CampaignManagementService\GetMediaMetaDataByAccountIdRequest $GetMediaMetaDataByAccountIdRequest (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getMediaMetaDataByAccountId'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getMediaMetaDataByAccountIdAsyncWithHttpInfo($GetMediaMetaDataByAccountIdRequest, string $contentType = self::contentTypes['getMediaMetaDataByAccountId'][0])
    {
        $returnType = '\Microsoft\MsAds\Rest\Model\CampaignManagementService\GetMediaMetaDataByAccountIdResponse';
        $request = $this->getMediaMetaDataByAccountIdRequest($GetMediaMetaDataByAccountIdRequest, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return $this->onFulfilledResponse($response, $returnType);
                },
                function ($exception) {
                    $this->onRejectedResponse($exception);
                }
            );
    }

    /**
     * Create request for operation 'getMediaMetaDataByAccountId'
     *
     * @param  \Microsoft\MsAds\Rest\Model\CampaignManagementService\GetMediaMetaDataByAccountIdRequest $GetMediaMetaDataByAccountIdRequest (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getMediaMetaDataByAccountId'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function getMediaMetaDataByAccountIdRequest($GetMediaMetaDataByAccountIdRequest, string $contentType = self::contentTypes['getMediaMetaDataByAccountId'][0])
    {

        // verify the required parameter 'GetMediaMetaDataByAccountIdRequest' is set
        if ($GetMediaMetaDataByAccountIdRequest === null || (is_array($GetMediaMetaDataByAccountIdRequest) && count($GetMediaMetaDataByAccountIdRequest) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $GetMediaMetaDataByAccountIdRequest when calling getMediaMetaDataByAccountId'
            );
        }


        $resourcePath = '/CampaignManagement/v13/MediaMetaData/QueryByAccountId';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $multipart = false;

        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        return $this->setupAndSendRequest(
            'POST',
            $resourcePath,
            $headers,
            $headerParams,
            $GetMediaMetaDataByAccountIdRequest,
            $formParams,
            $multipart,
            true,
            true,
            false,
            'getHostSettingsForgetMediaMetaDataByAccountId',
            null,
            [],
            $queryParams
        );
    }

    /**
     * Operation getMediaMetaDataByIds
     *
     * @param  \Microsoft\MsAds\Rest\Model\CampaignManagementService\GetMediaMetaDataByIdsRequest $GetMediaMetaDataByIdsRequest GetMediaMetaDataByIdsRequest (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getMediaMetaDataByIds'] to see the possible values for this operation
     *
     * @throws \Microsoft\MsAds\Rest\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \Microsoft\MsAds\Rest\Model\CampaignManagementService\GetMediaMetaDataByIdsResponse|\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault|\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault|\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault|\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault
     */
    public function getMediaMetaDataByIds($GetMediaMetaDataByIdsRequest, string $contentType = self::contentTypes['getMediaMetaDataByIds'][0])
    {
        list($response) = $this->getMediaMetaDataByIdsWithHttpInfo($GetMediaMetaDataByIdsRequest, $contentType);
        return $response;
    }

    /**
     * Operation getMediaMetaDataByIdsWithHttpInfo
     *
     * @param  \Microsoft\MsAds\Rest\Model\CampaignManagementService\GetMediaMetaDataByIdsRequest $GetMediaMetaDataByIdsRequest (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getMediaMetaDataByIds'] to see the possible values for this operation
     *
     * @throws \Microsoft\MsAds\Rest\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \Microsoft\MsAds\Rest\Model\CampaignManagementService\GetMediaMetaDataByIdsResponse|\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault|\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault|\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault|\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault, HTTP status code, HTTP response headers (array of strings)
     */
    public function getMediaMetaDataByIdsWithHttpInfo($GetMediaMetaDataByIdsRequest, string $contentType = self::contentTypes['getMediaMetaDataByIds'][0])
    {
        $request = $this->getMediaMetaDataByIdsRequest($GetMediaMetaDataByIdsRequest, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                $response = $e->getResponse();
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            switch($statusCode) {
                case 200:
                    return $this->getResponseContent($request, $response, '\Microsoft\MsAds\Rest\Model\CampaignManagementService\GetMediaMetaDataByIdsResponse');
                case 400:
                    return $this->getResponseContent($request, $response, '\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault');
                case 500:
                    return $this->getResponseContent($request, $response, '\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault');
                case 401:
                    return $this->getResponseContent($request, $response, '\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault');
                case 403:
                    return $this->getResponseContent($request, $response, '\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault');
            }

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            $returnType = '\Microsoft\MsAds\Rest\Model\CampaignManagementService\GetMediaMetaDataByIdsResponse';
            return $this->getResponseContent($request, $response, $returnType);

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Microsoft\MsAds\Rest\Model\CampaignManagementService\GetMediaMetaDataByIdsResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 500:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 403:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getMediaMetaDataByIdsAsync
     *
     * @param  \Microsoft\MsAds\Rest\Model\CampaignManagementService\GetMediaMetaDataByIdsRequest $GetMediaMetaDataByIdsRequest (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getMediaMetaDataByIds'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getMediaMetaDataByIdsAsync($GetMediaMetaDataByIdsRequest, string $contentType = self::contentTypes['getMediaMetaDataByIds'][0])
    {
        return $this->getMediaMetaDataByIdsAsyncWithHttpInfo($GetMediaMetaDataByIdsRequest, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getMediaMetaDataByIdsAsyncWithHttpInfo
     *
     * @param  \Microsoft\MsAds\Rest\Model\CampaignManagementService\GetMediaMetaDataByIdsRequest $GetMediaMetaDataByIdsRequest (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getMediaMetaDataByIds'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getMediaMetaDataByIdsAsyncWithHttpInfo($GetMediaMetaDataByIdsRequest, string $contentType = self::contentTypes['getMediaMetaDataByIds'][0])
    {
        $returnType = '\Microsoft\MsAds\Rest\Model\CampaignManagementService\GetMediaMetaDataByIdsResponse';
        $request = $this->getMediaMetaDataByIdsRequest($GetMediaMetaDataByIdsRequest, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return $this->onFulfilledResponse($response, $returnType);
                },
                function ($exception) {
                    $this->onRejectedResponse($exception);
                }
            );
    }

    /**
     * Create request for operation 'getMediaMetaDataByIds'
     *
     * @param  \Microsoft\MsAds\Rest\Model\CampaignManagementService\GetMediaMetaDataByIdsRequest $GetMediaMetaDataByIdsRequest (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getMediaMetaDataByIds'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function getMediaMetaDataByIdsRequest($GetMediaMetaDataByIdsRequest, string $contentType = self::contentTypes['getMediaMetaDataByIds'][0])
    {

        // verify the required parameter 'GetMediaMetaDataByIdsRequest' is set
        if ($GetMediaMetaDataByIdsRequest === null || (is_array($GetMediaMetaDataByIdsRequest) && count($GetMediaMetaDataByIdsRequest) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $GetMediaMetaDataByIdsRequest when calling getMediaMetaDataByIds'
            );
        }


        $resourcePath = '/CampaignManagement/v13/MediaMetaData/QueryByIds';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $multipart = false;

        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        return $this->setupAndSendRequest(
            'POST',
            $resourcePath,
            $headers,
            $headerParams,
            $GetMediaMetaDataByIdsRequest,
            $formParams,
            $multipart,
            true,
            true,
            false,
            'getHostSettingsForgetMediaMetaDataByIds',
            null,
            [],
            $queryParams
        );
    }

    /**
     * Operation getNegativeKeywordsByEntityIds
     *
     * @param  \Microsoft\MsAds\Rest\Model\CampaignManagementService\GetNegativeKeywordsByEntityIdsRequest $GetNegativeKeywordsByEntityIdsRequest GetNegativeKeywordsByEntityIdsRequest (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getNegativeKeywordsByEntityIds'] to see the possible values for this operation
     *
     * @throws \Microsoft\MsAds\Rest\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \Microsoft\MsAds\Rest\Model\CampaignManagementService\GetNegativeKeywordsByEntityIdsResponse|\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault|\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault|\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault|\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault
     */
    public function getNegativeKeywordsByEntityIds($GetNegativeKeywordsByEntityIdsRequest, string $contentType = self::contentTypes['getNegativeKeywordsByEntityIds'][0])
    {
        list($response) = $this->getNegativeKeywordsByEntityIdsWithHttpInfo($GetNegativeKeywordsByEntityIdsRequest, $contentType);
        return $response;
    }

    /**
     * Operation getNegativeKeywordsByEntityIdsWithHttpInfo
     *
     * @param  \Microsoft\MsAds\Rest\Model\CampaignManagementService\GetNegativeKeywordsByEntityIdsRequest $GetNegativeKeywordsByEntityIdsRequest (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getNegativeKeywordsByEntityIds'] to see the possible values for this operation
     *
     * @throws \Microsoft\MsAds\Rest\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \Microsoft\MsAds\Rest\Model\CampaignManagementService\GetNegativeKeywordsByEntityIdsResponse|\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault|\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault|\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault|\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault, HTTP status code, HTTP response headers (array of strings)
     */
    public function getNegativeKeywordsByEntityIdsWithHttpInfo($GetNegativeKeywordsByEntityIdsRequest, string $contentType = self::contentTypes['getNegativeKeywordsByEntityIds'][0])
    {
        $request = $this->getNegativeKeywordsByEntityIdsRequest($GetNegativeKeywordsByEntityIdsRequest, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                $response = $e->getResponse();
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            switch($statusCode) {
                case 200:
                    return $this->getResponseContent($request, $response, '\Microsoft\MsAds\Rest\Model\CampaignManagementService\GetNegativeKeywordsByEntityIdsResponse');
                case 400:
                    return $this->getResponseContent($request, $response, '\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault');
                case 500:
                    return $this->getResponseContent($request, $response, '\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault');
                case 401:
                    return $this->getResponseContent($request, $response, '\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault');
                case 403:
                    return $this->getResponseContent($request, $response, '\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault');
            }

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            $returnType = '\Microsoft\MsAds\Rest\Model\CampaignManagementService\GetNegativeKeywordsByEntityIdsResponse';
            return $this->getResponseContent($request, $response, $returnType);

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Microsoft\MsAds\Rest\Model\CampaignManagementService\GetNegativeKeywordsByEntityIdsResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 500:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 403:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getNegativeKeywordsByEntityIdsAsync
     *
     * @param  \Microsoft\MsAds\Rest\Model\CampaignManagementService\GetNegativeKeywordsByEntityIdsRequest $GetNegativeKeywordsByEntityIdsRequest (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getNegativeKeywordsByEntityIds'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getNegativeKeywordsByEntityIdsAsync($GetNegativeKeywordsByEntityIdsRequest, string $contentType = self::contentTypes['getNegativeKeywordsByEntityIds'][0])
    {
        return $this->getNegativeKeywordsByEntityIdsAsyncWithHttpInfo($GetNegativeKeywordsByEntityIdsRequest, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getNegativeKeywordsByEntityIdsAsyncWithHttpInfo
     *
     * @param  \Microsoft\MsAds\Rest\Model\CampaignManagementService\GetNegativeKeywordsByEntityIdsRequest $GetNegativeKeywordsByEntityIdsRequest (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getNegativeKeywordsByEntityIds'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getNegativeKeywordsByEntityIdsAsyncWithHttpInfo($GetNegativeKeywordsByEntityIdsRequest, string $contentType = self::contentTypes['getNegativeKeywordsByEntityIds'][0])
    {
        $returnType = '\Microsoft\MsAds\Rest\Model\CampaignManagementService\GetNegativeKeywordsByEntityIdsResponse';
        $request = $this->getNegativeKeywordsByEntityIdsRequest($GetNegativeKeywordsByEntityIdsRequest, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return $this->onFulfilledResponse($response, $returnType);
                },
                function ($exception) {
                    $this->onRejectedResponse($exception);
                }
            );
    }

    /**
     * Create request for operation 'getNegativeKeywordsByEntityIds'
     *
     * @param  \Microsoft\MsAds\Rest\Model\CampaignManagementService\GetNegativeKeywordsByEntityIdsRequest $GetNegativeKeywordsByEntityIdsRequest (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getNegativeKeywordsByEntityIds'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function getNegativeKeywordsByEntityIdsRequest($GetNegativeKeywordsByEntityIdsRequest, string $contentType = self::contentTypes['getNegativeKeywordsByEntityIds'][0])
    {

        // verify the required parameter 'GetNegativeKeywordsByEntityIdsRequest' is set
        if ($GetNegativeKeywordsByEntityIdsRequest === null || (is_array($GetNegativeKeywordsByEntityIdsRequest) && count($GetNegativeKeywordsByEntityIdsRequest) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $GetNegativeKeywordsByEntityIdsRequest when calling getNegativeKeywordsByEntityIds'
            );
        }


        $resourcePath = '/CampaignManagement/v13/NegativeKeywords/QueryByEntityIds';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $multipart = false;

        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        return $this->setupAndSendRequest(
            'POST',
            $resourcePath,
            $headers,
            $headerParams,
            $GetNegativeKeywordsByEntityIdsRequest,
            $formParams,
            $multipart,
            true,
            true,
            false,
            'getHostSettingsForgetNegativeKeywordsByEntityIds',
            null,
            [],
            $queryParams
        );
    }

    /**
     * Operation getNegativeSitesByAdGroupIds
     *
     * @param  \Microsoft\MsAds\Rest\Model\CampaignManagementService\GetNegativeSitesByAdGroupIdsRequest $GetNegativeSitesByAdGroupIdsRequest GetNegativeSitesByAdGroupIdsRequest (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getNegativeSitesByAdGroupIds'] to see the possible values for this operation
     *
     * @throws \Microsoft\MsAds\Rest\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \Microsoft\MsAds\Rest\Model\CampaignManagementService\GetNegativeSitesByAdGroupIdsResponse|\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault|\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault|\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault|\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault
     */
    public function getNegativeSitesByAdGroupIds($GetNegativeSitesByAdGroupIdsRequest, string $contentType = self::contentTypes['getNegativeSitesByAdGroupIds'][0])
    {
        list($response) = $this->getNegativeSitesByAdGroupIdsWithHttpInfo($GetNegativeSitesByAdGroupIdsRequest, $contentType);
        return $response;
    }

    /**
     * Operation getNegativeSitesByAdGroupIdsWithHttpInfo
     *
     * @param  \Microsoft\MsAds\Rest\Model\CampaignManagementService\GetNegativeSitesByAdGroupIdsRequest $GetNegativeSitesByAdGroupIdsRequest (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getNegativeSitesByAdGroupIds'] to see the possible values for this operation
     *
     * @throws \Microsoft\MsAds\Rest\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \Microsoft\MsAds\Rest\Model\CampaignManagementService\GetNegativeSitesByAdGroupIdsResponse|\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault|\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault|\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault|\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault, HTTP status code, HTTP response headers (array of strings)
     */
    public function getNegativeSitesByAdGroupIdsWithHttpInfo($GetNegativeSitesByAdGroupIdsRequest, string $contentType = self::contentTypes['getNegativeSitesByAdGroupIds'][0])
    {
        $request = $this->getNegativeSitesByAdGroupIdsRequest($GetNegativeSitesByAdGroupIdsRequest, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                $response = $e->getResponse();
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            switch($statusCode) {
                case 200:
                    return $this->getResponseContent($request, $response, '\Microsoft\MsAds\Rest\Model\CampaignManagementService\GetNegativeSitesByAdGroupIdsResponse');
                case 400:
                    return $this->getResponseContent($request, $response, '\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault');
                case 500:
                    return $this->getResponseContent($request, $response, '\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault');
                case 401:
                    return $this->getResponseContent($request, $response, '\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault');
                case 403:
                    return $this->getResponseContent($request, $response, '\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault');
            }

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            $returnType = '\Microsoft\MsAds\Rest\Model\CampaignManagementService\GetNegativeSitesByAdGroupIdsResponse';
            return $this->getResponseContent($request, $response, $returnType);

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Microsoft\MsAds\Rest\Model\CampaignManagementService\GetNegativeSitesByAdGroupIdsResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 500:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 403:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getNegativeSitesByAdGroupIdsAsync
     *
     * @param  \Microsoft\MsAds\Rest\Model\CampaignManagementService\GetNegativeSitesByAdGroupIdsRequest $GetNegativeSitesByAdGroupIdsRequest (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getNegativeSitesByAdGroupIds'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getNegativeSitesByAdGroupIdsAsync($GetNegativeSitesByAdGroupIdsRequest, string $contentType = self::contentTypes['getNegativeSitesByAdGroupIds'][0])
    {
        return $this->getNegativeSitesByAdGroupIdsAsyncWithHttpInfo($GetNegativeSitesByAdGroupIdsRequest, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getNegativeSitesByAdGroupIdsAsyncWithHttpInfo
     *
     * @param  \Microsoft\MsAds\Rest\Model\CampaignManagementService\GetNegativeSitesByAdGroupIdsRequest $GetNegativeSitesByAdGroupIdsRequest (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getNegativeSitesByAdGroupIds'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getNegativeSitesByAdGroupIdsAsyncWithHttpInfo($GetNegativeSitesByAdGroupIdsRequest, string $contentType = self::contentTypes['getNegativeSitesByAdGroupIds'][0])
    {
        $returnType = '\Microsoft\MsAds\Rest\Model\CampaignManagementService\GetNegativeSitesByAdGroupIdsResponse';
        $request = $this->getNegativeSitesByAdGroupIdsRequest($GetNegativeSitesByAdGroupIdsRequest, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return $this->onFulfilledResponse($response, $returnType);
                },
                function ($exception) {
                    $this->onRejectedResponse($exception);
                }
            );
    }

    /**
     * Create request for operation 'getNegativeSitesByAdGroupIds'
     *
     * @param  \Microsoft\MsAds\Rest\Model\CampaignManagementService\GetNegativeSitesByAdGroupIdsRequest $GetNegativeSitesByAdGroupIdsRequest (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getNegativeSitesByAdGroupIds'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function getNegativeSitesByAdGroupIdsRequest($GetNegativeSitesByAdGroupIdsRequest, string $contentType = self::contentTypes['getNegativeSitesByAdGroupIds'][0])
    {

        // verify the required parameter 'GetNegativeSitesByAdGroupIdsRequest' is set
        if ($GetNegativeSitesByAdGroupIdsRequest === null || (is_array($GetNegativeSitesByAdGroupIdsRequest) && count($GetNegativeSitesByAdGroupIdsRequest) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $GetNegativeSitesByAdGroupIdsRequest when calling getNegativeSitesByAdGroupIds'
            );
        }


        $resourcePath = '/CampaignManagement/v13/NegativeSites/QueryByAdGroupIds';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $multipart = false;

        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        return $this->setupAndSendRequest(
            'POST',
            $resourcePath,
            $headers,
            $headerParams,
            $GetNegativeSitesByAdGroupIdsRequest,
            $formParams,
            $multipart,
            true,
            true,
            false,
            'getHostSettingsForgetNegativeSitesByAdGroupIds',
            null,
            [],
            $queryParams
        );
    }

    /**
     * Operation getNegativeSitesByCampaignIds
     *
     * @param  \Microsoft\MsAds\Rest\Model\CampaignManagementService\GetNegativeSitesByCampaignIdsRequest $GetNegativeSitesByCampaignIdsRequest GetNegativeSitesByCampaignIdsRequest (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getNegativeSitesByCampaignIds'] to see the possible values for this operation
     *
     * @throws \Microsoft\MsAds\Rest\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \Microsoft\MsAds\Rest\Model\CampaignManagementService\GetNegativeSitesByCampaignIdsResponse|\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault|\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault|\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault|\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault
     */
    public function getNegativeSitesByCampaignIds($GetNegativeSitesByCampaignIdsRequest, string $contentType = self::contentTypes['getNegativeSitesByCampaignIds'][0])
    {
        list($response) = $this->getNegativeSitesByCampaignIdsWithHttpInfo($GetNegativeSitesByCampaignIdsRequest, $contentType);
        return $response;
    }

    /**
     * Operation getNegativeSitesByCampaignIdsWithHttpInfo
     *
     * @param  \Microsoft\MsAds\Rest\Model\CampaignManagementService\GetNegativeSitesByCampaignIdsRequest $GetNegativeSitesByCampaignIdsRequest (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getNegativeSitesByCampaignIds'] to see the possible values for this operation
     *
     * @throws \Microsoft\MsAds\Rest\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \Microsoft\MsAds\Rest\Model\CampaignManagementService\GetNegativeSitesByCampaignIdsResponse|\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault|\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault|\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault|\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault, HTTP status code, HTTP response headers (array of strings)
     */
    public function getNegativeSitesByCampaignIdsWithHttpInfo($GetNegativeSitesByCampaignIdsRequest, string $contentType = self::contentTypes['getNegativeSitesByCampaignIds'][0])
    {
        $request = $this->getNegativeSitesByCampaignIdsRequest($GetNegativeSitesByCampaignIdsRequest, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                $response = $e->getResponse();
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            switch($statusCode) {
                case 200:
                    return $this->getResponseContent($request, $response, '\Microsoft\MsAds\Rest\Model\CampaignManagementService\GetNegativeSitesByCampaignIdsResponse');
                case 400:
                    return $this->getResponseContent($request, $response, '\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault');
                case 500:
                    return $this->getResponseContent($request, $response, '\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault');
                case 401:
                    return $this->getResponseContent($request, $response, '\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault');
                case 403:
                    return $this->getResponseContent($request, $response, '\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault');
            }

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            $returnType = '\Microsoft\MsAds\Rest\Model\CampaignManagementService\GetNegativeSitesByCampaignIdsResponse';
            return $this->getResponseContent($request, $response, $returnType);

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Microsoft\MsAds\Rest\Model\CampaignManagementService\GetNegativeSitesByCampaignIdsResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 500:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 403:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getNegativeSitesByCampaignIdsAsync
     *
     * @param  \Microsoft\MsAds\Rest\Model\CampaignManagementService\GetNegativeSitesByCampaignIdsRequest $GetNegativeSitesByCampaignIdsRequest (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getNegativeSitesByCampaignIds'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getNegativeSitesByCampaignIdsAsync($GetNegativeSitesByCampaignIdsRequest, string $contentType = self::contentTypes['getNegativeSitesByCampaignIds'][0])
    {
        return $this->getNegativeSitesByCampaignIdsAsyncWithHttpInfo($GetNegativeSitesByCampaignIdsRequest, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getNegativeSitesByCampaignIdsAsyncWithHttpInfo
     *
     * @param  \Microsoft\MsAds\Rest\Model\CampaignManagementService\GetNegativeSitesByCampaignIdsRequest $GetNegativeSitesByCampaignIdsRequest (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getNegativeSitesByCampaignIds'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getNegativeSitesByCampaignIdsAsyncWithHttpInfo($GetNegativeSitesByCampaignIdsRequest, string $contentType = self::contentTypes['getNegativeSitesByCampaignIds'][0])
    {
        $returnType = '\Microsoft\MsAds\Rest\Model\CampaignManagementService\GetNegativeSitesByCampaignIdsResponse';
        $request = $this->getNegativeSitesByCampaignIdsRequest($GetNegativeSitesByCampaignIdsRequest, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return $this->onFulfilledResponse($response, $returnType);
                },
                function ($exception) {
                    $this->onRejectedResponse($exception);
                }
            );
    }

    /**
     * Create request for operation 'getNegativeSitesByCampaignIds'
     *
     * @param  \Microsoft\MsAds\Rest\Model\CampaignManagementService\GetNegativeSitesByCampaignIdsRequest $GetNegativeSitesByCampaignIdsRequest (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getNegativeSitesByCampaignIds'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function getNegativeSitesByCampaignIdsRequest($GetNegativeSitesByCampaignIdsRequest, string $contentType = self::contentTypes['getNegativeSitesByCampaignIds'][0])
    {

        // verify the required parameter 'GetNegativeSitesByCampaignIdsRequest' is set
        if ($GetNegativeSitesByCampaignIdsRequest === null || (is_array($GetNegativeSitesByCampaignIdsRequest) && count($GetNegativeSitesByCampaignIdsRequest) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $GetNegativeSitesByCampaignIdsRequest when calling getNegativeSitesByCampaignIds'
            );
        }


        $resourcePath = '/CampaignManagement/v13/NegativeSites/QueryByCampaignIds';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $multipart = false;

        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        return $this->setupAndSendRequest(
            'POST',
            $resourcePath,
            $headers,
            $headerParams,
            $GetNegativeSitesByCampaignIdsRequest,
            $formParams,
            $multipart,
            true,
            true,
            false,
            'getHostSettingsForgetNegativeSitesByCampaignIds',
            null,
            [],
            $queryParams
        );
    }

    /**
     * Operation getNewCustomerAcquisitionGoalsByAccountId
     *
     * @param  \Microsoft\MsAds\Rest\Model\CampaignManagementService\GetNewCustomerAcquisitionGoalsByAccountIdRequest $GetNewCustomerAcquisitionGoalsByAccountIdRequest GetNewCustomerAcquisitionGoalsByAccountIdRequest (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getNewCustomerAcquisitionGoalsByAccountId'] to see the possible values for this operation
     *
     * @throws \Microsoft\MsAds\Rest\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \Microsoft\MsAds\Rest\Model\CampaignManagementService\GetNewCustomerAcquisitionGoalsByAccountIdResponse|\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault|\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault|\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault|\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault
     */
    public function getNewCustomerAcquisitionGoalsByAccountId($GetNewCustomerAcquisitionGoalsByAccountIdRequest, string $contentType = self::contentTypes['getNewCustomerAcquisitionGoalsByAccountId'][0])
    {
        list($response) = $this->getNewCustomerAcquisitionGoalsByAccountIdWithHttpInfo($GetNewCustomerAcquisitionGoalsByAccountIdRequest, $contentType);
        return $response;
    }

    /**
     * Operation getNewCustomerAcquisitionGoalsByAccountIdWithHttpInfo
     *
     * @param  \Microsoft\MsAds\Rest\Model\CampaignManagementService\GetNewCustomerAcquisitionGoalsByAccountIdRequest $GetNewCustomerAcquisitionGoalsByAccountIdRequest (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getNewCustomerAcquisitionGoalsByAccountId'] to see the possible values for this operation
     *
     * @throws \Microsoft\MsAds\Rest\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \Microsoft\MsAds\Rest\Model\CampaignManagementService\GetNewCustomerAcquisitionGoalsByAccountIdResponse|\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault|\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault|\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault|\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault, HTTP status code, HTTP response headers (array of strings)
     */
    public function getNewCustomerAcquisitionGoalsByAccountIdWithHttpInfo($GetNewCustomerAcquisitionGoalsByAccountIdRequest, string $contentType = self::contentTypes['getNewCustomerAcquisitionGoalsByAccountId'][0])
    {
        $request = $this->getNewCustomerAcquisitionGoalsByAccountIdRequest($GetNewCustomerAcquisitionGoalsByAccountIdRequest, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                $response = $e->getResponse();
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            switch($statusCode) {
                case 200:
                    return $this->getResponseContent($request, $response, '\Microsoft\MsAds\Rest\Model\CampaignManagementService\GetNewCustomerAcquisitionGoalsByAccountIdResponse');
                case 400:
                    return $this->getResponseContent($request, $response, '\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault');
                case 500:
                    return $this->getResponseContent($request, $response, '\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault');
                case 401:
                    return $this->getResponseContent($request, $response, '\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault');
                case 403:
                    return $this->getResponseContent($request, $response, '\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault');
            }

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            $returnType = '\Microsoft\MsAds\Rest\Model\CampaignManagementService\GetNewCustomerAcquisitionGoalsByAccountIdResponse';
            return $this->getResponseContent($request, $response, $returnType);

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Microsoft\MsAds\Rest\Model\CampaignManagementService\GetNewCustomerAcquisitionGoalsByAccountIdResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 500:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 403:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getNewCustomerAcquisitionGoalsByAccountIdAsync
     *
     * @param  \Microsoft\MsAds\Rest\Model\CampaignManagementService\GetNewCustomerAcquisitionGoalsByAccountIdRequest $GetNewCustomerAcquisitionGoalsByAccountIdRequest (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getNewCustomerAcquisitionGoalsByAccountId'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getNewCustomerAcquisitionGoalsByAccountIdAsync($GetNewCustomerAcquisitionGoalsByAccountIdRequest, string $contentType = self::contentTypes['getNewCustomerAcquisitionGoalsByAccountId'][0])
    {
        return $this->getNewCustomerAcquisitionGoalsByAccountIdAsyncWithHttpInfo($GetNewCustomerAcquisitionGoalsByAccountIdRequest, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getNewCustomerAcquisitionGoalsByAccountIdAsyncWithHttpInfo
     *
     * @param  \Microsoft\MsAds\Rest\Model\CampaignManagementService\GetNewCustomerAcquisitionGoalsByAccountIdRequest $GetNewCustomerAcquisitionGoalsByAccountIdRequest (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getNewCustomerAcquisitionGoalsByAccountId'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getNewCustomerAcquisitionGoalsByAccountIdAsyncWithHttpInfo($GetNewCustomerAcquisitionGoalsByAccountIdRequest, string $contentType = self::contentTypes['getNewCustomerAcquisitionGoalsByAccountId'][0])
    {
        $returnType = '\Microsoft\MsAds\Rest\Model\CampaignManagementService\GetNewCustomerAcquisitionGoalsByAccountIdResponse';
        $request = $this->getNewCustomerAcquisitionGoalsByAccountIdRequest($GetNewCustomerAcquisitionGoalsByAccountIdRequest, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return $this->onFulfilledResponse($response, $returnType);
                },
                function ($exception) {
                    $this->onRejectedResponse($exception);
                }
            );
    }

    /**
     * Create request for operation 'getNewCustomerAcquisitionGoalsByAccountId'
     *
     * @param  \Microsoft\MsAds\Rest\Model\CampaignManagementService\GetNewCustomerAcquisitionGoalsByAccountIdRequest $GetNewCustomerAcquisitionGoalsByAccountIdRequest (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getNewCustomerAcquisitionGoalsByAccountId'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function getNewCustomerAcquisitionGoalsByAccountIdRequest($GetNewCustomerAcquisitionGoalsByAccountIdRequest, string $contentType = self::contentTypes['getNewCustomerAcquisitionGoalsByAccountId'][0])
    {

        // verify the required parameter 'GetNewCustomerAcquisitionGoalsByAccountIdRequest' is set
        if ($GetNewCustomerAcquisitionGoalsByAccountIdRequest === null || (is_array($GetNewCustomerAcquisitionGoalsByAccountIdRequest) && count($GetNewCustomerAcquisitionGoalsByAccountIdRequest) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $GetNewCustomerAcquisitionGoalsByAccountIdRequest when calling getNewCustomerAcquisitionGoalsByAccountId'
            );
        }


        $resourcePath = '/CampaignManagement/v13/NewCustomerAcquisitionGoals/QueryByAccountId';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $multipart = false;

        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        return $this->setupAndSendRequest(
            'POST',
            $resourcePath,
            $headers,
            $headerParams,
            $GetNewCustomerAcquisitionGoalsByAccountIdRequest,
            $formParams,
            $multipart,
            true,
            true,
            false,
            'getHostSettingsForgetNewCustomerAcquisitionGoalsByAccountId',
            null,
            [],
            $queryParams
        );
    }

    /**
     * Operation getOfflineConversionReports
     *
     * @param  \Microsoft\MsAds\Rest\Model\CampaignManagementService\GetOfflineConversionReportsRequest $GetOfflineConversionReportsRequest GetOfflineConversionReportsRequest (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getOfflineConversionReports'] to see the possible values for this operation
     *
     * @throws \Microsoft\MsAds\Rest\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \Microsoft\MsAds\Rest\Model\CampaignManagementService\GetOfflineConversionReportsResponse|\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault|\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault|\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault|\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault
     */
    public function getOfflineConversionReports($GetOfflineConversionReportsRequest, string $contentType = self::contentTypes['getOfflineConversionReports'][0])
    {
        list($response) = $this->getOfflineConversionReportsWithHttpInfo($GetOfflineConversionReportsRequest, $contentType);
        return $response;
    }

    /**
     * Operation getOfflineConversionReportsWithHttpInfo
     *
     * @param  \Microsoft\MsAds\Rest\Model\CampaignManagementService\GetOfflineConversionReportsRequest $GetOfflineConversionReportsRequest (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getOfflineConversionReports'] to see the possible values for this operation
     *
     * @throws \Microsoft\MsAds\Rest\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \Microsoft\MsAds\Rest\Model\CampaignManagementService\GetOfflineConversionReportsResponse|\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault|\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault|\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault|\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault, HTTP status code, HTTP response headers (array of strings)
     */
    public function getOfflineConversionReportsWithHttpInfo($GetOfflineConversionReportsRequest, string $contentType = self::contentTypes['getOfflineConversionReports'][0])
    {
        $request = $this->getOfflineConversionReportsRequest($GetOfflineConversionReportsRequest, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                $response = $e->getResponse();
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            switch($statusCode) {
                case 200:
                    return $this->getResponseContent($request, $response, '\Microsoft\MsAds\Rest\Model\CampaignManagementService\GetOfflineConversionReportsResponse');
                case 400:
                    return $this->getResponseContent($request, $response, '\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault');
                case 500:
                    return $this->getResponseContent($request, $response, '\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault');
                case 401:
                    return $this->getResponseContent($request, $response, '\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault');
                case 403:
                    return $this->getResponseContent($request, $response, '\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault');
            }

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            $returnType = '\Microsoft\MsAds\Rest\Model\CampaignManagementService\GetOfflineConversionReportsResponse';
            return $this->getResponseContent($request, $response, $returnType);

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Microsoft\MsAds\Rest\Model\CampaignManagementService\GetOfflineConversionReportsResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 500:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 403:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getOfflineConversionReportsAsync
     *
     * @param  \Microsoft\MsAds\Rest\Model\CampaignManagementService\GetOfflineConversionReportsRequest $GetOfflineConversionReportsRequest (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getOfflineConversionReports'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getOfflineConversionReportsAsync($GetOfflineConversionReportsRequest, string $contentType = self::contentTypes['getOfflineConversionReports'][0])
    {
        return $this->getOfflineConversionReportsAsyncWithHttpInfo($GetOfflineConversionReportsRequest, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getOfflineConversionReportsAsyncWithHttpInfo
     *
     * @param  \Microsoft\MsAds\Rest\Model\CampaignManagementService\GetOfflineConversionReportsRequest $GetOfflineConversionReportsRequest (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getOfflineConversionReports'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getOfflineConversionReportsAsyncWithHttpInfo($GetOfflineConversionReportsRequest, string $contentType = self::contentTypes['getOfflineConversionReports'][0])
    {
        $returnType = '\Microsoft\MsAds\Rest\Model\CampaignManagementService\GetOfflineConversionReportsResponse';
        $request = $this->getOfflineConversionReportsRequest($GetOfflineConversionReportsRequest, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return $this->onFulfilledResponse($response, $returnType);
                },
                function ($exception) {
                    $this->onRejectedResponse($exception);
                }
            );
    }

    /**
     * Create request for operation 'getOfflineConversionReports'
     *
     * @param  \Microsoft\MsAds\Rest\Model\CampaignManagementService\GetOfflineConversionReportsRequest $GetOfflineConversionReportsRequest (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getOfflineConversionReports'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function getOfflineConversionReportsRequest($GetOfflineConversionReportsRequest, string $contentType = self::contentTypes['getOfflineConversionReports'][0])
    {

        // verify the required parameter 'GetOfflineConversionReportsRequest' is set
        if ($GetOfflineConversionReportsRequest === null || (is_array($GetOfflineConversionReportsRequest) && count($GetOfflineConversionReportsRequest) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $GetOfflineConversionReportsRequest when calling getOfflineConversionReports'
            );
        }


        $resourcePath = '/CampaignManagement/v13/OfflineConversionReports/Query';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $multipart = false;

        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        return $this->setupAndSendRequest(
            'POST',
            $resourcePath,
            $headers,
            $headerParams,
            $GetOfflineConversionReportsRequest,
            $formParams,
            $multipart,
            true,
            true,
            false,
            'getHostSettingsForgetOfflineConversionReports',
            null,
            [],
            $queryParams
        );
    }

    /**
     * Operation getProfileDataFileUrl
     *
     * @param  \Microsoft\MsAds\Rest\Model\CampaignManagementService\GetProfileDataFileUrlRequest $GetProfileDataFileUrlRequest GetProfileDataFileUrlRequest (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getProfileDataFileUrl'] to see the possible values for this operation
     *
     * @throws \Microsoft\MsAds\Rest\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \Microsoft\MsAds\Rest\Model\CampaignManagementService\GetProfileDataFileUrlResponse|\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault|\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault|\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault|\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault
     */
    public function getProfileDataFileUrl($GetProfileDataFileUrlRequest, string $contentType = self::contentTypes['getProfileDataFileUrl'][0])
    {
        list($response) = $this->getProfileDataFileUrlWithHttpInfo($GetProfileDataFileUrlRequest, $contentType);
        return $response;
    }

    /**
     * Operation getProfileDataFileUrlWithHttpInfo
     *
     * @param  \Microsoft\MsAds\Rest\Model\CampaignManagementService\GetProfileDataFileUrlRequest $GetProfileDataFileUrlRequest (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getProfileDataFileUrl'] to see the possible values for this operation
     *
     * @throws \Microsoft\MsAds\Rest\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \Microsoft\MsAds\Rest\Model\CampaignManagementService\GetProfileDataFileUrlResponse|\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault|\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault|\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault|\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault, HTTP status code, HTTP response headers (array of strings)
     */
    public function getProfileDataFileUrlWithHttpInfo($GetProfileDataFileUrlRequest, string $contentType = self::contentTypes['getProfileDataFileUrl'][0])
    {
        $request = $this->getProfileDataFileUrlRequest($GetProfileDataFileUrlRequest, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                $response = $e->getResponse();
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            switch($statusCode) {
                case 200:
                    return $this->getResponseContent($request, $response, '\Microsoft\MsAds\Rest\Model\CampaignManagementService\GetProfileDataFileUrlResponse');
                case 400:
                    return $this->getResponseContent($request, $response, '\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault');
                case 500:
                    return $this->getResponseContent($request, $response, '\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault');
                case 401:
                    return $this->getResponseContent($request, $response, '\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault');
                case 403:
                    return $this->getResponseContent($request, $response, '\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault');
            }

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            $returnType = '\Microsoft\MsAds\Rest\Model\CampaignManagementService\GetProfileDataFileUrlResponse';
            return $this->getResponseContent($request, $response, $returnType);

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Microsoft\MsAds\Rest\Model\CampaignManagementService\GetProfileDataFileUrlResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 500:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 403:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getProfileDataFileUrlAsync
     *
     * @param  \Microsoft\MsAds\Rest\Model\CampaignManagementService\GetProfileDataFileUrlRequest $GetProfileDataFileUrlRequest (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getProfileDataFileUrl'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getProfileDataFileUrlAsync($GetProfileDataFileUrlRequest, string $contentType = self::contentTypes['getProfileDataFileUrl'][0])
    {
        return $this->getProfileDataFileUrlAsyncWithHttpInfo($GetProfileDataFileUrlRequest, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getProfileDataFileUrlAsyncWithHttpInfo
     *
     * @param  \Microsoft\MsAds\Rest\Model\CampaignManagementService\GetProfileDataFileUrlRequest $GetProfileDataFileUrlRequest (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getProfileDataFileUrl'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getProfileDataFileUrlAsyncWithHttpInfo($GetProfileDataFileUrlRequest, string $contentType = self::contentTypes['getProfileDataFileUrl'][0])
    {
        $returnType = '\Microsoft\MsAds\Rest\Model\CampaignManagementService\GetProfileDataFileUrlResponse';
        $request = $this->getProfileDataFileUrlRequest($GetProfileDataFileUrlRequest, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return $this->onFulfilledResponse($response, $returnType);
                },
                function ($exception) {
                    $this->onRejectedResponse($exception);
                }
            );
    }

    /**
     * Create request for operation 'getProfileDataFileUrl'
     *
     * @param  \Microsoft\MsAds\Rest\Model\CampaignManagementService\GetProfileDataFileUrlRequest $GetProfileDataFileUrlRequest (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getProfileDataFileUrl'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function getProfileDataFileUrlRequest($GetProfileDataFileUrlRequest, string $contentType = self::contentTypes['getProfileDataFileUrl'][0])
    {

        // verify the required parameter 'GetProfileDataFileUrlRequest' is set
        if ($GetProfileDataFileUrlRequest === null || (is_array($GetProfileDataFileUrlRequest) && count($GetProfileDataFileUrlRequest) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $GetProfileDataFileUrlRequest when calling getProfileDataFileUrl'
            );
        }


        $resourcePath = '/CampaignManagement/v13/ProfileDataFileUrl/Query';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $multipart = false;

        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        return $this->setupAndSendRequest(
            'POST',
            $resourcePath,
            $headers,
            $headerParams,
            $GetProfileDataFileUrlRequest,
            $formParams,
            $multipart,
            true,
            true,
            false,
            'getHostSettingsForgetProfileDataFileUrl',
            null,
            [],
            $queryParams
        );
    }

    /**
     * Operation getSeasonalityAdjustmentsByAccountId
     *
     * @param  \Microsoft\MsAds\Rest\Model\CampaignManagementService\GetSeasonalityAdjustmentsByAccountIdRequest $GetSeasonalityAdjustmentsByAccountIdRequest GetSeasonalityAdjustmentsByAccountIdRequest (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getSeasonalityAdjustmentsByAccountId'] to see the possible values for this operation
     *
     * @throws \Microsoft\MsAds\Rest\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \Microsoft\MsAds\Rest\Model\CampaignManagementService\GetSeasonalityAdjustmentsByAccountIdResponse|\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault|\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault|\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault|\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault
     */
    public function getSeasonalityAdjustmentsByAccountId($GetSeasonalityAdjustmentsByAccountIdRequest, string $contentType = self::contentTypes['getSeasonalityAdjustmentsByAccountId'][0])
    {
        list($response) = $this->getSeasonalityAdjustmentsByAccountIdWithHttpInfo($GetSeasonalityAdjustmentsByAccountIdRequest, $contentType);
        return $response;
    }

    /**
     * Operation getSeasonalityAdjustmentsByAccountIdWithHttpInfo
     *
     * @param  \Microsoft\MsAds\Rest\Model\CampaignManagementService\GetSeasonalityAdjustmentsByAccountIdRequest $GetSeasonalityAdjustmentsByAccountIdRequest (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getSeasonalityAdjustmentsByAccountId'] to see the possible values for this operation
     *
     * @throws \Microsoft\MsAds\Rest\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \Microsoft\MsAds\Rest\Model\CampaignManagementService\GetSeasonalityAdjustmentsByAccountIdResponse|\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault|\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault|\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault|\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault, HTTP status code, HTTP response headers (array of strings)
     */
    public function getSeasonalityAdjustmentsByAccountIdWithHttpInfo($GetSeasonalityAdjustmentsByAccountIdRequest, string $contentType = self::contentTypes['getSeasonalityAdjustmentsByAccountId'][0])
    {
        $request = $this->getSeasonalityAdjustmentsByAccountIdRequest($GetSeasonalityAdjustmentsByAccountIdRequest, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                $response = $e->getResponse();
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            switch($statusCode) {
                case 200:
                    return $this->getResponseContent($request, $response, '\Microsoft\MsAds\Rest\Model\CampaignManagementService\GetSeasonalityAdjustmentsByAccountIdResponse');
                case 400:
                    return $this->getResponseContent($request, $response, '\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault');
                case 500:
                    return $this->getResponseContent($request, $response, '\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault');
                case 401:
                    return $this->getResponseContent($request, $response, '\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault');
                case 403:
                    return $this->getResponseContent($request, $response, '\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault');
            }

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            $returnType = '\Microsoft\MsAds\Rest\Model\CampaignManagementService\GetSeasonalityAdjustmentsByAccountIdResponse';
            return $this->getResponseContent($request, $response, $returnType);

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Microsoft\MsAds\Rest\Model\CampaignManagementService\GetSeasonalityAdjustmentsByAccountIdResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 500:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 403:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getSeasonalityAdjustmentsByAccountIdAsync
     *
     * @param  \Microsoft\MsAds\Rest\Model\CampaignManagementService\GetSeasonalityAdjustmentsByAccountIdRequest $GetSeasonalityAdjustmentsByAccountIdRequest (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getSeasonalityAdjustmentsByAccountId'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getSeasonalityAdjustmentsByAccountIdAsync($GetSeasonalityAdjustmentsByAccountIdRequest, string $contentType = self::contentTypes['getSeasonalityAdjustmentsByAccountId'][0])
    {
        return $this->getSeasonalityAdjustmentsByAccountIdAsyncWithHttpInfo($GetSeasonalityAdjustmentsByAccountIdRequest, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getSeasonalityAdjustmentsByAccountIdAsyncWithHttpInfo
     *
     * @param  \Microsoft\MsAds\Rest\Model\CampaignManagementService\GetSeasonalityAdjustmentsByAccountIdRequest $GetSeasonalityAdjustmentsByAccountIdRequest (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getSeasonalityAdjustmentsByAccountId'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getSeasonalityAdjustmentsByAccountIdAsyncWithHttpInfo($GetSeasonalityAdjustmentsByAccountIdRequest, string $contentType = self::contentTypes['getSeasonalityAdjustmentsByAccountId'][0])
    {
        $returnType = '\Microsoft\MsAds\Rest\Model\CampaignManagementService\GetSeasonalityAdjustmentsByAccountIdResponse';
        $request = $this->getSeasonalityAdjustmentsByAccountIdRequest($GetSeasonalityAdjustmentsByAccountIdRequest, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return $this->onFulfilledResponse($response, $returnType);
                },
                function ($exception) {
                    $this->onRejectedResponse($exception);
                }
            );
    }

    /**
     * Create request for operation 'getSeasonalityAdjustmentsByAccountId'
     *
     * @param  \Microsoft\MsAds\Rest\Model\CampaignManagementService\GetSeasonalityAdjustmentsByAccountIdRequest $GetSeasonalityAdjustmentsByAccountIdRequest (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getSeasonalityAdjustmentsByAccountId'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function getSeasonalityAdjustmentsByAccountIdRequest($GetSeasonalityAdjustmentsByAccountIdRequest, string $contentType = self::contentTypes['getSeasonalityAdjustmentsByAccountId'][0])
    {

        // verify the required parameter 'GetSeasonalityAdjustmentsByAccountIdRequest' is set
        if ($GetSeasonalityAdjustmentsByAccountIdRequest === null || (is_array($GetSeasonalityAdjustmentsByAccountIdRequest) && count($GetSeasonalityAdjustmentsByAccountIdRequest) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $GetSeasonalityAdjustmentsByAccountIdRequest when calling getSeasonalityAdjustmentsByAccountId'
            );
        }


        $resourcePath = '/CampaignManagement/v13/SeasonalityAdjustments/QueryByAccountId';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $multipart = false;

        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        return $this->setupAndSendRequest(
            'POST',
            $resourcePath,
            $headers,
            $headerParams,
            $GetSeasonalityAdjustmentsByAccountIdRequest,
            $formParams,
            $multipart,
            true,
            true,
            false,
            'getHostSettingsForgetSeasonalityAdjustmentsByAccountId',
            null,
            [],
            $queryParams
        );
    }

    /**
     * Operation getSeasonalityAdjustmentsByIds
     *
     * @param  \Microsoft\MsAds\Rest\Model\CampaignManagementService\GetSeasonalityAdjustmentsByIdsRequest $GetSeasonalityAdjustmentsByIdsRequest GetSeasonalityAdjustmentsByIdsRequest (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getSeasonalityAdjustmentsByIds'] to see the possible values for this operation
     *
     * @throws \Microsoft\MsAds\Rest\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \Microsoft\MsAds\Rest\Model\CampaignManagementService\GetSeasonalityAdjustmentsByIdsResponse|\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault|\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault|\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault|\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault
     */
    public function getSeasonalityAdjustmentsByIds($GetSeasonalityAdjustmentsByIdsRequest, string $contentType = self::contentTypes['getSeasonalityAdjustmentsByIds'][0])
    {
        list($response) = $this->getSeasonalityAdjustmentsByIdsWithHttpInfo($GetSeasonalityAdjustmentsByIdsRequest, $contentType);
        return $response;
    }

    /**
     * Operation getSeasonalityAdjustmentsByIdsWithHttpInfo
     *
     * @param  \Microsoft\MsAds\Rest\Model\CampaignManagementService\GetSeasonalityAdjustmentsByIdsRequest $GetSeasonalityAdjustmentsByIdsRequest (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getSeasonalityAdjustmentsByIds'] to see the possible values for this operation
     *
     * @throws \Microsoft\MsAds\Rest\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \Microsoft\MsAds\Rest\Model\CampaignManagementService\GetSeasonalityAdjustmentsByIdsResponse|\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault|\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault|\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault|\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault, HTTP status code, HTTP response headers (array of strings)
     */
    public function getSeasonalityAdjustmentsByIdsWithHttpInfo($GetSeasonalityAdjustmentsByIdsRequest, string $contentType = self::contentTypes['getSeasonalityAdjustmentsByIds'][0])
    {
        $request = $this->getSeasonalityAdjustmentsByIdsRequest($GetSeasonalityAdjustmentsByIdsRequest, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                $response = $e->getResponse();
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            switch($statusCode) {
                case 200:
                    return $this->getResponseContent($request, $response, '\Microsoft\MsAds\Rest\Model\CampaignManagementService\GetSeasonalityAdjustmentsByIdsResponse');
                case 400:
                    return $this->getResponseContent($request, $response, '\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault');
                case 500:
                    return $this->getResponseContent($request, $response, '\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault');
                case 401:
                    return $this->getResponseContent($request, $response, '\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault');
                case 403:
                    return $this->getResponseContent($request, $response, '\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault');
            }

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            $returnType = '\Microsoft\MsAds\Rest\Model\CampaignManagementService\GetSeasonalityAdjustmentsByIdsResponse';
            return $this->getResponseContent($request, $response, $returnType);

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Microsoft\MsAds\Rest\Model\CampaignManagementService\GetSeasonalityAdjustmentsByIdsResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 500:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 403:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getSeasonalityAdjustmentsByIdsAsync
     *
     * @param  \Microsoft\MsAds\Rest\Model\CampaignManagementService\GetSeasonalityAdjustmentsByIdsRequest $GetSeasonalityAdjustmentsByIdsRequest (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getSeasonalityAdjustmentsByIds'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getSeasonalityAdjustmentsByIdsAsync($GetSeasonalityAdjustmentsByIdsRequest, string $contentType = self::contentTypes['getSeasonalityAdjustmentsByIds'][0])
    {
        return $this->getSeasonalityAdjustmentsByIdsAsyncWithHttpInfo($GetSeasonalityAdjustmentsByIdsRequest, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getSeasonalityAdjustmentsByIdsAsyncWithHttpInfo
     *
     * @param  \Microsoft\MsAds\Rest\Model\CampaignManagementService\GetSeasonalityAdjustmentsByIdsRequest $GetSeasonalityAdjustmentsByIdsRequest (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getSeasonalityAdjustmentsByIds'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getSeasonalityAdjustmentsByIdsAsyncWithHttpInfo($GetSeasonalityAdjustmentsByIdsRequest, string $contentType = self::contentTypes['getSeasonalityAdjustmentsByIds'][0])
    {
        $returnType = '\Microsoft\MsAds\Rest\Model\CampaignManagementService\GetSeasonalityAdjustmentsByIdsResponse';
        $request = $this->getSeasonalityAdjustmentsByIdsRequest($GetSeasonalityAdjustmentsByIdsRequest, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return $this->onFulfilledResponse($response, $returnType);
                },
                function ($exception) {
                    $this->onRejectedResponse($exception);
                }
            );
    }

    /**
     * Create request for operation 'getSeasonalityAdjustmentsByIds'
     *
     * @param  \Microsoft\MsAds\Rest\Model\CampaignManagementService\GetSeasonalityAdjustmentsByIdsRequest $GetSeasonalityAdjustmentsByIdsRequest (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getSeasonalityAdjustmentsByIds'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function getSeasonalityAdjustmentsByIdsRequest($GetSeasonalityAdjustmentsByIdsRequest, string $contentType = self::contentTypes['getSeasonalityAdjustmentsByIds'][0])
    {

        // verify the required parameter 'GetSeasonalityAdjustmentsByIdsRequest' is set
        if ($GetSeasonalityAdjustmentsByIdsRequest === null || (is_array($GetSeasonalityAdjustmentsByIdsRequest) && count($GetSeasonalityAdjustmentsByIdsRequest) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $GetSeasonalityAdjustmentsByIdsRequest when calling getSeasonalityAdjustmentsByIds'
            );
        }


        $resourcePath = '/CampaignManagement/v13/SeasonalityAdjustments/QueryByIds';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $multipart = false;

        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        return $this->setupAndSendRequest(
            'POST',
            $resourcePath,
            $headers,
            $headerParams,
            $GetSeasonalityAdjustmentsByIdsRequest,
            $formParams,
            $multipart,
            true,
            true,
            false,
            'getHostSettingsForgetSeasonalityAdjustmentsByIds',
            null,
            [],
            $queryParams
        );
    }

    /**
     * Operation getSharedEntities
     *
     * @param  \Microsoft\MsAds\Rest\Model\CampaignManagementService\GetSharedEntitiesRequest $GetSharedEntitiesRequest GetSharedEntitiesRequest (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getSharedEntities'] to see the possible values for this operation
     *
     * @throws \Microsoft\MsAds\Rest\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \Microsoft\MsAds\Rest\Model\CampaignManagementService\GetSharedEntitiesResponse|\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault|\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault|\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault|\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault
     */
    public function getSharedEntities($GetSharedEntitiesRequest, string $contentType = self::contentTypes['getSharedEntities'][0])
    {
        list($response) = $this->getSharedEntitiesWithHttpInfo($GetSharedEntitiesRequest, $contentType);
        return $response;
    }

    /**
     * Operation getSharedEntitiesWithHttpInfo
     *
     * @param  \Microsoft\MsAds\Rest\Model\CampaignManagementService\GetSharedEntitiesRequest $GetSharedEntitiesRequest (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getSharedEntities'] to see the possible values for this operation
     *
     * @throws \Microsoft\MsAds\Rest\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \Microsoft\MsAds\Rest\Model\CampaignManagementService\GetSharedEntitiesResponse|\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault|\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault|\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault|\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault, HTTP status code, HTTP response headers (array of strings)
     */
    public function getSharedEntitiesWithHttpInfo($GetSharedEntitiesRequest, string $contentType = self::contentTypes['getSharedEntities'][0])
    {
        $request = $this->getSharedEntitiesRequest($GetSharedEntitiesRequest, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                $response = $e->getResponse();
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            switch($statusCode) {
                case 200:
                    return $this->getResponseContent($request, $response, '\Microsoft\MsAds\Rest\Model\CampaignManagementService\GetSharedEntitiesResponse');
                case 400:
                    return $this->getResponseContent($request, $response, '\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault');
                case 500:
                    return $this->getResponseContent($request, $response, '\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault');
                case 401:
                    return $this->getResponseContent($request, $response, '\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault');
                case 403:
                    return $this->getResponseContent($request, $response, '\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault');
            }

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            $returnType = '\Microsoft\MsAds\Rest\Model\CampaignManagementService\GetSharedEntitiesResponse';
            return $this->getResponseContent($request, $response, $returnType);

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Microsoft\MsAds\Rest\Model\CampaignManagementService\GetSharedEntitiesResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 500:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 403:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getSharedEntitiesAsync
     *
     * @param  \Microsoft\MsAds\Rest\Model\CampaignManagementService\GetSharedEntitiesRequest $GetSharedEntitiesRequest (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getSharedEntities'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getSharedEntitiesAsync($GetSharedEntitiesRequest, string $contentType = self::contentTypes['getSharedEntities'][0])
    {
        return $this->getSharedEntitiesAsyncWithHttpInfo($GetSharedEntitiesRequest, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getSharedEntitiesAsyncWithHttpInfo
     *
     * @param  \Microsoft\MsAds\Rest\Model\CampaignManagementService\GetSharedEntitiesRequest $GetSharedEntitiesRequest (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getSharedEntities'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getSharedEntitiesAsyncWithHttpInfo($GetSharedEntitiesRequest, string $contentType = self::contentTypes['getSharedEntities'][0])
    {
        $returnType = '\Microsoft\MsAds\Rest\Model\CampaignManagementService\GetSharedEntitiesResponse';
        $request = $this->getSharedEntitiesRequest($GetSharedEntitiesRequest, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return $this->onFulfilledResponse($response, $returnType);
                },
                function ($exception) {
                    $this->onRejectedResponse($exception);
                }
            );
    }

    /**
     * Create request for operation 'getSharedEntities'
     *
     * @param  \Microsoft\MsAds\Rest\Model\CampaignManagementService\GetSharedEntitiesRequest $GetSharedEntitiesRequest (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getSharedEntities'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function getSharedEntitiesRequest($GetSharedEntitiesRequest, string $contentType = self::contentTypes['getSharedEntities'][0])
    {

        // verify the required parameter 'GetSharedEntitiesRequest' is set
        if ($GetSharedEntitiesRequest === null || (is_array($GetSharedEntitiesRequest) && count($GetSharedEntitiesRequest) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $GetSharedEntitiesRequest when calling getSharedEntities'
            );
        }


        $resourcePath = '/CampaignManagement/v13/SharedEntities/Query';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $multipart = false;

        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        return $this->setupAndSendRequest(
            'POST',
            $resourcePath,
            $headers,
            $headerParams,
            $GetSharedEntitiesRequest,
            $formParams,
            $multipart,
            true,
            true,
            false,
            'getHostSettingsForgetSharedEntities',
            null,
            [],
            $queryParams
        );
    }

    /**
     * Operation getSharedEntitiesByAccountId
     *
     * @param  \Microsoft\MsAds\Rest\Model\CampaignManagementService\GetSharedEntitiesByAccountIdRequest $GetSharedEntitiesByAccountIdRequest GetSharedEntitiesByAccountIdRequest (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getSharedEntitiesByAccountId'] to see the possible values for this operation
     *
     * @throws \Microsoft\MsAds\Rest\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \Microsoft\MsAds\Rest\Model\CampaignManagementService\GetSharedEntitiesByAccountIdResponse|\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault|\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault|\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault|\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault
     */
    public function getSharedEntitiesByAccountId($GetSharedEntitiesByAccountIdRequest, string $contentType = self::contentTypes['getSharedEntitiesByAccountId'][0])
    {
        list($response) = $this->getSharedEntitiesByAccountIdWithHttpInfo($GetSharedEntitiesByAccountIdRequest, $contentType);
        return $response;
    }

    /**
     * Operation getSharedEntitiesByAccountIdWithHttpInfo
     *
     * @param  \Microsoft\MsAds\Rest\Model\CampaignManagementService\GetSharedEntitiesByAccountIdRequest $GetSharedEntitiesByAccountIdRequest (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getSharedEntitiesByAccountId'] to see the possible values for this operation
     *
     * @throws \Microsoft\MsAds\Rest\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \Microsoft\MsAds\Rest\Model\CampaignManagementService\GetSharedEntitiesByAccountIdResponse|\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault|\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault|\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault|\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault, HTTP status code, HTTP response headers (array of strings)
     */
    public function getSharedEntitiesByAccountIdWithHttpInfo($GetSharedEntitiesByAccountIdRequest, string $contentType = self::contentTypes['getSharedEntitiesByAccountId'][0])
    {
        $request = $this->getSharedEntitiesByAccountIdRequest($GetSharedEntitiesByAccountIdRequest, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                $response = $e->getResponse();
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            switch($statusCode) {
                case 200:
                    return $this->getResponseContent($request, $response, '\Microsoft\MsAds\Rest\Model\CampaignManagementService\GetSharedEntitiesByAccountIdResponse');
                case 400:
                    return $this->getResponseContent($request, $response, '\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault');
                case 500:
                    return $this->getResponseContent($request, $response, '\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault');
                case 401:
                    return $this->getResponseContent($request, $response, '\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault');
                case 403:
                    return $this->getResponseContent($request, $response, '\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault');
            }

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            $returnType = '\Microsoft\MsAds\Rest\Model\CampaignManagementService\GetSharedEntitiesByAccountIdResponse';
            return $this->getResponseContent($request, $response, $returnType);

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Microsoft\MsAds\Rest\Model\CampaignManagementService\GetSharedEntitiesByAccountIdResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 500:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 403:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getSharedEntitiesByAccountIdAsync
     *
     * @param  \Microsoft\MsAds\Rest\Model\CampaignManagementService\GetSharedEntitiesByAccountIdRequest $GetSharedEntitiesByAccountIdRequest (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getSharedEntitiesByAccountId'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getSharedEntitiesByAccountIdAsync($GetSharedEntitiesByAccountIdRequest, string $contentType = self::contentTypes['getSharedEntitiesByAccountId'][0])
    {
        return $this->getSharedEntitiesByAccountIdAsyncWithHttpInfo($GetSharedEntitiesByAccountIdRequest, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getSharedEntitiesByAccountIdAsyncWithHttpInfo
     *
     * @param  \Microsoft\MsAds\Rest\Model\CampaignManagementService\GetSharedEntitiesByAccountIdRequest $GetSharedEntitiesByAccountIdRequest (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getSharedEntitiesByAccountId'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getSharedEntitiesByAccountIdAsyncWithHttpInfo($GetSharedEntitiesByAccountIdRequest, string $contentType = self::contentTypes['getSharedEntitiesByAccountId'][0])
    {
        $returnType = '\Microsoft\MsAds\Rest\Model\CampaignManagementService\GetSharedEntitiesByAccountIdResponse';
        $request = $this->getSharedEntitiesByAccountIdRequest($GetSharedEntitiesByAccountIdRequest, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return $this->onFulfilledResponse($response, $returnType);
                },
                function ($exception) {
                    $this->onRejectedResponse($exception);
                }
            );
    }

    /**
     * Create request for operation 'getSharedEntitiesByAccountId'
     *
     * @param  \Microsoft\MsAds\Rest\Model\CampaignManagementService\GetSharedEntitiesByAccountIdRequest $GetSharedEntitiesByAccountIdRequest (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getSharedEntitiesByAccountId'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function getSharedEntitiesByAccountIdRequest($GetSharedEntitiesByAccountIdRequest, string $contentType = self::contentTypes['getSharedEntitiesByAccountId'][0])
    {

        // verify the required parameter 'GetSharedEntitiesByAccountIdRequest' is set
        if ($GetSharedEntitiesByAccountIdRequest === null || (is_array($GetSharedEntitiesByAccountIdRequest) && count($GetSharedEntitiesByAccountIdRequest) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $GetSharedEntitiesByAccountIdRequest when calling getSharedEntitiesByAccountId'
            );
        }


        $resourcePath = '/CampaignManagement/v13/SharedEntities/QueryByAccountId';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $multipart = false;

        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        return $this->setupAndSendRequest(
            'POST',
            $resourcePath,
            $headers,
            $headerParams,
            $GetSharedEntitiesByAccountIdRequest,
            $formParams,
            $multipart,
            true,
            true,
            false,
            'getHostSettingsForgetSharedEntitiesByAccountId',
            null,
            [],
            $queryParams
        );
    }

    /**
     * Operation getSharedEntityAssociationsByEntityIds
     *
     * @param  \Microsoft\MsAds\Rest\Model\CampaignManagementService\GetSharedEntityAssociationsByEntityIdsRequest $GetSharedEntityAssociationsByEntityIdsRequest GetSharedEntityAssociationsByEntityIdsRequest (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getSharedEntityAssociationsByEntityIds'] to see the possible values for this operation
     *
     * @throws \Microsoft\MsAds\Rest\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \Microsoft\MsAds\Rest\Model\CampaignManagementService\GetSharedEntityAssociationsByEntityIdsResponse|\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault|\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault|\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault|\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault
     */
    public function getSharedEntityAssociationsByEntityIds($GetSharedEntityAssociationsByEntityIdsRequest, string $contentType = self::contentTypes['getSharedEntityAssociationsByEntityIds'][0])
    {
        list($response) = $this->getSharedEntityAssociationsByEntityIdsWithHttpInfo($GetSharedEntityAssociationsByEntityIdsRequest, $contentType);
        return $response;
    }

    /**
     * Operation getSharedEntityAssociationsByEntityIdsWithHttpInfo
     *
     * @param  \Microsoft\MsAds\Rest\Model\CampaignManagementService\GetSharedEntityAssociationsByEntityIdsRequest $GetSharedEntityAssociationsByEntityIdsRequest (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getSharedEntityAssociationsByEntityIds'] to see the possible values for this operation
     *
     * @throws \Microsoft\MsAds\Rest\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \Microsoft\MsAds\Rest\Model\CampaignManagementService\GetSharedEntityAssociationsByEntityIdsResponse|\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault|\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault|\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault|\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault, HTTP status code, HTTP response headers (array of strings)
     */
    public function getSharedEntityAssociationsByEntityIdsWithHttpInfo($GetSharedEntityAssociationsByEntityIdsRequest, string $contentType = self::contentTypes['getSharedEntityAssociationsByEntityIds'][0])
    {
        $request = $this->getSharedEntityAssociationsByEntityIdsRequest($GetSharedEntityAssociationsByEntityIdsRequest, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                $response = $e->getResponse();
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            switch($statusCode) {
                case 200:
                    return $this->getResponseContent($request, $response, '\Microsoft\MsAds\Rest\Model\CampaignManagementService\GetSharedEntityAssociationsByEntityIdsResponse');
                case 400:
                    return $this->getResponseContent($request, $response, '\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault');
                case 500:
                    return $this->getResponseContent($request, $response, '\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault');
                case 401:
                    return $this->getResponseContent($request, $response, '\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault');
                case 403:
                    return $this->getResponseContent($request, $response, '\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault');
            }

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            $returnType = '\Microsoft\MsAds\Rest\Model\CampaignManagementService\GetSharedEntityAssociationsByEntityIdsResponse';
            return $this->getResponseContent($request, $response, $returnType);

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Microsoft\MsAds\Rest\Model\CampaignManagementService\GetSharedEntityAssociationsByEntityIdsResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 500:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 403:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getSharedEntityAssociationsByEntityIdsAsync
     *
     * @param  \Microsoft\MsAds\Rest\Model\CampaignManagementService\GetSharedEntityAssociationsByEntityIdsRequest $GetSharedEntityAssociationsByEntityIdsRequest (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getSharedEntityAssociationsByEntityIds'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getSharedEntityAssociationsByEntityIdsAsync($GetSharedEntityAssociationsByEntityIdsRequest, string $contentType = self::contentTypes['getSharedEntityAssociationsByEntityIds'][0])
    {
        return $this->getSharedEntityAssociationsByEntityIdsAsyncWithHttpInfo($GetSharedEntityAssociationsByEntityIdsRequest, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getSharedEntityAssociationsByEntityIdsAsyncWithHttpInfo
     *
     * @param  \Microsoft\MsAds\Rest\Model\CampaignManagementService\GetSharedEntityAssociationsByEntityIdsRequest $GetSharedEntityAssociationsByEntityIdsRequest (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getSharedEntityAssociationsByEntityIds'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getSharedEntityAssociationsByEntityIdsAsyncWithHttpInfo($GetSharedEntityAssociationsByEntityIdsRequest, string $contentType = self::contentTypes['getSharedEntityAssociationsByEntityIds'][0])
    {
        $returnType = '\Microsoft\MsAds\Rest\Model\CampaignManagementService\GetSharedEntityAssociationsByEntityIdsResponse';
        $request = $this->getSharedEntityAssociationsByEntityIdsRequest($GetSharedEntityAssociationsByEntityIdsRequest, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return $this->onFulfilledResponse($response, $returnType);
                },
                function ($exception) {
                    $this->onRejectedResponse($exception);
                }
            );
    }

    /**
     * Create request for operation 'getSharedEntityAssociationsByEntityIds'
     *
     * @param  \Microsoft\MsAds\Rest\Model\CampaignManagementService\GetSharedEntityAssociationsByEntityIdsRequest $GetSharedEntityAssociationsByEntityIdsRequest (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getSharedEntityAssociationsByEntityIds'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function getSharedEntityAssociationsByEntityIdsRequest($GetSharedEntityAssociationsByEntityIdsRequest, string $contentType = self::contentTypes['getSharedEntityAssociationsByEntityIds'][0])
    {

        // verify the required parameter 'GetSharedEntityAssociationsByEntityIdsRequest' is set
        if ($GetSharedEntityAssociationsByEntityIdsRequest === null || (is_array($GetSharedEntityAssociationsByEntityIdsRequest) && count($GetSharedEntityAssociationsByEntityIdsRequest) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $GetSharedEntityAssociationsByEntityIdsRequest when calling getSharedEntityAssociationsByEntityIds'
            );
        }


        $resourcePath = '/CampaignManagement/v13/SharedEntityAssociations/QueryByEntityIds';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $multipart = false;

        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        return $this->setupAndSendRequest(
            'POST',
            $resourcePath,
            $headers,
            $headerParams,
            $GetSharedEntityAssociationsByEntityIdsRequest,
            $formParams,
            $multipart,
            true,
            true,
            false,
            'getHostSettingsForgetSharedEntityAssociationsByEntityIds',
            null,
            [],
            $queryParams
        );
    }

    /**
     * Operation getSharedEntityAssociationsBySharedEntityIds
     *
     * @param  \Microsoft\MsAds\Rest\Model\CampaignManagementService\GetSharedEntityAssociationsBySharedEntityIdsRequest $GetSharedEntityAssociationsBySharedEntityIdsRequest GetSharedEntityAssociationsBySharedEntityIdsRequest (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getSharedEntityAssociationsBySharedEntityIds'] to see the possible values for this operation
     *
     * @throws \Microsoft\MsAds\Rest\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \Microsoft\MsAds\Rest\Model\CampaignManagementService\GetSharedEntityAssociationsBySharedEntityIdsResponse|\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault|\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault|\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault|\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault
     */
    public function getSharedEntityAssociationsBySharedEntityIds($GetSharedEntityAssociationsBySharedEntityIdsRequest, string $contentType = self::contentTypes['getSharedEntityAssociationsBySharedEntityIds'][0])
    {
        list($response) = $this->getSharedEntityAssociationsBySharedEntityIdsWithHttpInfo($GetSharedEntityAssociationsBySharedEntityIdsRequest, $contentType);
        return $response;
    }

    /**
     * Operation getSharedEntityAssociationsBySharedEntityIdsWithHttpInfo
     *
     * @param  \Microsoft\MsAds\Rest\Model\CampaignManagementService\GetSharedEntityAssociationsBySharedEntityIdsRequest $GetSharedEntityAssociationsBySharedEntityIdsRequest (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getSharedEntityAssociationsBySharedEntityIds'] to see the possible values for this operation
     *
     * @throws \Microsoft\MsAds\Rest\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \Microsoft\MsAds\Rest\Model\CampaignManagementService\GetSharedEntityAssociationsBySharedEntityIdsResponse|\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault|\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault|\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault|\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault, HTTP status code, HTTP response headers (array of strings)
     */
    public function getSharedEntityAssociationsBySharedEntityIdsWithHttpInfo($GetSharedEntityAssociationsBySharedEntityIdsRequest, string $contentType = self::contentTypes['getSharedEntityAssociationsBySharedEntityIds'][0])
    {
        $request = $this->getSharedEntityAssociationsBySharedEntityIdsRequest($GetSharedEntityAssociationsBySharedEntityIdsRequest, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                $response = $e->getResponse();
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            switch($statusCode) {
                case 200:
                    return $this->getResponseContent($request, $response, '\Microsoft\MsAds\Rest\Model\CampaignManagementService\GetSharedEntityAssociationsBySharedEntityIdsResponse');
                case 400:
                    return $this->getResponseContent($request, $response, '\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault');
                case 500:
                    return $this->getResponseContent($request, $response, '\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault');
                case 401:
                    return $this->getResponseContent($request, $response, '\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault');
                case 403:
                    return $this->getResponseContent($request, $response, '\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault');
            }

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            $returnType = '\Microsoft\MsAds\Rest\Model\CampaignManagementService\GetSharedEntityAssociationsBySharedEntityIdsResponse';
            return $this->getResponseContent($request, $response, $returnType);

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Microsoft\MsAds\Rest\Model\CampaignManagementService\GetSharedEntityAssociationsBySharedEntityIdsResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 500:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 403:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getSharedEntityAssociationsBySharedEntityIdsAsync
     *
     * @param  \Microsoft\MsAds\Rest\Model\CampaignManagementService\GetSharedEntityAssociationsBySharedEntityIdsRequest $GetSharedEntityAssociationsBySharedEntityIdsRequest (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getSharedEntityAssociationsBySharedEntityIds'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getSharedEntityAssociationsBySharedEntityIdsAsync($GetSharedEntityAssociationsBySharedEntityIdsRequest, string $contentType = self::contentTypes['getSharedEntityAssociationsBySharedEntityIds'][0])
    {
        return $this->getSharedEntityAssociationsBySharedEntityIdsAsyncWithHttpInfo($GetSharedEntityAssociationsBySharedEntityIdsRequest, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getSharedEntityAssociationsBySharedEntityIdsAsyncWithHttpInfo
     *
     * @param  \Microsoft\MsAds\Rest\Model\CampaignManagementService\GetSharedEntityAssociationsBySharedEntityIdsRequest $GetSharedEntityAssociationsBySharedEntityIdsRequest (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getSharedEntityAssociationsBySharedEntityIds'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getSharedEntityAssociationsBySharedEntityIdsAsyncWithHttpInfo($GetSharedEntityAssociationsBySharedEntityIdsRequest, string $contentType = self::contentTypes['getSharedEntityAssociationsBySharedEntityIds'][0])
    {
        $returnType = '\Microsoft\MsAds\Rest\Model\CampaignManagementService\GetSharedEntityAssociationsBySharedEntityIdsResponse';
        $request = $this->getSharedEntityAssociationsBySharedEntityIdsRequest($GetSharedEntityAssociationsBySharedEntityIdsRequest, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return $this->onFulfilledResponse($response, $returnType);
                },
                function ($exception) {
                    $this->onRejectedResponse($exception);
                }
            );
    }

    /**
     * Create request for operation 'getSharedEntityAssociationsBySharedEntityIds'
     *
     * @param  \Microsoft\MsAds\Rest\Model\CampaignManagementService\GetSharedEntityAssociationsBySharedEntityIdsRequest $GetSharedEntityAssociationsBySharedEntityIdsRequest (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getSharedEntityAssociationsBySharedEntityIds'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function getSharedEntityAssociationsBySharedEntityIdsRequest($GetSharedEntityAssociationsBySharedEntityIdsRequest, string $contentType = self::contentTypes['getSharedEntityAssociationsBySharedEntityIds'][0])
    {

        // verify the required parameter 'GetSharedEntityAssociationsBySharedEntityIdsRequest' is set
        if ($GetSharedEntityAssociationsBySharedEntityIdsRequest === null || (is_array($GetSharedEntityAssociationsBySharedEntityIdsRequest) && count($GetSharedEntityAssociationsBySharedEntityIdsRequest) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $GetSharedEntityAssociationsBySharedEntityIdsRequest when calling getSharedEntityAssociationsBySharedEntityIds'
            );
        }


        $resourcePath = '/CampaignManagement/v13/SharedEntityAssociations/QueryBySharedEntityIds';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $multipart = false;

        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        return $this->setupAndSendRequest(
            'POST',
            $resourcePath,
            $headers,
            $headerParams,
            $GetSharedEntityAssociationsBySharedEntityIdsRequest,
            $formParams,
            $multipart,
            true,
            true,
            false,
            'getHostSettingsForgetSharedEntityAssociationsBySharedEntityIds',
            null,
            [],
            $queryParams
        );
    }

    /**
     * Operation getSupportedClipchampAudio
     *
     * @param  \Microsoft\MsAds\Rest\Model\CampaignManagementService\GetSupportedClipchampAudioRequest $GetSupportedClipchampAudioRequest GetSupportedClipchampAudioRequest (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getSupportedClipchampAudio'] to see the possible values for this operation
     *
     * @throws \Microsoft\MsAds\Rest\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \Microsoft\MsAds\Rest\Model\CampaignManagementService\GetSupportedClipchampAudioResponse|\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault|\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault|\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault|\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault
     */
    public function getSupportedClipchampAudio($GetSupportedClipchampAudioRequest, string $contentType = self::contentTypes['getSupportedClipchampAudio'][0])
    {
        list($response) = $this->getSupportedClipchampAudioWithHttpInfo($GetSupportedClipchampAudioRequest, $contentType);
        return $response;
    }

    /**
     * Operation getSupportedClipchampAudioWithHttpInfo
     *
     * @param  \Microsoft\MsAds\Rest\Model\CampaignManagementService\GetSupportedClipchampAudioRequest $GetSupportedClipchampAudioRequest (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getSupportedClipchampAudio'] to see the possible values for this operation
     *
     * @throws \Microsoft\MsAds\Rest\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \Microsoft\MsAds\Rest\Model\CampaignManagementService\GetSupportedClipchampAudioResponse|\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault|\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault|\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault|\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault, HTTP status code, HTTP response headers (array of strings)
     */
    public function getSupportedClipchampAudioWithHttpInfo($GetSupportedClipchampAudioRequest, string $contentType = self::contentTypes['getSupportedClipchampAudio'][0])
    {
        $request = $this->getSupportedClipchampAudioRequest($GetSupportedClipchampAudioRequest, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                $response = $e->getResponse();
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            switch($statusCode) {
                case 200:
                    return $this->getResponseContent($request, $response, '\Microsoft\MsAds\Rest\Model\CampaignManagementService\GetSupportedClipchampAudioResponse');
                case 400:
                    return $this->getResponseContent($request, $response, '\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault');
                case 500:
                    return $this->getResponseContent($request, $response, '\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault');
                case 401:
                    return $this->getResponseContent($request, $response, '\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault');
                case 403:
                    return $this->getResponseContent($request, $response, '\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault');
            }

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            $returnType = '\Microsoft\MsAds\Rest\Model\CampaignManagementService\GetSupportedClipchampAudioResponse';
            return $this->getResponseContent($request, $response, $returnType);

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Microsoft\MsAds\Rest\Model\CampaignManagementService\GetSupportedClipchampAudioResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 500:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 403:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getSupportedClipchampAudioAsync
     *
     * @param  \Microsoft\MsAds\Rest\Model\CampaignManagementService\GetSupportedClipchampAudioRequest $GetSupportedClipchampAudioRequest (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getSupportedClipchampAudio'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getSupportedClipchampAudioAsync($GetSupportedClipchampAudioRequest, string $contentType = self::contentTypes['getSupportedClipchampAudio'][0])
    {
        return $this->getSupportedClipchampAudioAsyncWithHttpInfo($GetSupportedClipchampAudioRequest, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getSupportedClipchampAudioAsyncWithHttpInfo
     *
     * @param  \Microsoft\MsAds\Rest\Model\CampaignManagementService\GetSupportedClipchampAudioRequest $GetSupportedClipchampAudioRequest (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getSupportedClipchampAudio'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getSupportedClipchampAudioAsyncWithHttpInfo($GetSupportedClipchampAudioRequest, string $contentType = self::contentTypes['getSupportedClipchampAudio'][0])
    {
        $returnType = '\Microsoft\MsAds\Rest\Model\CampaignManagementService\GetSupportedClipchampAudioResponse';
        $request = $this->getSupportedClipchampAudioRequest($GetSupportedClipchampAudioRequest, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return $this->onFulfilledResponse($response, $returnType);
                },
                function ($exception) {
                    $this->onRejectedResponse($exception);
                }
            );
    }

    /**
     * Create request for operation 'getSupportedClipchampAudio'
     *
     * @param  \Microsoft\MsAds\Rest\Model\CampaignManagementService\GetSupportedClipchampAudioRequest $GetSupportedClipchampAudioRequest (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getSupportedClipchampAudio'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function getSupportedClipchampAudioRequest($GetSupportedClipchampAudioRequest, string $contentType = self::contentTypes['getSupportedClipchampAudio'][0])
    {

        // verify the required parameter 'GetSupportedClipchampAudioRequest' is set
        if ($GetSupportedClipchampAudioRequest === null || (is_array($GetSupportedClipchampAudioRequest) && count($GetSupportedClipchampAudioRequest) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $GetSupportedClipchampAudioRequest when calling getSupportedClipchampAudio'
            );
        }


        $resourcePath = '/CampaignManagement/v13/SupportedClipchampAudio/Query';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $multipart = false;

        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        return $this->setupAndSendRequest(
            'POST',
            $resourcePath,
            $headers,
            $headerParams,
            $GetSupportedClipchampAudioRequest,
            $formParams,
            $multipart,
            true,
            true,
            false,
            'getHostSettingsForgetSupportedClipchampAudio',
            null,
            [],
            $queryParams
        );
    }

    /**
     * Operation getSupportedFonts
     *
     * @param  \Microsoft\MsAds\Rest\Model\CampaignManagementService\GetSupportedFontsRequest $GetSupportedFontsRequest GetSupportedFontsRequest (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getSupportedFonts'] to see the possible values for this operation
     *
     * @throws \Microsoft\MsAds\Rest\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \Microsoft\MsAds\Rest\Model\CampaignManagementService\GetSupportedFontsResponse|\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault|\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault|\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault|\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault
     */
    public function getSupportedFonts($GetSupportedFontsRequest, string $contentType = self::contentTypes['getSupportedFonts'][0])
    {
        list($response) = $this->getSupportedFontsWithHttpInfo($GetSupportedFontsRequest, $contentType);
        return $response;
    }

    /**
     * Operation getSupportedFontsWithHttpInfo
     *
     * @param  \Microsoft\MsAds\Rest\Model\CampaignManagementService\GetSupportedFontsRequest $GetSupportedFontsRequest (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getSupportedFonts'] to see the possible values for this operation
     *
     * @throws \Microsoft\MsAds\Rest\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \Microsoft\MsAds\Rest\Model\CampaignManagementService\GetSupportedFontsResponse|\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault|\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault|\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault|\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault, HTTP status code, HTTP response headers (array of strings)
     */
    public function getSupportedFontsWithHttpInfo($GetSupportedFontsRequest, string $contentType = self::contentTypes['getSupportedFonts'][0])
    {
        $request = $this->getSupportedFontsRequest($GetSupportedFontsRequest, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                $response = $e->getResponse();
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            switch($statusCode) {
                case 200:
                    return $this->getResponseContent($request, $response, '\Microsoft\MsAds\Rest\Model\CampaignManagementService\GetSupportedFontsResponse');
                case 400:
                    return $this->getResponseContent($request, $response, '\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault');
                case 500:
                    return $this->getResponseContent($request, $response, '\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault');
                case 401:
                    return $this->getResponseContent($request, $response, '\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault');
                case 403:
                    return $this->getResponseContent($request, $response, '\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault');
            }

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            $returnType = '\Microsoft\MsAds\Rest\Model\CampaignManagementService\GetSupportedFontsResponse';
            return $this->getResponseContent($request, $response, $returnType);

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Microsoft\MsAds\Rest\Model\CampaignManagementService\GetSupportedFontsResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 500:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 403:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getSupportedFontsAsync
     *
     * @param  \Microsoft\MsAds\Rest\Model\CampaignManagementService\GetSupportedFontsRequest $GetSupportedFontsRequest (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getSupportedFonts'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getSupportedFontsAsync($GetSupportedFontsRequest, string $contentType = self::contentTypes['getSupportedFonts'][0])
    {
        return $this->getSupportedFontsAsyncWithHttpInfo($GetSupportedFontsRequest, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getSupportedFontsAsyncWithHttpInfo
     *
     * @param  \Microsoft\MsAds\Rest\Model\CampaignManagementService\GetSupportedFontsRequest $GetSupportedFontsRequest (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getSupportedFonts'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getSupportedFontsAsyncWithHttpInfo($GetSupportedFontsRequest, string $contentType = self::contentTypes['getSupportedFonts'][0])
    {
        $returnType = '\Microsoft\MsAds\Rest\Model\CampaignManagementService\GetSupportedFontsResponse';
        $request = $this->getSupportedFontsRequest($GetSupportedFontsRequest, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return $this->onFulfilledResponse($response, $returnType);
                },
                function ($exception) {
                    $this->onRejectedResponse($exception);
                }
            );
    }

    /**
     * Create request for operation 'getSupportedFonts'
     *
     * @param  \Microsoft\MsAds\Rest\Model\CampaignManagementService\GetSupportedFontsRequest $GetSupportedFontsRequest (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getSupportedFonts'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function getSupportedFontsRequest($GetSupportedFontsRequest, string $contentType = self::contentTypes['getSupportedFonts'][0])
    {

        // verify the required parameter 'GetSupportedFontsRequest' is set
        if ($GetSupportedFontsRequest === null || (is_array($GetSupportedFontsRequest) && count($GetSupportedFontsRequest) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $GetSupportedFontsRequest when calling getSupportedFonts'
            );
        }


        $resourcePath = '/CampaignManagement/v13/SupportedFonts/Query';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $multipart = false;

        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        return $this->setupAndSendRequest(
            'POST',
            $resourcePath,
            $headers,
            $headerParams,
            $GetSupportedFontsRequest,
            $formParams,
            $multipart,
            true,
            true,
            false,
            'getHostSettingsForgetSupportedFonts',
            null,
            [],
            $queryParams
        );
    }

    /**
     * Operation getUetTagsByIds
     *
     * @param  \Microsoft\MsAds\Rest\Model\CampaignManagementService\GetUetTagsByIdsRequest $GetUetTagsByIdsRequest GetUetTagsByIdsRequest (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getUetTagsByIds'] to see the possible values for this operation
     *
     * @throws \Microsoft\MsAds\Rest\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \Microsoft\MsAds\Rest\Model\CampaignManagementService\GetUetTagsByIdsResponse|\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault|\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault|\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault|\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault
     */
    public function getUetTagsByIds($GetUetTagsByIdsRequest, string $contentType = self::contentTypes['getUetTagsByIds'][0])
    {
        list($response) = $this->getUetTagsByIdsWithHttpInfo($GetUetTagsByIdsRequest, $contentType);
        return $response;
    }

    /**
     * Operation getUetTagsByIdsWithHttpInfo
     *
     * @param  \Microsoft\MsAds\Rest\Model\CampaignManagementService\GetUetTagsByIdsRequest $GetUetTagsByIdsRequest (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getUetTagsByIds'] to see the possible values for this operation
     *
     * @throws \Microsoft\MsAds\Rest\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \Microsoft\MsAds\Rest\Model\CampaignManagementService\GetUetTagsByIdsResponse|\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault|\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault|\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault|\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault, HTTP status code, HTTP response headers (array of strings)
     */
    public function getUetTagsByIdsWithHttpInfo($GetUetTagsByIdsRequest, string $contentType = self::contentTypes['getUetTagsByIds'][0])
    {
        $request = $this->getUetTagsByIdsRequest($GetUetTagsByIdsRequest, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                $response = $e->getResponse();
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            switch($statusCode) {
                case 200:
                    return $this->getResponseContent($request, $response, '\Microsoft\MsAds\Rest\Model\CampaignManagementService\GetUetTagsByIdsResponse');
                case 400:
                    return $this->getResponseContent($request, $response, '\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault');
                case 500:
                    return $this->getResponseContent($request, $response, '\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault');
                case 401:
                    return $this->getResponseContent($request, $response, '\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault');
                case 403:
                    return $this->getResponseContent($request, $response, '\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault');
            }

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            $returnType = '\Microsoft\MsAds\Rest\Model\CampaignManagementService\GetUetTagsByIdsResponse';
            return $this->getResponseContent($request, $response, $returnType);

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Microsoft\MsAds\Rest\Model\CampaignManagementService\GetUetTagsByIdsResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 500:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 403:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getUetTagsByIdsAsync
     *
     * @param  \Microsoft\MsAds\Rest\Model\CampaignManagementService\GetUetTagsByIdsRequest $GetUetTagsByIdsRequest (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getUetTagsByIds'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getUetTagsByIdsAsync($GetUetTagsByIdsRequest, string $contentType = self::contentTypes['getUetTagsByIds'][0])
    {
        return $this->getUetTagsByIdsAsyncWithHttpInfo($GetUetTagsByIdsRequest, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getUetTagsByIdsAsyncWithHttpInfo
     *
     * @param  \Microsoft\MsAds\Rest\Model\CampaignManagementService\GetUetTagsByIdsRequest $GetUetTagsByIdsRequest (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getUetTagsByIds'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getUetTagsByIdsAsyncWithHttpInfo($GetUetTagsByIdsRequest, string $contentType = self::contentTypes['getUetTagsByIds'][0])
    {
        $returnType = '\Microsoft\MsAds\Rest\Model\CampaignManagementService\GetUetTagsByIdsResponse';
        $request = $this->getUetTagsByIdsRequest($GetUetTagsByIdsRequest, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return $this->onFulfilledResponse($response, $returnType);
                },
                function ($exception) {
                    $this->onRejectedResponse($exception);
                }
            );
    }

    /**
     * Create request for operation 'getUetTagsByIds'
     *
     * @param  \Microsoft\MsAds\Rest\Model\CampaignManagementService\GetUetTagsByIdsRequest $GetUetTagsByIdsRequest (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getUetTagsByIds'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function getUetTagsByIdsRequest($GetUetTagsByIdsRequest, string $contentType = self::contentTypes['getUetTagsByIds'][0])
    {

        // verify the required parameter 'GetUetTagsByIdsRequest' is set
        if ($GetUetTagsByIdsRequest === null || (is_array($GetUetTagsByIdsRequest) && count($GetUetTagsByIdsRequest) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $GetUetTagsByIdsRequest when calling getUetTagsByIds'
            );
        }


        $resourcePath = '/CampaignManagement/v13/UetTags/QueryByIds';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $multipart = false;

        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        return $this->setupAndSendRequest(
            'POST',
            $resourcePath,
            $headers,
            $headerParams,
            $GetUetTagsByIdsRequest,
            $formParams,
            $multipart,
            true,
            true,
            false,
            'getHostSettingsForgetUetTagsByIds',
            null,
            [],
            $queryParams
        );
    }

    /**
     * Operation getVideosByIds
     *
     * @param  \Microsoft\MsAds\Rest\Model\CampaignManagementService\GetVideosByIdsRequest $GetVideosByIdsRequest GetVideosByIdsRequest (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getVideosByIds'] to see the possible values for this operation
     *
     * @throws \Microsoft\MsAds\Rest\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \Microsoft\MsAds\Rest\Model\CampaignManagementService\GetVideosByIdsResponse|\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault|\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault|\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault|\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault
     */
    public function getVideosByIds($GetVideosByIdsRequest, string $contentType = self::contentTypes['getVideosByIds'][0])
    {
        list($response) = $this->getVideosByIdsWithHttpInfo($GetVideosByIdsRequest, $contentType);
        return $response;
    }

    /**
     * Operation getVideosByIdsWithHttpInfo
     *
     * @param  \Microsoft\MsAds\Rest\Model\CampaignManagementService\GetVideosByIdsRequest $GetVideosByIdsRequest (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getVideosByIds'] to see the possible values for this operation
     *
     * @throws \Microsoft\MsAds\Rest\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \Microsoft\MsAds\Rest\Model\CampaignManagementService\GetVideosByIdsResponse|\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault|\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault|\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault|\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault, HTTP status code, HTTP response headers (array of strings)
     */
    public function getVideosByIdsWithHttpInfo($GetVideosByIdsRequest, string $contentType = self::contentTypes['getVideosByIds'][0])
    {
        $request = $this->getVideosByIdsRequest($GetVideosByIdsRequest, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                $response = $e->getResponse();
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            switch($statusCode) {
                case 200:
                    return $this->getResponseContent($request, $response, '\Microsoft\MsAds\Rest\Model\CampaignManagementService\GetVideosByIdsResponse');
                case 400:
                    return $this->getResponseContent($request, $response, '\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault');
                case 500:
                    return $this->getResponseContent($request, $response, '\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault');
                case 401:
                    return $this->getResponseContent($request, $response, '\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault');
                case 403:
                    return $this->getResponseContent($request, $response, '\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault');
            }

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            $returnType = '\Microsoft\MsAds\Rest\Model\CampaignManagementService\GetVideosByIdsResponse';
            return $this->getResponseContent($request, $response, $returnType);

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Microsoft\MsAds\Rest\Model\CampaignManagementService\GetVideosByIdsResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 500:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 403:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getVideosByIdsAsync
     *
     * @param  \Microsoft\MsAds\Rest\Model\CampaignManagementService\GetVideosByIdsRequest $GetVideosByIdsRequest (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getVideosByIds'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getVideosByIdsAsync($GetVideosByIdsRequest, string $contentType = self::contentTypes['getVideosByIds'][0])
    {
        return $this->getVideosByIdsAsyncWithHttpInfo($GetVideosByIdsRequest, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getVideosByIdsAsyncWithHttpInfo
     *
     * @param  \Microsoft\MsAds\Rest\Model\CampaignManagementService\GetVideosByIdsRequest $GetVideosByIdsRequest (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getVideosByIds'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getVideosByIdsAsyncWithHttpInfo($GetVideosByIdsRequest, string $contentType = self::contentTypes['getVideosByIds'][0])
    {
        $returnType = '\Microsoft\MsAds\Rest\Model\CampaignManagementService\GetVideosByIdsResponse';
        $request = $this->getVideosByIdsRequest($GetVideosByIdsRequest, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return $this->onFulfilledResponse($response, $returnType);
                },
                function ($exception) {
                    $this->onRejectedResponse($exception);
                }
            );
    }

    /**
     * Create request for operation 'getVideosByIds'
     *
     * @param  \Microsoft\MsAds\Rest\Model\CampaignManagementService\GetVideosByIdsRequest $GetVideosByIdsRequest (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getVideosByIds'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function getVideosByIdsRequest($GetVideosByIdsRequest, string $contentType = self::contentTypes['getVideosByIds'][0])
    {

        // verify the required parameter 'GetVideosByIdsRequest' is set
        if ($GetVideosByIdsRequest === null || (is_array($GetVideosByIdsRequest) && count($GetVideosByIdsRequest) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $GetVideosByIdsRequest when calling getVideosByIds'
            );
        }


        $resourcePath = '/CampaignManagement/v13/Videos/QueryByIds';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $multipart = false;

        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        return $this->setupAndSendRequest(
            'POST',
            $resourcePath,
            $headers,
            $headerParams,
            $GetVideosByIdsRequest,
            $formParams,
            $multipart,
            true,
            true,
            false,
            'getHostSettingsForgetVideosByIds',
            null,
            [],
            $queryParams
        );
    }

    /**
     * Operation refineAssetGroupRecommendation
     *
     * @param  \Microsoft\MsAds\Rest\Model\CampaignManagementService\RefineAssetGroupRecommendationRequest $RefineAssetGroupRecommendationRequest RefineAssetGroupRecommendationRequest (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['refineAssetGroupRecommendation'] to see the possible values for this operation
     *
     * @throws \Microsoft\MsAds\Rest\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \Microsoft\MsAds\Rest\Model\CampaignManagementService\RefineAssetGroupRecommendationResponse|\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault|\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault|\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault|\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault
     */
    public function refineAssetGroupRecommendation($RefineAssetGroupRecommendationRequest, string $contentType = self::contentTypes['refineAssetGroupRecommendation'][0])
    {
        list($response) = $this->refineAssetGroupRecommendationWithHttpInfo($RefineAssetGroupRecommendationRequest, $contentType);
        return $response;
    }

    /**
     * Operation refineAssetGroupRecommendationWithHttpInfo
     *
     * @param  \Microsoft\MsAds\Rest\Model\CampaignManagementService\RefineAssetGroupRecommendationRequest $RefineAssetGroupRecommendationRequest (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['refineAssetGroupRecommendation'] to see the possible values for this operation
     *
     * @throws \Microsoft\MsAds\Rest\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \Microsoft\MsAds\Rest\Model\CampaignManagementService\RefineAssetGroupRecommendationResponse|\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault|\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault|\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault|\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault, HTTP status code, HTTP response headers (array of strings)
     */
    public function refineAssetGroupRecommendationWithHttpInfo($RefineAssetGroupRecommendationRequest, string $contentType = self::contentTypes['refineAssetGroupRecommendation'][0])
    {
        $request = $this->refineAssetGroupRecommendationRequest($RefineAssetGroupRecommendationRequest, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                $response = $e->getResponse();
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            switch($statusCode) {
                case 200:
                    return $this->getResponseContent($request, $response, '\Microsoft\MsAds\Rest\Model\CampaignManagementService\RefineAssetGroupRecommendationResponse');
                case 400:
                    return $this->getResponseContent($request, $response, '\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault');
                case 500:
                    return $this->getResponseContent($request, $response, '\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault');
                case 401:
                    return $this->getResponseContent($request, $response, '\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault');
                case 403:
                    return $this->getResponseContent($request, $response, '\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault');
            }

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            $returnType = '\Microsoft\MsAds\Rest\Model\CampaignManagementService\RefineAssetGroupRecommendationResponse';
            return $this->getResponseContent($request, $response, $returnType);

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Microsoft\MsAds\Rest\Model\CampaignManagementService\RefineAssetGroupRecommendationResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 500:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 403:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation refineAssetGroupRecommendationAsync
     *
     * @param  \Microsoft\MsAds\Rest\Model\CampaignManagementService\RefineAssetGroupRecommendationRequest $RefineAssetGroupRecommendationRequest (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['refineAssetGroupRecommendation'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function refineAssetGroupRecommendationAsync($RefineAssetGroupRecommendationRequest, string $contentType = self::contentTypes['refineAssetGroupRecommendation'][0])
    {
        return $this->refineAssetGroupRecommendationAsyncWithHttpInfo($RefineAssetGroupRecommendationRequest, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation refineAssetGroupRecommendationAsyncWithHttpInfo
     *
     * @param  \Microsoft\MsAds\Rest\Model\CampaignManagementService\RefineAssetGroupRecommendationRequest $RefineAssetGroupRecommendationRequest (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['refineAssetGroupRecommendation'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function refineAssetGroupRecommendationAsyncWithHttpInfo($RefineAssetGroupRecommendationRequest, string $contentType = self::contentTypes['refineAssetGroupRecommendation'][0])
    {
        $returnType = '\Microsoft\MsAds\Rest\Model\CampaignManagementService\RefineAssetGroupRecommendationResponse';
        $request = $this->refineAssetGroupRecommendationRequest($RefineAssetGroupRecommendationRequest, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return $this->onFulfilledResponse($response, $returnType);
                },
                function ($exception) {
                    $this->onRejectedResponse($exception);
                }
            );
    }

    /**
     * Create request for operation 'refineAssetGroupRecommendation'
     *
     * @param  \Microsoft\MsAds\Rest\Model\CampaignManagementService\RefineAssetGroupRecommendationRequest $RefineAssetGroupRecommendationRequest (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['refineAssetGroupRecommendation'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function refineAssetGroupRecommendationRequest($RefineAssetGroupRecommendationRequest, string $contentType = self::contentTypes['refineAssetGroupRecommendation'][0])
    {

        // verify the required parameter 'RefineAssetGroupRecommendationRequest' is set
        if ($RefineAssetGroupRecommendationRequest === null || (is_array($RefineAssetGroupRecommendationRequest) && count($RefineAssetGroupRecommendationRequest) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $RefineAssetGroupRecommendationRequest when calling refineAssetGroupRecommendation'
            );
        }


        $resourcePath = '/CampaignManagement/v13/AssetGroupRecommendation/Refine';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $multipart = false;

        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        return $this->setupAndSendRequest(
            'POST',
            $resourcePath,
            $headers,
            $headerParams,
            $RefineAssetGroupRecommendationRequest,
            $formParams,
            $multipart,
            true,
            true,
            false,
            'getHostSettingsForrefineAssetGroupRecommendation',
            null,
            [],
            $queryParams
        );
    }

    /**
     * Operation refineResponsiveAdRecommendation
     *
     * @param  \Microsoft\MsAds\Rest\Model\CampaignManagementService\RefineResponsiveAdRecommendationRequest $RefineResponsiveAdRecommendationRequest RefineResponsiveAdRecommendationRequest (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['refineResponsiveAdRecommendation'] to see the possible values for this operation
     *
     * @throws \Microsoft\MsAds\Rest\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \Microsoft\MsAds\Rest\Model\CampaignManagementService\RefineResponsiveAdRecommendationResponse|\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault|\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault|\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault|\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault
     */
    public function refineResponsiveAdRecommendation($RefineResponsiveAdRecommendationRequest, string $contentType = self::contentTypes['refineResponsiveAdRecommendation'][0])
    {
        list($response) = $this->refineResponsiveAdRecommendationWithHttpInfo($RefineResponsiveAdRecommendationRequest, $contentType);
        return $response;
    }

    /**
     * Operation refineResponsiveAdRecommendationWithHttpInfo
     *
     * @param  \Microsoft\MsAds\Rest\Model\CampaignManagementService\RefineResponsiveAdRecommendationRequest $RefineResponsiveAdRecommendationRequest (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['refineResponsiveAdRecommendation'] to see the possible values for this operation
     *
     * @throws \Microsoft\MsAds\Rest\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \Microsoft\MsAds\Rest\Model\CampaignManagementService\RefineResponsiveAdRecommendationResponse|\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault|\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault|\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault|\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault, HTTP status code, HTTP response headers (array of strings)
     */
    public function refineResponsiveAdRecommendationWithHttpInfo($RefineResponsiveAdRecommendationRequest, string $contentType = self::contentTypes['refineResponsiveAdRecommendation'][0])
    {
        $request = $this->refineResponsiveAdRecommendationRequest($RefineResponsiveAdRecommendationRequest, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                $response = $e->getResponse();
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            switch($statusCode) {
                case 200:
                    return $this->getResponseContent($request, $response, '\Microsoft\MsAds\Rest\Model\CampaignManagementService\RefineResponsiveAdRecommendationResponse');
                case 400:
                    return $this->getResponseContent($request, $response, '\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault');
                case 500:
                    return $this->getResponseContent($request, $response, '\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault');
                case 401:
                    return $this->getResponseContent($request, $response, '\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault');
                case 403:
                    return $this->getResponseContent($request, $response, '\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault');
            }

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            $returnType = '\Microsoft\MsAds\Rest\Model\CampaignManagementService\RefineResponsiveAdRecommendationResponse';
            return $this->getResponseContent($request, $response, $returnType);

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Microsoft\MsAds\Rest\Model\CampaignManagementService\RefineResponsiveAdRecommendationResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 500:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 403:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation refineResponsiveAdRecommendationAsync
     *
     * @param  \Microsoft\MsAds\Rest\Model\CampaignManagementService\RefineResponsiveAdRecommendationRequest $RefineResponsiveAdRecommendationRequest (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['refineResponsiveAdRecommendation'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function refineResponsiveAdRecommendationAsync($RefineResponsiveAdRecommendationRequest, string $contentType = self::contentTypes['refineResponsiveAdRecommendation'][0])
    {
        return $this->refineResponsiveAdRecommendationAsyncWithHttpInfo($RefineResponsiveAdRecommendationRequest, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation refineResponsiveAdRecommendationAsyncWithHttpInfo
     *
     * @param  \Microsoft\MsAds\Rest\Model\CampaignManagementService\RefineResponsiveAdRecommendationRequest $RefineResponsiveAdRecommendationRequest (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['refineResponsiveAdRecommendation'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function refineResponsiveAdRecommendationAsyncWithHttpInfo($RefineResponsiveAdRecommendationRequest, string $contentType = self::contentTypes['refineResponsiveAdRecommendation'][0])
    {
        $returnType = '\Microsoft\MsAds\Rest\Model\CampaignManagementService\RefineResponsiveAdRecommendationResponse';
        $request = $this->refineResponsiveAdRecommendationRequest($RefineResponsiveAdRecommendationRequest, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return $this->onFulfilledResponse($response, $returnType);
                },
                function ($exception) {
                    $this->onRejectedResponse($exception);
                }
            );
    }

    /**
     * Create request for operation 'refineResponsiveAdRecommendation'
     *
     * @param  \Microsoft\MsAds\Rest\Model\CampaignManagementService\RefineResponsiveAdRecommendationRequest $RefineResponsiveAdRecommendationRequest (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['refineResponsiveAdRecommendation'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function refineResponsiveAdRecommendationRequest($RefineResponsiveAdRecommendationRequest, string $contentType = self::contentTypes['refineResponsiveAdRecommendation'][0])
    {

        // verify the required parameter 'RefineResponsiveAdRecommendationRequest' is set
        if ($RefineResponsiveAdRecommendationRequest === null || (is_array($RefineResponsiveAdRecommendationRequest) && count($RefineResponsiveAdRecommendationRequest) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $RefineResponsiveAdRecommendationRequest when calling refineResponsiveAdRecommendation'
            );
        }


        $resourcePath = '/CampaignManagement/v13/ResponsiveAdRecommendation/Refine';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $multipart = false;

        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        return $this->setupAndSendRequest(
            'POST',
            $resourcePath,
            $headers,
            $headerParams,
            $RefineResponsiveAdRecommendationRequest,
            $formParams,
            $multipart,
            true,
            true,
            false,
            'getHostSettingsForrefineResponsiveAdRecommendation',
            null,
            [],
            $queryParams
        );
    }

    /**
     * Operation refineResponsiveSearchAdRecommendation
     *
     * @param  \Microsoft\MsAds\Rest\Model\CampaignManagementService\RefineResponsiveSearchAdRecommendationRequest $RefineResponsiveSearchAdRecommendationRequest RefineResponsiveSearchAdRecommendationRequest (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['refineResponsiveSearchAdRecommendation'] to see the possible values for this operation
     *
     * @throws \Microsoft\MsAds\Rest\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \Microsoft\MsAds\Rest\Model\CampaignManagementService\RefineResponsiveSearchAdRecommendationResponse|\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault|\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault|\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault|\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault
     */
    public function refineResponsiveSearchAdRecommendation($RefineResponsiveSearchAdRecommendationRequest, string $contentType = self::contentTypes['refineResponsiveSearchAdRecommendation'][0])
    {
        list($response) = $this->refineResponsiveSearchAdRecommendationWithHttpInfo($RefineResponsiveSearchAdRecommendationRequest, $contentType);
        return $response;
    }

    /**
     * Operation refineResponsiveSearchAdRecommendationWithHttpInfo
     *
     * @param  \Microsoft\MsAds\Rest\Model\CampaignManagementService\RefineResponsiveSearchAdRecommendationRequest $RefineResponsiveSearchAdRecommendationRequest (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['refineResponsiveSearchAdRecommendation'] to see the possible values for this operation
     *
     * @throws \Microsoft\MsAds\Rest\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \Microsoft\MsAds\Rest\Model\CampaignManagementService\RefineResponsiveSearchAdRecommendationResponse|\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault|\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault|\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault|\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault, HTTP status code, HTTP response headers (array of strings)
     */
    public function refineResponsiveSearchAdRecommendationWithHttpInfo($RefineResponsiveSearchAdRecommendationRequest, string $contentType = self::contentTypes['refineResponsiveSearchAdRecommendation'][0])
    {
        $request = $this->refineResponsiveSearchAdRecommendationRequest($RefineResponsiveSearchAdRecommendationRequest, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                $response = $e->getResponse();
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            switch($statusCode) {
                case 200:
                    return $this->getResponseContent($request, $response, '\Microsoft\MsAds\Rest\Model\CampaignManagementService\RefineResponsiveSearchAdRecommendationResponse');
                case 400:
                    return $this->getResponseContent($request, $response, '\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault');
                case 500:
                    return $this->getResponseContent($request, $response, '\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault');
                case 401:
                    return $this->getResponseContent($request, $response, '\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault');
                case 403:
                    return $this->getResponseContent($request, $response, '\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault');
            }

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            $returnType = '\Microsoft\MsAds\Rest\Model\CampaignManagementService\RefineResponsiveSearchAdRecommendationResponse';
            return $this->getResponseContent($request, $response, $returnType);

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Microsoft\MsAds\Rest\Model\CampaignManagementService\RefineResponsiveSearchAdRecommendationResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 500:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 403:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation refineResponsiveSearchAdRecommendationAsync
     *
     * @param  \Microsoft\MsAds\Rest\Model\CampaignManagementService\RefineResponsiveSearchAdRecommendationRequest $RefineResponsiveSearchAdRecommendationRequest (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['refineResponsiveSearchAdRecommendation'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function refineResponsiveSearchAdRecommendationAsync($RefineResponsiveSearchAdRecommendationRequest, string $contentType = self::contentTypes['refineResponsiveSearchAdRecommendation'][0])
    {
        return $this->refineResponsiveSearchAdRecommendationAsyncWithHttpInfo($RefineResponsiveSearchAdRecommendationRequest, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation refineResponsiveSearchAdRecommendationAsyncWithHttpInfo
     *
     * @param  \Microsoft\MsAds\Rest\Model\CampaignManagementService\RefineResponsiveSearchAdRecommendationRequest $RefineResponsiveSearchAdRecommendationRequest (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['refineResponsiveSearchAdRecommendation'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function refineResponsiveSearchAdRecommendationAsyncWithHttpInfo($RefineResponsiveSearchAdRecommendationRequest, string $contentType = self::contentTypes['refineResponsiveSearchAdRecommendation'][0])
    {
        $returnType = '\Microsoft\MsAds\Rest\Model\CampaignManagementService\RefineResponsiveSearchAdRecommendationResponse';
        $request = $this->refineResponsiveSearchAdRecommendationRequest($RefineResponsiveSearchAdRecommendationRequest, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return $this->onFulfilledResponse($response, $returnType);
                },
                function ($exception) {
                    $this->onRejectedResponse($exception);
                }
            );
    }

    /**
     * Create request for operation 'refineResponsiveSearchAdRecommendation'
     *
     * @param  \Microsoft\MsAds\Rest\Model\CampaignManagementService\RefineResponsiveSearchAdRecommendationRequest $RefineResponsiveSearchAdRecommendationRequest (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['refineResponsiveSearchAdRecommendation'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function refineResponsiveSearchAdRecommendationRequest($RefineResponsiveSearchAdRecommendationRequest, string $contentType = self::contentTypes['refineResponsiveSearchAdRecommendation'][0])
    {

        // verify the required parameter 'RefineResponsiveSearchAdRecommendationRequest' is set
        if ($RefineResponsiveSearchAdRecommendationRequest === null || (is_array($RefineResponsiveSearchAdRecommendationRequest) && count($RefineResponsiveSearchAdRecommendationRequest) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $RefineResponsiveSearchAdRecommendationRequest when calling refineResponsiveSearchAdRecommendation'
            );
        }


        $resourcePath = '/CampaignManagement/v13/ResponsiveSearchAdRecommendation/Refine';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $multipart = false;

        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        return $this->setupAndSendRequest(
            'POST',
            $resourcePath,
            $headers,
            $headerParams,
            $RefineResponsiveSearchAdRecommendationRequest,
            $formParams,
            $multipart,
            true,
            true,
            false,
            'getHostSettingsForrefineResponsiveSearchAdRecommendation',
            null,
            [],
            $queryParams
        );
    }

    /**
     * Operation searchCompanies
     *
     * @param  \Microsoft\MsAds\Rest\Model\CampaignManagementService\SearchCompaniesRequest $SearchCompaniesRequest SearchCompaniesRequest (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['searchCompanies'] to see the possible values for this operation
     *
     * @throws \Microsoft\MsAds\Rest\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \Microsoft\MsAds\Rest\Model\CampaignManagementService\SearchCompaniesResponse|\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault|\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault|\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault|\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault
     */
    public function searchCompanies($SearchCompaniesRequest, string $contentType = self::contentTypes['searchCompanies'][0])
    {
        list($response) = $this->searchCompaniesWithHttpInfo($SearchCompaniesRequest, $contentType);
        return $response;
    }

    /**
     * Operation searchCompaniesWithHttpInfo
     *
     * @param  \Microsoft\MsAds\Rest\Model\CampaignManagementService\SearchCompaniesRequest $SearchCompaniesRequest (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['searchCompanies'] to see the possible values for this operation
     *
     * @throws \Microsoft\MsAds\Rest\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \Microsoft\MsAds\Rest\Model\CampaignManagementService\SearchCompaniesResponse|\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault|\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault|\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault|\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault, HTTP status code, HTTP response headers (array of strings)
     */
    public function searchCompaniesWithHttpInfo($SearchCompaniesRequest, string $contentType = self::contentTypes['searchCompanies'][0])
    {
        $request = $this->searchCompaniesRequest($SearchCompaniesRequest, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                $response = $e->getResponse();
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            switch($statusCode) {
                case 200:
                    return $this->getResponseContent($request, $response, '\Microsoft\MsAds\Rest\Model\CampaignManagementService\SearchCompaniesResponse');
                case 400:
                    return $this->getResponseContent($request, $response, '\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault');
                case 500:
                    return $this->getResponseContent($request, $response, '\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault');
                case 401:
                    return $this->getResponseContent($request, $response, '\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault');
                case 403:
                    return $this->getResponseContent($request, $response, '\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault');
            }

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            $returnType = '\Microsoft\MsAds\Rest\Model\CampaignManagementService\SearchCompaniesResponse';
            return $this->getResponseContent($request, $response, $returnType);

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Microsoft\MsAds\Rest\Model\CampaignManagementService\SearchCompaniesResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 500:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 403:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation searchCompaniesAsync
     *
     * @param  \Microsoft\MsAds\Rest\Model\CampaignManagementService\SearchCompaniesRequest $SearchCompaniesRequest (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['searchCompanies'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function searchCompaniesAsync($SearchCompaniesRequest, string $contentType = self::contentTypes['searchCompanies'][0])
    {
        return $this->searchCompaniesAsyncWithHttpInfo($SearchCompaniesRequest, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation searchCompaniesAsyncWithHttpInfo
     *
     * @param  \Microsoft\MsAds\Rest\Model\CampaignManagementService\SearchCompaniesRequest $SearchCompaniesRequest (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['searchCompanies'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function searchCompaniesAsyncWithHttpInfo($SearchCompaniesRequest, string $contentType = self::contentTypes['searchCompanies'][0])
    {
        $returnType = '\Microsoft\MsAds\Rest\Model\CampaignManagementService\SearchCompaniesResponse';
        $request = $this->searchCompaniesRequest($SearchCompaniesRequest, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return $this->onFulfilledResponse($response, $returnType);
                },
                function ($exception) {
                    $this->onRejectedResponse($exception);
                }
            );
    }

    /**
     * Create request for operation 'searchCompanies'
     *
     * @param  \Microsoft\MsAds\Rest\Model\CampaignManagementService\SearchCompaniesRequest $SearchCompaniesRequest (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['searchCompanies'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function searchCompaniesRequest($SearchCompaniesRequest, string $contentType = self::contentTypes['searchCompanies'][0])
    {

        // verify the required parameter 'SearchCompaniesRequest' is set
        if ($SearchCompaniesRequest === null || (is_array($SearchCompaniesRequest) && count($SearchCompaniesRequest) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $SearchCompaniesRequest when calling searchCompanies'
            );
        }


        $resourcePath = '/CampaignManagement/v13/Companies/Search';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $multipart = false;

        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        return $this->setupAndSendRequest(
            'POST',
            $resourcePath,
            $headers,
            $headerParams,
            $SearchCompaniesRequest,
            $formParams,
            $multipart,
            true,
            true,
            false,
            'getHostSettingsForsearchCompanies',
            null,
            [],
            $queryParams
        );
    }

    /**
     * Operation setAccountProperties
     *
     * @param  \Microsoft\MsAds\Rest\Model\CampaignManagementService\SetAccountPropertiesRequest $SetAccountPropertiesRequest SetAccountPropertiesRequest (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['setAccountProperties'] to see the possible values for this operation
     *
     * @throws \Microsoft\MsAds\Rest\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return object|\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault|\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault|\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault|\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault
     */
    public function setAccountProperties($SetAccountPropertiesRequest, string $contentType = self::contentTypes['setAccountProperties'][0])
    {
        list($response) = $this->setAccountPropertiesWithHttpInfo($SetAccountPropertiesRequest, $contentType);
        return $response;
    }

    /**
     * Operation setAccountPropertiesWithHttpInfo
     *
     * @param  \Microsoft\MsAds\Rest\Model\CampaignManagementService\SetAccountPropertiesRequest $SetAccountPropertiesRequest (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['setAccountProperties'] to see the possible values for this operation
     *
     * @throws \Microsoft\MsAds\Rest\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of object|\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault|\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault|\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault|\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault, HTTP status code, HTTP response headers (array of strings)
     */
    public function setAccountPropertiesWithHttpInfo($SetAccountPropertiesRequest, string $contentType = self::contentTypes['setAccountProperties'][0])
    {
        $request = $this->setAccountPropertiesRequest($SetAccountPropertiesRequest, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                $response = $e->getResponse();
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            switch($statusCode) {
                case 200:
                    return $this->getResponseContent($request, $response, 'object');
                case 400:
                    return $this->getResponseContent($request, $response, '\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault');
                case 500:
                    return $this->getResponseContent($request, $response, '\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault');
                case 401:
                    return $this->getResponseContent($request, $response, '\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault');
                case 403:
                    return $this->getResponseContent($request, $response, '\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault');
            }

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            $returnType = 'object';
            return $this->getResponseContent($request, $response, $returnType);

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        'object',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 500:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 403:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation setAccountPropertiesAsync
     *
     * @param  \Microsoft\MsAds\Rest\Model\CampaignManagementService\SetAccountPropertiesRequest $SetAccountPropertiesRequest (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['setAccountProperties'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function setAccountPropertiesAsync($SetAccountPropertiesRequest, string $contentType = self::contentTypes['setAccountProperties'][0])
    {
        return $this->setAccountPropertiesAsyncWithHttpInfo($SetAccountPropertiesRequest, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation setAccountPropertiesAsyncWithHttpInfo
     *
     * @param  \Microsoft\MsAds\Rest\Model\CampaignManagementService\SetAccountPropertiesRequest $SetAccountPropertiesRequest (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['setAccountProperties'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function setAccountPropertiesAsyncWithHttpInfo($SetAccountPropertiesRequest, string $contentType = self::contentTypes['setAccountProperties'][0])
    {
        $returnType = 'object';
        $request = $this->setAccountPropertiesRequest($SetAccountPropertiesRequest, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return $this->onFulfilledResponse($response, $returnType);
                },
                function ($exception) {
                    $this->onRejectedResponse($exception);
                }
            );
    }

    /**
     * Create request for operation 'setAccountProperties'
     *
     * @param  \Microsoft\MsAds\Rest\Model\CampaignManagementService\SetAccountPropertiesRequest $SetAccountPropertiesRequest (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['setAccountProperties'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function setAccountPropertiesRequest($SetAccountPropertiesRequest, string $contentType = self::contentTypes['setAccountProperties'][0])
    {

        // verify the required parameter 'SetAccountPropertiesRequest' is set
        if ($SetAccountPropertiesRequest === null || (is_array($SetAccountPropertiesRequest) && count($SetAccountPropertiesRequest) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $SetAccountPropertiesRequest when calling setAccountProperties'
            );
        }


        $resourcePath = '/CampaignManagement/v13/AccountProperties/Set';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $multipart = false;

        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        return $this->setupAndSendRequest(
            'POST',
            $resourcePath,
            $headers,
            $headerParams,
            $SetAccountPropertiesRequest,
            $formParams,
            $multipart,
            true,
            true,
            false,
            'getHostSettingsForsetAccountProperties',
            null,
            [],
            $queryParams
        );
    }

    /**
     * Operation setAdExtensionsAssociations
     *
     * @param  \Microsoft\MsAds\Rest\Model\CampaignManagementService\SetAdExtensionsAssociationsRequest $SetAdExtensionsAssociationsRequest SetAdExtensionsAssociationsRequest (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['setAdExtensionsAssociations'] to see the possible values for this operation
     *
     * @throws \Microsoft\MsAds\Rest\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \Microsoft\MsAds\Rest\Model\CampaignManagementService\SetAdExtensionsAssociationsResponse|\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault|\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault|\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault|\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault
     */
    public function setAdExtensionsAssociations($SetAdExtensionsAssociationsRequest, string $contentType = self::contentTypes['setAdExtensionsAssociations'][0])
    {
        list($response) = $this->setAdExtensionsAssociationsWithHttpInfo($SetAdExtensionsAssociationsRequest, $contentType);
        return $response;
    }

    /**
     * Operation setAdExtensionsAssociationsWithHttpInfo
     *
     * @param  \Microsoft\MsAds\Rest\Model\CampaignManagementService\SetAdExtensionsAssociationsRequest $SetAdExtensionsAssociationsRequest (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['setAdExtensionsAssociations'] to see the possible values for this operation
     *
     * @throws \Microsoft\MsAds\Rest\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \Microsoft\MsAds\Rest\Model\CampaignManagementService\SetAdExtensionsAssociationsResponse|\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault|\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault|\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault|\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault, HTTP status code, HTTP response headers (array of strings)
     */
    public function setAdExtensionsAssociationsWithHttpInfo($SetAdExtensionsAssociationsRequest, string $contentType = self::contentTypes['setAdExtensionsAssociations'][0])
    {
        $request = $this->setAdExtensionsAssociationsRequest($SetAdExtensionsAssociationsRequest, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                $response = $e->getResponse();
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            switch($statusCode) {
                case 200:
                    return $this->getResponseContent($request, $response, '\Microsoft\MsAds\Rest\Model\CampaignManagementService\SetAdExtensionsAssociationsResponse');
                case 400:
                    return $this->getResponseContent($request, $response, '\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault');
                case 500:
                    return $this->getResponseContent($request, $response, '\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault');
                case 401:
                    return $this->getResponseContent($request, $response, '\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault');
                case 403:
                    return $this->getResponseContent($request, $response, '\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault');
            }

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            $returnType = '\Microsoft\MsAds\Rest\Model\CampaignManagementService\SetAdExtensionsAssociationsResponse';
            return $this->getResponseContent($request, $response, $returnType);

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Microsoft\MsAds\Rest\Model\CampaignManagementService\SetAdExtensionsAssociationsResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 500:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 403:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation setAdExtensionsAssociationsAsync
     *
     * @param  \Microsoft\MsAds\Rest\Model\CampaignManagementService\SetAdExtensionsAssociationsRequest $SetAdExtensionsAssociationsRequest (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['setAdExtensionsAssociations'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function setAdExtensionsAssociationsAsync($SetAdExtensionsAssociationsRequest, string $contentType = self::contentTypes['setAdExtensionsAssociations'][0])
    {
        return $this->setAdExtensionsAssociationsAsyncWithHttpInfo($SetAdExtensionsAssociationsRequest, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation setAdExtensionsAssociationsAsyncWithHttpInfo
     *
     * @param  \Microsoft\MsAds\Rest\Model\CampaignManagementService\SetAdExtensionsAssociationsRequest $SetAdExtensionsAssociationsRequest (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['setAdExtensionsAssociations'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function setAdExtensionsAssociationsAsyncWithHttpInfo($SetAdExtensionsAssociationsRequest, string $contentType = self::contentTypes['setAdExtensionsAssociations'][0])
    {
        $returnType = '\Microsoft\MsAds\Rest\Model\CampaignManagementService\SetAdExtensionsAssociationsResponse';
        $request = $this->setAdExtensionsAssociationsRequest($SetAdExtensionsAssociationsRequest, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return $this->onFulfilledResponse($response, $returnType);
                },
                function ($exception) {
                    $this->onRejectedResponse($exception);
                }
            );
    }

    /**
     * Create request for operation 'setAdExtensionsAssociations'
     *
     * @param  \Microsoft\MsAds\Rest\Model\CampaignManagementService\SetAdExtensionsAssociationsRequest $SetAdExtensionsAssociationsRequest (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['setAdExtensionsAssociations'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function setAdExtensionsAssociationsRequest($SetAdExtensionsAssociationsRequest, string $contentType = self::contentTypes['setAdExtensionsAssociations'][0])
    {

        // verify the required parameter 'SetAdExtensionsAssociationsRequest' is set
        if ($SetAdExtensionsAssociationsRequest === null || (is_array($SetAdExtensionsAssociationsRequest) && count($SetAdExtensionsAssociationsRequest) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $SetAdExtensionsAssociationsRequest when calling setAdExtensionsAssociations'
            );
        }


        $resourcePath = '/CampaignManagement/v13/AdExtensionsAssociations/Set';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $multipart = false;

        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        return $this->setupAndSendRequest(
            'POST',
            $resourcePath,
            $headers,
            $headerParams,
            $SetAdExtensionsAssociationsRequest,
            $formParams,
            $multipart,
            true,
            true,
            false,
            'getHostSettingsForsetAdExtensionsAssociations',
            null,
            [],
            $queryParams
        );
    }

    /**
     * Operation setAudienceGroupAssetGroupAssociations
     *
     * @param  \Microsoft\MsAds\Rest\Model\CampaignManagementService\SetAudienceGroupAssetGroupAssociationsRequest $SetAudienceGroupAssetGroupAssociationsRequest SetAudienceGroupAssetGroupAssociationsRequest (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['setAudienceGroupAssetGroupAssociations'] to see the possible values for this operation
     *
     * @throws \Microsoft\MsAds\Rest\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \Microsoft\MsAds\Rest\Model\CampaignManagementService\SetAudienceGroupAssetGroupAssociationsResponse|\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault|\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault|\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault|\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault
     */
    public function setAudienceGroupAssetGroupAssociations($SetAudienceGroupAssetGroupAssociationsRequest, string $contentType = self::contentTypes['setAudienceGroupAssetGroupAssociations'][0])
    {
        list($response) = $this->setAudienceGroupAssetGroupAssociationsWithHttpInfo($SetAudienceGroupAssetGroupAssociationsRequest, $contentType);
        return $response;
    }

    /**
     * Operation setAudienceGroupAssetGroupAssociationsWithHttpInfo
     *
     * @param  \Microsoft\MsAds\Rest\Model\CampaignManagementService\SetAudienceGroupAssetGroupAssociationsRequest $SetAudienceGroupAssetGroupAssociationsRequest (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['setAudienceGroupAssetGroupAssociations'] to see the possible values for this operation
     *
     * @throws \Microsoft\MsAds\Rest\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \Microsoft\MsAds\Rest\Model\CampaignManagementService\SetAudienceGroupAssetGroupAssociationsResponse|\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault|\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault|\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault|\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault, HTTP status code, HTTP response headers (array of strings)
     */
    public function setAudienceGroupAssetGroupAssociationsWithHttpInfo($SetAudienceGroupAssetGroupAssociationsRequest, string $contentType = self::contentTypes['setAudienceGroupAssetGroupAssociations'][0])
    {
        $request = $this->setAudienceGroupAssetGroupAssociationsRequest($SetAudienceGroupAssetGroupAssociationsRequest, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                $response = $e->getResponse();
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            switch($statusCode) {
                case 200:
                    return $this->getResponseContent($request, $response, '\Microsoft\MsAds\Rest\Model\CampaignManagementService\SetAudienceGroupAssetGroupAssociationsResponse');
                case 400:
                    return $this->getResponseContent($request, $response, '\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault');
                case 500:
                    return $this->getResponseContent($request, $response, '\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault');
                case 401:
                    return $this->getResponseContent($request, $response, '\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault');
                case 403:
                    return $this->getResponseContent($request, $response, '\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault');
            }

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            $returnType = '\Microsoft\MsAds\Rest\Model\CampaignManagementService\SetAudienceGroupAssetGroupAssociationsResponse';
            return $this->getResponseContent($request, $response, $returnType);

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Microsoft\MsAds\Rest\Model\CampaignManagementService\SetAudienceGroupAssetGroupAssociationsResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 500:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 403:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation setAudienceGroupAssetGroupAssociationsAsync
     *
     * @param  \Microsoft\MsAds\Rest\Model\CampaignManagementService\SetAudienceGroupAssetGroupAssociationsRequest $SetAudienceGroupAssetGroupAssociationsRequest (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['setAudienceGroupAssetGroupAssociations'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function setAudienceGroupAssetGroupAssociationsAsync($SetAudienceGroupAssetGroupAssociationsRequest, string $contentType = self::contentTypes['setAudienceGroupAssetGroupAssociations'][0])
    {
        return $this->setAudienceGroupAssetGroupAssociationsAsyncWithHttpInfo($SetAudienceGroupAssetGroupAssociationsRequest, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation setAudienceGroupAssetGroupAssociationsAsyncWithHttpInfo
     *
     * @param  \Microsoft\MsAds\Rest\Model\CampaignManagementService\SetAudienceGroupAssetGroupAssociationsRequest $SetAudienceGroupAssetGroupAssociationsRequest (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['setAudienceGroupAssetGroupAssociations'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function setAudienceGroupAssetGroupAssociationsAsyncWithHttpInfo($SetAudienceGroupAssetGroupAssociationsRequest, string $contentType = self::contentTypes['setAudienceGroupAssetGroupAssociations'][0])
    {
        $returnType = '\Microsoft\MsAds\Rest\Model\CampaignManagementService\SetAudienceGroupAssetGroupAssociationsResponse';
        $request = $this->setAudienceGroupAssetGroupAssociationsRequest($SetAudienceGroupAssetGroupAssociationsRequest, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return $this->onFulfilledResponse($response, $returnType);
                },
                function ($exception) {
                    $this->onRejectedResponse($exception);
                }
            );
    }

    /**
     * Create request for operation 'setAudienceGroupAssetGroupAssociations'
     *
     * @param  \Microsoft\MsAds\Rest\Model\CampaignManagementService\SetAudienceGroupAssetGroupAssociationsRequest $SetAudienceGroupAssetGroupAssociationsRequest (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['setAudienceGroupAssetGroupAssociations'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function setAudienceGroupAssetGroupAssociationsRequest($SetAudienceGroupAssetGroupAssociationsRequest, string $contentType = self::contentTypes['setAudienceGroupAssetGroupAssociations'][0])
    {

        // verify the required parameter 'SetAudienceGroupAssetGroupAssociationsRequest' is set
        if ($SetAudienceGroupAssetGroupAssociationsRequest === null || (is_array($SetAudienceGroupAssetGroupAssociationsRequest) && count($SetAudienceGroupAssetGroupAssociationsRequest) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $SetAudienceGroupAssetGroupAssociationsRequest when calling setAudienceGroupAssetGroupAssociations'
            );
        }


        $resourcePath = '/CampaignManagement/v13/AudienceGroupAssetGroupAssociations/Set';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $multipart = false;

        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        return $this->setupAndSendRequest(
            'POST',
            $resourcePath,
            $headers,
            $headerParams,
            $SetAudienceGroupAssetGroupAssociationsRequest,
            $formParams,
            $multipart,
            true,
            true,
            false,
            'getHostSettingsForsetAudienceGroupAssetGroupAssociations',
            null,
            [],
            $queryParams
        );
    }

    /**
     * Operation setLabelAssociations
     *
     * @param  \Microsoft\MsAds\Rest\Model\CampaignManagementService\SetLabelAssociationsRequest $SetLabelAssociationsRequest SetLabelAssociationsRequest (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['setLabelAssociations'] to see the possible values for this operation
     *
     * @throws \Microsoft\MsAds\Rest\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \Microsoft\MsAds\Rest\Model\CampaignManagementService\SetLabelAssociationsResponse|\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault|\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault|\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault|\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault
     */
    public function setLabelAssociations($SetLabelAssociationsRequest, string $contentType = self::contentTypes['setLabelAssociations'][0])
    {
        list($response) = $this->setLabelAssociationsWithHttpInfo($SetLabelAssociationsRequest, $contentType);
        return $response;
    }

    /**
     * Operation setLabelAssociationsWithHttpInfo
     *
     * @param  \Microsoft\MsAds\Rest\Model\CampaignManagementService\SetLabelAssociationsRequest $SetLabelAssociationsRequest (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['setLabelAssociations'] to see the possible values for this operation
     *
     * @throws \Microsoft\MsAds\Rest\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \Microsoft\MsAds\Rest\Model\CampaignManagementService\SetLabelAssociationsResponse|\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault|\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault|\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault|\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault, HTTP status code, HTTP response headers (array of strings)
     */
    public function setLabelAssociationsWithHttpInfo($SetLabelAssociationsRequest, string $contentType = self::contentTypes['setLabelAssociations'][0])
    {
        $request = $this->setLabelAssociationsRequest($SetLabelAssociationsRequest, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                $response = $e->getResponse();
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            switch($statusCode) {
                case 200:
                    return $this->getResponseContent($request, $response, '\Microsoft\MsAds\Rest\Model\CampaignManagementService\SetLabelAssociationsResponse');
                case 400:
                    return $this->getResponseContent($request, $response, '\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault');
                case 500:
                    return $this->getResponseContent($request, $response, '\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault');
                case 401:
                    return $this->getResponseContent($request, $response, '\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault');
                case 403:
                    return $this->getResponseContent($request, $response, '\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault');
            }

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            $returnType = '\Microsoft\MsAds\Rest\Model\CampaignManagementService\SetLabelAssociationsResponse';
            return $this->getResponseContent($request, $response, $returnType);

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Microsoft\MsAds\Rest\Model\CampaignManagementService\SetLabelAssociationsResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 500:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 403:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation setLabelAssociationsAsync
     *
     * @param  \Microsoft\MsAds\Rest\Model\CampaignManagementService\SetLabelAssociationsRequest $SetLabelAssociationsRequest (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['setLabelAssociations'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function setLabelAssociationsAsync($SetLabelAssociationsRequest, string $contentType = self::contentTypes['setLabelAssociations'][0])
    {
        return $this->setLabelAssociationsAsyncWithHttpInfo($SetLabelAssociationsRequest, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation setLabelAssociationsAsyncWithHttpInfo
     *
     * @param  \Microsoft\MsAds\Rest\Model\CampaignManagementService\SetLabelAssociationsRequest $SetLabelAssociationsRequest (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['setLabelAssociations'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function setLabelAssociationsAsyncWithHttpInfo($SetLabelAssociationsRequest, string $contentType = self::contentTypes['setLabelAssociations'][0])
    {
        $returnType = '\Microsoft\MsAds\Rest\Model\CampaignManagementService\SetLabelAssociationsResponse';
        $request = $this->setLabelAssociationsRequest($SetLabelAssociationsRequest, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return $this->onFulfilledResponse($response, $returnType);
                },
                function ($exception) {
                    $this->onRejectedResponse($exception);
                }
            );
    }

    /**
     * Create request for operation 'setLabelAssociations'
     *
     * @param  \Microsoft\MsAds\Rest\Model\CampaignManagementService\SetLabelAssociationsRequest $SetLabelAssociationsRequest (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['setLabelAssociations'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function setLabelAssociationsRequest($SetLabelAssociationsRequest, string $contentType = self::contentTypes['setLabelAssociations'][0])
    {

        // verify the required parameter 'SetLabelAssociationsRequest' is set
        if ($SetLabelAssociationsRequest === null || (is_array($SetLabelAssociationsRequest) && count($SetLabelAssociationsRequest) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $SetLabelAssociationsRequest when calling setLabelAssociations'
            );
        }


        $resourcePath = '/CampaignManagement/v13/LabelAssociations/Set';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $multipart = false;

        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        return $this->setupAndSendRequest(
            'POST',
            $resourcePath,
            $headers,
            $headerParams,
            $SetLabelAssociationsRequest,
            $formParams,
            $multipart,
            true,
            true,
            false,
            'getHostSettingsForsetLabelAssociations',
            null,
            [],
            $queryParams
        );
    }

    /**
     * Operation setNegativeSitesToAdGroups
     *
     * @param  \Microsoft\MsAds\Rest\Model\CampaignManagementService\SetNegativeSitesToAdGroupsRequest $SetNegativeSitesToAdGroupsRequest SetNegativeSitesToAdGroupsRequest (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['setNegativeSitesToAdGroups'] to see the possible values for this operation
     *
     * @throws \Microsoft\MsAds\Rest\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \Microsoft\MsAds\Rest\Model\CampaignManagementService\SetNegativeSitesToAdGroupsResponse|\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault|\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault|\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault|\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault
     */
    public function setNegativeSitesToAdGroups($SetNegativeSitesToAdGroupsRequest, string $contentType = self::contentTypes['setNegativeSitesToAdGroups'][0])
    {
        list($response) = $this->setNegativeSitesToAdGroupsWithHttpInfo($SetNegativeSitesToAdGroupsRequest, $contentType);
        return $response;
    }

    /**
     * Operation setNegativeSitesToAdGroupsWithHttpInfo
     *
     * @param  \Microsoft\MsAds\Rest\Model\CampaignManagementService\SetNegativeSitesToAdGroupsRequest $SetNegativeSitesToAdGroupsRequest (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['setNegativeSitesToAdGroups'] to see the possible values for this operation
     *
     * @throws \Microsoft\MsAds\Rest\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \Microsoft\MsAds\Rest\Model\CampaignManagementService\SetNegativeSitesToAdGroupsResponse|\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault|\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault|\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault|\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault, HTTP status code, HTTP response headers (array of strings)
     */
    public function setNegativeSitesToAdGroupsWithHttpInfo($SetNegativeSitesToAdGroupsRequest, string $contentType = self::contentTypes['setNegativeSitesToAdGroups'][0])
    {
        $request = $this->setNegativeSitesToAdGroupsRequest($SetNegativeSitesToAdGroupsRequest, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                $response = $e->getResponse();
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            switch($statusCode) {
                case 200:
                    return $this->getResponseContent($request, $response, '\Microsoft\MsAds\Rest\Model\CampaignManagementService\SetNegativeSitesToAdGroupsResponse');
                case 400:
                    return $this->getResponseContent($request, $response, '\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault');
                case 500:
                    return $this->getResponseContent($request, $response, '\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault');
                case 401:
                    return $this->getResponseContent($request, $response, '\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault');
                case 403:
                    return $this->getResponseContent($request, $response, '\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault');
            }

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            $returnType = '\Microsoft\MsAds\Rest\Model\CampaignManagementService\SetNegativeSitesToAdGroupsResponse';
            return $this->getResponseContent($request, $response, $returnType);

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Microsoft\MsAds\Rest\Model\CampaignManagementService\SetNegativeSitesToAdGroupsResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 500:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 403:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation setNegativeSitesToAdGroupsAsync
     *
     * @param  \Microsoft\MsAds\Rest\Model\CampaignManagementService\SetNegativeSitesToAdGroupsRequest $SetNegativeSitesToAdGroupsRequest (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['setNegativeSitesToAdGroups'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function setNegativeSitesToAdGroupsAsync($SetNegativeSitesToAdGroupsRequest, string $contentType = self::contentTypes['setNegativeSitesToAdGroups'][0])
    {
        return $this->setNegativeSitesToAdGroupsAsyncWithHttpInfo($SetNegativeSitesToAdGroupsRequest, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation setNegativeSitesToAdGroupsAsyncWithHttpInfo
     *
     * @param  \Microsoft\MsAds\Rest\Model\CampaignManagementService\SetNegativeSitesToAdGroupsRequest $SetNegativeSitesToAdGroupsRequest (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['setNegativeSitesToAdGroups'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function setNegativeSitesToAdGroupsAsyncWithHttpInfo($SetNegativeSitesToAdGroupsRequest, string $contentType = self::contentTypes['setNegativeSitesToAdGroups'][0])
    {
        $returnType = '\Microsoft\MsAds\Rest\Model\CampaignManagementService\SetNegativeSitesToAdGroupsResponse';
        $request = $this->setNegativeSitesToAdGroupsRequest($SetNegativeSitesToAdGroupsRequest, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return $this->onFulfilledResponse($response, $returnType);
                },
                function ($exception) {
                    $this->onRejectedResponse($exception);
                }
            );
    }

    /**
     * Create request for operation 'setNegativeSitesToAdGroups'
     *
     * @param  \Microsoft\MsAds\Rest\Model\CampaignManagementService\SetNegativeSitesToAdGroupsRequest $SetNegativeSitesToAdGroupsRequest (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['setNegativeSitesToAdGroups'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function setNegativeSitesToAdGroupsRequest($SetNegativeSitesToAdGroupsRequest, string $contentType = self::contentTypes['setNegativeSitesToAdGroups'][0])
    {

        // verify the required parameter 'SetNegativeSitesToAdGroupsRequest' is set
        if ($SetNegativeSitesToAdGroupsRequest === null || (is_array($SetNegativeSitesToAdGroupsRequest) && count($SetNegativeSitesToAdGroupsRequest) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $SetNegativeSitesToAdGroupsRequest when calling setNegativeSitesToAdGroups'
            );
        }


        $resourcePath = '/CampaignManagement/v13/NegativeSites/SetToAdGroups';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $multipart = false;

        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        return $this->setupAndSendRequest(
            'POST',
            $resourcePath,
            $headers,
            $headerParams,
            $SetNegativeSitesToAdGroupsRequest,
            $formParams,
            $multipart,
            true,
            true,
            false,
            'getHostSettingsForsetNegativeSitesToAdGroups',
            null,
            [],
            $queryParams
        );
    }

    /**
     * Operation setNegativeSitesToCampaigns
     *
     * @param  \Microsoft\MsAds\Rest\Model\CampaignManagementService\SetNegativeSitesToCampaignsRequest $SetNegativeSitesToCampaignsRequest SetNegativeSitesToCampaignsRequest (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['setNegativeSitesToCampaigns'] to see the possible values for this operation
     *
     * @throws \Microsoft\MsAds\Rest\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \Microsoft\MsAds\Rest\Model\CampaignManagementService\SetNegativeSitesToCampaignsResponse|\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault|\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault|\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault|\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault
     */
    public function setNegativeSitesToCampaigns($SetNegativeSitesToCampaignsRequest, string $contentType = self::contentTypes['setNegativeSitesToCampaigns'][0])
    {
        list($response) = $this->setNegativeSitesToCampaignsWithHttpInfo($SetNegativeSitesToCampaignsRequest, $contentType);
        return $response;
    }

    /**
     * Operation setNegativeSitesToCampaignsWithHttpInfo
     *
     * @param  \Microsoft\MsAds\Rest\Model\CampaignManagementService\SetNegativeSitesToCampaignsRequest $SetNegativeSitesToCampaignsRequest (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['setNegativeSitesToCampaigns'] to see the possible values for this operation
     *
     * @throws \Microsoft\MsAds\Rest\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \Microsoft\MsAds\Rest\Model\CampaignManagementService\SetNegativeSitesToCampaignsResponse|\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault|\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault|\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault|\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault, HTTP status code, HTTP response headers (array of strings)
     */
    public function setNegativeSitesToCampaignsWithHttpInfo($SetNegativeSitesToCampaignsRequest, string $contentType = self::contentTypes['setNegativeSitesToCampaigns'][0])
    {
        $request = $this->setNegativeSitesToCampaignsRequest($SetNegativeSitesToCampaignsRequest, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                $response = $e->getResponse();
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            switch($statusCode) {
                case 200:
                    return $this->getResponseContent($request, $response, '\Microsoft\MsAds\Rest\Model\CampaignManagementService\SetNegativeSitesToCampaignsResponse');
                case 400:
                    return $this->getResponseContent($request, $response, '\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault');
                case 500:
                    return $this->getResponseContent($request, $response, '\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault');
                case 401:
                    return $this->getResponseContent($request, $response, '\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault');
                case 403:
                    return $this->getResponseContent($request, $response, '\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault');
            }

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            $returnType = '\Microsoft\MsAds\Rest\Model\CampaignManagementService\SetNegativeSitesToCampaignsResponse';
            return $this->getResponseContent($request, $response, $returnType);

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Microsoft\MsAds\Rest\Model\CampaignManagementService\SetNegativeSitesToCampaignsResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 500:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 403:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation setNegativeSitesToCampaignsAsync
     *
     * @param  \Microsoft\MsAds\Rest\Model\CampaignManagementService\SetNegativeSitesToCampaignsRequest $SetNegativeSitesToCampaignsRequest (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['setNegativeSitesToCampaigns'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function setNegativeSitesToCampaignsAsync($SetNegativeSitesToCampaignsRequest, string $contentType = self::contentTypes['setNegativeSitesToCampaigns'][0])
    {
        return $this->setNegativeSitesToCampaignsAsyncWithHttpInfo($SetNegativeSitesToCampaignsRequest, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation setNegativeSitesToCampaignsAsyncWithHttpInfo
     *
     * @param  \Microsoft\MsAds\Rest\Model\CampaignManagementService\SetNegativeSitesToCampaignsRequest $SetNegativeSitesToCampaignsRequest (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['setNegativeSitesToCampaigns'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function setNegativeSitesToCampaignsAsyncWithHttpInfo($SetNegativeSitesToCampaignsRequest, string $contentType = self::contentTypes['setNegativeSitesToCampaigns'][0])
    {
        $returnType = '\Microsoft\MsAds\Rest\Model\CampaignManagementService\SetNegativeSitesToCampaignsResponse';
        $request = $this->setNegativeSitesToCampaignsRequest($SetNegativeSitesToCampaignsRequest, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return $this->onFulfilledResponse($response, $returnType);
                },
                function ($exception) {
                    $this->onRejectedResponse($exception);
                }
            );
    }

    /**
     * Create request for operation 'setNegativeSitesToCampaigns'
     *
     * @param  \Microsoft\MsAds\Rest\Model\CampaignManagementService\SetNegativeSitesToCampaignsRequest $SetNegativeSitesToCampaignsRequest (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['setNegativeSitesToCampaigns'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function setNegativeSitesToCampaignsRequest($SetNegativeSitesToCampaignsRequest, string $contentType = self::contentTypes['setNegativeSitesToCampaigns'][0])
    {

        // verify the required parameter 'SetNegativeSitesToCampaignsRequest' is set
        if ($SetNegativeSitesToCampaignsRequest === null || (is_array($SetNegativeSitesToCampaignsRequest) && count($SetNegativeSitesToCampaignsRequest) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $SetNegativeSitesToCampaignsRequest when calling setNegativeSitesToCampaigns'
            );
        }


        $resourcePath = '/CampaignManagement/v13/NegativeSites/SetToCampaigns';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $multipart = false;

        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        return $this->setupAndSendRequest(
            'POST',
            $resourcePath,
            $headers,
            $headerParams,
            $SetNegativeSitesToCampaignsRequest,
            $formParams,
            $multipart,
            true,
            true,
            false,
            'getHostSettingsForsetNegativeSitesToCampaigns',
            null,
            [],
            $queryParams
        );
    }

    /**
     * Operation setSharedEntityAssociations
     *
     * @param  \Microsoft\MsAds\Rest\Model\CampaignManagementService\SetSharedEntityAssociationsRequest $SetSharedEntityAssociationsRequest SetSharedEntityAssociationsRequest (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['setSharedEntityAssociations'] to see the possible values for this operation
     *
     * @throws \Microsoft\MsAds\Rest\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \Microsoft\MsAds\Rest\Model\CampaignManagementService\SetSharedEntityAssociationsResponse|\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault|\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault|\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault|\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault
     */
    public function setSharedEntityAssociations($SetSharedEntityAssociationsRequest, string $contentType = self::contentTypes['setSharedEntityAssociations'][0])
    {
        list($response) = $this->setSharedEntityAssociationsWithHttpInfo($SetSharedEntityAssociationsRequest, $contentType);
        return $response;
    }

    /**
     * Operation setSharedEntityAssociationsWithHttpInfo
     *
     * @param  \Microsoft\MsAds\Rest\Model\CampaignManagementService\SetSharedEntityAssociationsRequest $SetSharedEntityAssociationsRequest (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['setSharedEntityAssociations'] to see the possible values for this operation
     *
     * @throws \Microsoft\MsAds\Rest\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \Microsoft\MsAds\Rest\Model\CampaignManagementService\SetSharedEntityAssociationsResponse|\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault|\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault|\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault|\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault, HTTP status code, HTTP response headers (array of strings)
     */
    public function setSharedEntityAssociationsWithHttpInfo($SetSharedEntityAssociationsRequest, string $contentType = self::contentTypes['setSharedEntityAssociations'][0])
    {
        $request = $this->setSharedEntityAssociationsRequest($SetSharedEntityAssociationsRequest, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                $response = $e->getResponse();
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            switch($statusCode) {
                case 200:
                    return $this->getResponseContent($request, $response, '\Microsoft\MsAds\Rest\Model\CampaignManagementService\SetSharedEntityAssociationsResponse');
                case 400:
                    return $this->getResponseContent($request, $response, '\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault');
                case 500:
                    return $this->getResponseContent($request, $response, '\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault');
                case 401:
                    return $this->getResponseContent($request, $response, '\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault');
                case 403:
                    return $this->getResponseContent($request, $response, '\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault');
            }

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            $returnType = '\Microsoft\MsAds\Rest\Model\CampaignManagementService\SetSharedEntityAssociationsResponse';
            return $this->getResponseContent($request, $response, $returnType);

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Microsoft\MsAds\Rest\Model\CampaignManagementService\SetSharedEntityAssociationsResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 500:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 403:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation setSharedEntityAssociationsAsync
     *
     * @param  \Microsoft\MsAds\Rest\Model\CampaignManagementService\SetSharedEntityAssociationsRequest $SetSharedEntityAssociationsRequest (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['setSharedEntityAssociations'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function setSharedEntityAssociationsAsync($SetSharedEntityAssociationsRequest, string $contentType = self::contentTypes['setSharedEntityAssociations'][0])
    {
        return $this->setSharedEntityAssociationsAsyncWithHttpInfo($SetSharedEntityAssociationsRequest, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation setSharedEntityAssociationsAsyncWithHttpInfo
     *
     * @param  \Microsoft\MsAds\Rest\Model\CampaignManagementService\SetSharedEntityAssociationsRequest $SetSharedEntityAssociationsRequest (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['setSharedEntityAssociations'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function setSharedEntityAssociationsAsyncWithHttpInfo($SetSharedEntityAssociationsRequest, string $contentType = self::contentTypes['setSharedEntityAssociations'][0])
    {
        $returnType = '\Microsoft\MsAds\Rest\Model\CampaignManagementService\SetSharedEntityAssociationsResponse';
        $request = $this->setSharedEntityAssociationsRequest($SetSharedEntityAssociationsRequest, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return $this->onFulfilledResponse($response, $returnType);
                },
                function ($exception) {
                    $this->onRejectedResponse($exception);
                }
            );
    }

    /**
     * Create request for operation 'setSharedEntityAssociations'
     *
     * @param  \Microsoft\MsAds\Rest\Model\CampaignManagementService\SetSharedEntityAssociationsRequest $SetSharedEntityAssociationsRequest (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['setSharedEntityAssociations'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function setSharedEntityAssociationsRequest($SetSharedEntityAssociationsRequest, string $contentType = self::contentTypes['setSharedEntityAssociations'][0])
    {

        // verify the required parameter 'SetSharedEntityAssociationsRequest' is set
        if ($SetSharedEntityAssociationsRequest === null || (is_array($SetSharedEntityAssociationsRequest) && count($SetSharedEntityAssociationsRequest) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $SetSharedEntityAssociationsRequest when calling setSharedEntityAssociations'
            );
        }


        $resourcePath = '/CampaignManagement/v13/SharedEntityAssociations/Set';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $multipart = false;

        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        return $this->setupAndSendRequest(
            'POST',
            $resourcePath,
            $headers,
            $headerParams,
            $SetSharedEntityAssociationsRequest,
            $formParams,
            $multipart,
            true,
            true,
            false,
            'getHostSettingsForsetSharedEntityAssociations',
            null,
            [],
            $queryParams
        );
    }

    /**
     * Operation updateAdExtensions
     *
     * @param  \Microsoft\MsAds\Rest\Model\CampaignManagementService\UpdateAdExtensionsRequest $UpdateAdExtensionsRequest UpdateAdExtensionsRequest (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['updateAdExtensions'] to see the possible values for this operation
     *
     * @throws \Microsoft\MsAds\Rest\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \Microsoft\MsAds\Rest\Model\CampaignManagementService\UpdateAdExtensionsResponse|\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault|\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault|\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault|\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault
     */
    public function updateAdExtensions($UpdateAdExtensionsRequest, string $contentType = self::contentTypes['updateAdExtensions'][0])
    {
        list($response) = $this->updateAdExtensionsWithHttpInfo($UpdateAdExtensionsRequest, $contentType);
        return $response;
    }

    /**
     * Operation updateAdExtensionsWithHttpInfo
     *
     * @param  \Microsoft\MsAds\Rest\Model\CampaignManagementService\UpdateAdExtensionsRequest $UpdateAdExtensionsRequest (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['updateAdExtensions'] to see the possible values for this operation
     *
     * @throws \Microsoft\MsAds\Rest\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \Microsoft\MsAds\Rest\Model\CampaignManagementService\UpdateAdExtensionsResponse|\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault|\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault|\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault|\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault, HTTP status code, HTTP response headers (array of strings)
     */
    public function updateAdExtensionsWithHttpInfo($UpdateAdExtensionsRequest, string $contentType = self::contentTypes['updateAdExtensions'][0])
    {
        $request = $this->updateAdExtensionsRequest($UpdateAdExtensionsRequest, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                $response = $e->getResponse();
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            switch($statusCode) {
                case 200:
                    return $this->getResponseContent($request, $response, '\Microsoft\MsAds\Rest\Model\CampaignManagementService\UpdateAdExtensionsResponse');
                case 400:
                    return $this->getResponseContent($request, $response, '\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault');
                case 500:
                    return $this->getResponseContent($request, $response, '\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault');
                case 401:
                    return $this->getResponseContent($request, $response, '\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault');
                case 403:
                    return $this->getResponseContent($request, $response, '\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault');
            }

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            $returnType = '\Microsoft\MsAds\Rest\Model\CampaignManagementService\UpdateAdExtensionsResponse';
            return $this->getResponseContent($request, $response, $returnType);

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Microsoft\MsAds\Rest\Model\CampaignManagementService\UpdateAdExtensionsResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 500:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 403:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation updateAdExtensionsAsync
     *
     * @param  \Microsoft\MsAds\Rest\Model\CampaignManagementService\UpdateAdExtensionsRequest $UpdateAdExtensionsRequest (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['updateAdExtensions'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function updateAdExtensionsAsync($UpdateAdExtensionsRequest, string $contentType = self::contentTypes['updateAdExtensions'][0])
    {
        return $this->updateAdExtensionsAsyncWithHttpInfo($UpdateAdExtensionsRequest, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation updateAdExtensionsAsyncWithHttpInfo
     *
     * @param  \Microsoft\MsAds\Rest\Model\CampaignManagementService\UpdateAdExtensionsRequest $UpdateAdExtensionsRequest (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['updateAdExtensions'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function updateAdExtensionsAsyncWithHttpInfo($UpdateAdExtensionsRequest, string $contentType = self::contentTypes['updateAdExtensions'][0])
    {
        $returnType = '\Microsoft\MsAds\Rest\Model\CampaignManagementService\UpdateAdExtensionsResponse';
        $request = $this->updateAdExtensionsRequest($UpdateAdExtensionsRequest, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return $this->onFulfilledResponse($response, $returnType);
                },
                function ($exception) {
                    $this->onRejectedResponse($exception);
                }
            );
    }

    /**
     * Create request for operation 'updateAdExtensions'
     *
     * @param  \Microsoft\MsAds\Rest\Model\CampaignManagementService\UpdateAdExtensionsRequest $UpdateAdExtensionsRequest (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['updateAdExtensions'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function updateAdExtensionsRequest($UpdateAdExtensionsRequest, string $contentType = self::contentTypes['updateAdExtensions'][0])
    {

        // verify the required parameter 'UpdateAdExtensionsRequest' is set
        if ($UpdateAdExtensionsRequest === null || (is_array($UpdateAdExtensionsRequest) && count($UpdateAdExtensionsRequest) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $UpdateAdExtensionsRequest when calling updateAdExtensions'
            );
        }


        $resourcePath = '/CampaignManagement/v13/AdExtensions';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $multipart = false;

        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        return $this->setupAndSendRequest(
            'PUT',
            $resourcePath,
            $headers,
            $headerParams,
            $UpdateAdExtensionsRequest,
            $formParams,
            $multipart,
            true,
            true,
            false,
            'getHostSettingsForupdateAdExtensions',
            null,
            [],
            $queryParams
        );
    }

    /**
     * Operation updateAdGroupCriterions
     *
     * @param  \Microsoft\MsAds\Rest\Model\CampaignManagementService\UpdateAdGroupCriterionsRequest $UpdateAdGroupCriterionsRequest UpdateAdGroupCriterionsRequest (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['updateAdGroupCriterions'] to see the possible values for this operation
     *
     * @throws \Microsoft\MsAds\Rest\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \Microsoft\MsAds\Rest\Model\CampaignManagementService\UpdateAdGroupCriterionsResponse|\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault|\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault|\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault|\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault
     */
    public function updateAdGroupCriterions($UpdateAdGroupCriterionsRequest, string $contentType = self::contentTypes['updateAdGroupCriterions'][0])
    {
        list($response) = $this->updateAdGroupCriterionsWithHttpInfo($UpdateAdGroupCriterionsRequest, $contentType);
        return $response;
    }

    /**
     * Operation updateAdGroupCriterionsWithHttpInfo
     *
     * @param  \Microsoft\MsAds\Rest\Model\CampaignManagementService\UpdateAdGroupCriterionsRequest $UpdateAdGroupCriterionsRequest (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['updateAdGroupCriterions'] to see the possible values for this operation
     *
     * @throws \Microsoft\MsAds\Rest\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \Microsoft\MsAds\Rest\Model\CampaignManagementService\UpdateAdGroupCriterionsResponse|\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault|\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault|\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault|\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault, HTTP status code, HTTP response headers (array of strings)
     */
    public function updateAdGroupCriterionsWithHttpInfo($UpdateAdGroupCriterionsRequest, string $contentType = self::contentTypes['updateAdGroupCriterions'][0])
    {
        $request = $this->updateAdGroupCriterionsRequest($UpdateAdGroupCriterionsRequest, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                $response = $e->getResponse();
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            switch($statusCode) {
                case 200:
                    return $this->getResponseContent($request, $response, '\Microsoft\MsAds\Rest\Model\CampaignManagementService\UpdateAdGroupCriterionsResponse');
                case 400:
                    return $this->getResponseContent($request, $response, '\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault');
                case 500:
                    return $this->getResponseContent($request, $response, '\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault');
                case 401:
                    return $this->getResponseContent($request, $response, '\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault');
                case 403:
                    return $this->getResponseContent($request, $response, '\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault');
            }

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            $returnType = '\Microsoft\MsAds\Rest\Model\CampaignManagementService\UpdateAdGroupCriterionsResponse';
            return $this->getResponseContent($request, $response, $returnType);

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Microsoft\MsAds\Rest\Model\CampaignManagementService\UpdateAdGroupCriterionsResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 500:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 403:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation updateAdGroupCriterionsAsync
     *
     * @param  \Microsoft\MsAds\Rest\Model\CampaignManagementService\UpdateAdGroupCriterionsRequest $UpdateAdGroupCriterionsRequest (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['updateAdGroupCriterions'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function updateAdGroupCriterionsAsync($UpdateAdGroupCriterionsRequest, string $contentType = self::contentTypes['updateAdGroupCriterions'][0])
    {
        return $this->updateAdGroupCriterionsAsyncWithHttpInfo($UpdateAdGroupCriterionsRequest, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation updateAdGroupCriterionsAsyncWithHttpInfo
     *
     * @param  \Microsoft\MsAds\Rest\Model\CampaignManagementService\UpdateAdGroupCriterionsRequest $UpdateAdGroupCriterionsRequest (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['updateAdGroupCriterions'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function updateAdGroupCriterionsAsyncWithHttpInfo($UpdateAdGroupCriterionsRequest, string $contentType = self::contentTypes['updateAdGroupCriterions'][0])
    {
        $returnType = '\Microsoft\MsAds\Rest\Model\CampaignManagementService\UpdateAdGroupCriterionsResponse';
        $request = $this->updateAdGroupCriterionsRequest($UpdateAdGroupCriterionsRequest, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return $this->onFulfilledResponse($response, $returnType);
                },
                function ($exception) {
                    $this->onRejectedResponse($exception);
                }
            );
    }

    /**
     * Create request for operation 'updateAdGroupCriterions'
     *
     * @param  \Microsoft\MsAds\Rest\Model\CampaignManagementService\UpdateAdGroupCriterionsRequest $UpdateAdGroupCriterionsRequest (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['updateAdGroupCriterions'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function updateAdGroupCriterionsRequest($UpdateAdGroupCriterionsRequest, string $contentType = self::contentTypes['updateAdGroupCriterions'][0])
    {

        // verify the required parameter 'UpdateAdGroupCriterionsRequest' is set
        if ($UpdateAdGroupCriterionsRequest === null || (is_array($UpdateAdGroupCriterionsRequest) && count($UpdateAdGroupCriterionsRequest) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $UpdateAdGroupCriterionsRequest when calling updateAdGroupCriterions'
            );
        }


        $resourcePath = '/CampaignManagement/v13/AdGroupCriterions';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $multipart = false;

        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        return $this->setupAndSendRequest(
            'PUT',
            $resourcePath,
            $headers,
            $headerParams,
            $UpdateAdGroupCriterionsRequest,
            $formParams,
            $multipart,
            true,
            true,
            false,
            'getHostSettingsForupdateAdGroupCriterions',
            null,
            [],
            $queryParams
        );
    }

    /**
     * Operation updateAdGroups
     *
     * @param  \Microsoft\MsAds\Rest\Model\CampaignManagementService\UpdateAdGroupsRequest $UpdateAdGroupsRequest UpdateAdGroupsRequest (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['updateAdGroups'] to see the possible values for this operation
     *
     * @throws \Microsoft\MsAds\Rest\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \Microsoft\MsAds\Rest\Model\CampaignManagementService\UpdateAdGroupsResponse|\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault|\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault|\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault|\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault
     */
    public function updateAdGroups($UpdateAdGroupsRequest, string $contentType = self::contentTypes['updateAdGroups'][0])
    {
        list($response) = $this->updateAdGroupsWithHttpInfo($UpdateAdGroupsRequest, $contentType);
        return $response;
    }

    /**
     * Operation updateAdGroupsWithHttpInfo
     *
     * @param  \Microsoft\MsAds\Rest\Model\CampaignManagementService\UpdateAdGroupsRequest $UpdateAdGroupsRequest (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['updateAdGroups'] to see the possible values for this operation
     *
     * @throws \Microsoft\MsAds\Rest\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \Microsoft\MsAds\Rest\Model\CampaignManagementService\UpdateAdGroupsResponse|\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault|\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault|\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault|\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault, HTTP status code, HTTP response headers (array of strings)
     */
    public function updateAdGroupsWithHttpInfo($UpdateAdGroupsRequest, string $contentType = self::contentTypes['updateAdGroups'][0])
    {
        $request = $this->updateAdGroupsRequest($UpdateAdGroupsRequest, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                $response = $e->getResponse();
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            switch($statusCode) {
                case 200:
                    return $this->getResponseContent($request, $response, '\Microsoft\MsAds\Rest\Model\CampaignManagementService\UpdateAdGroupsResponse');
                case 400:
                    return $this->getResponseContent($request, $response, '\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault');
                case 500:
                    return $this->getResponseContent($request, $response, '\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault');
                case 401:
                    return $this->getResponseContent($request, $response, '\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault');
                case 403:
                    return $this->getResponseContent($request, $response, '\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault');
            }

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            $returnType = '\Microsoft\MsAds\Rest\Model\CampaignManagementService\UpdateAdGroupsResponse';
            return $this->getResponseContent($request, $response, $returnType);

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Microsoft\MsAds\Rest\Model\CampaignManagementService\UpdateAdGroupsResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 500:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 403:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation updateAdGroupsAsync
     *
     * @param  \Microsoft\MsAds\Rest\Model\CampaignManagementService\UpdateAdGroupsRequest $UpdateAdGroupsRequest (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['updateAdGroups'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function updateAdGroupsAsync($UpdateAdGroupsRequest, string $contentType = self::contentTypes['updateAdGroups'][0])
    {
        return $this->updateAdGroupsAsyncWithHttpInfo($UpdateAdGroupsRequest, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation updateAdGroupsAsyncWithHttpInfo
     *
     * @param  \Microsoft\MsAds\Rest\Model\CampaignManagementService\UpdateAdGroupsRequest $UpdateAdGroupsRequest (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['updateAdGroups'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function updateAdGroupsAsyncWithHttpInfo($UpdateAdGroupsRequest, string $contentType = self::contentTypes['updateAdGroups'][0])
    {
        $returnType = '\Microsoft\MsAds\Rest\Model\CampaignManagementService\UpdateAdGroupsResponse';
        $request = $this->updateAdGroupsRequest($UpdateAdGroupsRequest, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return $this->onFulfilledResponse($response, $returnType);
                },
                function ($exception) {
                    $this->onRejectedResponse($exception);
                }
            );
    }

    /**
     * Create request for operation 'updateAdGroups'
     *
     * @param  \Microsoft\MsAds\Rest\Model\CampaignManagementService\UpdateAdGroupsRequest $UpdateAdGroupsRequest (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['updateAdGroups'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function updateAdGroupsRequest($UpdateAdGroupsRequest, string $contentType = self::contentTypes['updateAdGroups'][0])
    {

        // verify the required parameter 'UpdateAdGroupsRequest' is set
        if ($UpdateAdGroupsRequest === null || (is_array($UpdateAdGroupsRequest) && count($UpdateAdGroupsRequest) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $UpdateAdGroupsRequest when calling updateAdGroups'
            );
        }


        $resourcePath = '/CampaignManagement/v13/AdGroups';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $multipart = false;

        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        return $this->setupAndSendRequest(
            'PUT',
            $resourcePath,
            $headers,
            $headerParams,
            $UpdateAdGroupsRequest,
            $formParams,
            $multipart,
            true,
            true,
            false,
            'getHostSettingsForupdateAdGroups',
            null,
            [],
            $queryParams
        );
    }

    /**
     * Operation updateAds
     *
     * @param  \Microsoft\MsAds\Rest\Model\CampaignManagementService\UpdateAdsRequest $UpdateAdsRequest UpdateAdsRequest (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['updateAds'] to see the possible values for this operation
     *
     * @throws \Microsoft\MsAds\Rest\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \Microsoft\MsAds\Rest\Model\CampaignManagementService\UpdateAdsResponse|\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault|\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault|\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault|\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault
     */
    public function updateAds($UpdateAdsRequest, string $contentType = self::contentTypes['updateAds'][0])
    {
        list($response) = $this->updateAdsWithHttpInfo($UpdateAdsRequest, $contentType);
        return $response;
    }

    /**
     * Operation updateAdsWithHttpInfo
     *
     * @param  \Microsoft\MsAds\Rest\Model\CampaignManagementService\UpdateAdsRequest $UpdateAdsRequest (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['updateAds'] to see the possible values for this operation
     *
     * @throws \Microsoft\MsAds\Rest\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \Microsoft\MsAds\Rest\Model\CampaignManagementService\UpdateAdsResponse|\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault|\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault|\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault|\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault, HTTP status code, HTTP response headers (array of strings)
     */
    public function updateAdsWithHttpInfo($UpdateAdsRequest, string $contentType = self::contentTypes['updateAds'][0])
    {
        $request = $this->updateAdsRequest($UpdateAdsRequest, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                $response = $e->getResponse();
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            switch($statusCode) {
                case 200:
                    return $this->getResponseContent($request, $response, '\Microsoft\MsAds\Rest\Model\CampaignManagementService\UpdateAdsResponse');
                case 400:
                    return $this->getResponseContent($request, $response, '\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault');
                case 500:
                    return $this->getResponseContent($request, $response, '\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault');
                case 401:
                    return $this->getResponseContent($request, $response, '\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault');
                case 403:
                    return $this->getResponseContent($request, $response, '\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault');
            }

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            $returnType = '\Microsoft\MsAds\Rest\Model\CampaignManagementService\UpdateAdsResponse';
            return $this->getResponseContent($request, $response, $returnType);

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Microsoft\MsAds\Rest\Model\CampaignManagementService\UpdateAdsResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 500:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 403:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation updateAdsAsync
     *
     * @param  \Microsoft\MsAds\Rest\Model\CampaignManagementService\UpdateAdsRequest $UpdateAdsRequest (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['updateAds'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function updateAdsAsync($UpdateAdsRequest, string $contentType = self::contentTypes['updateAds'][0])
    {
        return $this->updateAdsAsyncWithHttpInfo($UpdateAdsRequest, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation updateAdsAsyncWithHttpInfo
     *
     * @param  \Microsoft\MsAds\Rest\Model\CampaignManagementService\UpdateAdsRequest $UpdateAdsRequest (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['updateAds'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function updateAdsAsyncWithHttpInfo($UpdateAdsRequest, string $contentType = self::contentTypes['updateAds'][0])
    {
        $returnType = '\Microsoft\MsAds\Rest\Model\CampaignManagementService\UpdateAdsResponse';
        $request = $this->updateAdsRequest($UpdateAdsRequest, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return $this->onFulfilledResponse($response, $returnType);
                },
                function ($exception) {
                    $this->onRejectedResponse($exception);
                }
            );
    }

    /**
     * Create request for operation 'updateAds'
     *
     * @param  \Microsoft\MsAds\Rest\Model\CampaignManagementService\UpdateAdsRequest $UpdateAdsRequest (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['updateAds'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function updateAdsRequest($UpdateAdsRequest, string $contentType = self::contentTypes['updateAds'][0])
    {

        // verify the required parameter 'UpdateAdsRequest' is set
        if ($UpdateAdsRequest === null || (is_array($UpdateAdsRequest) && count($UpdateAdsRequest) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $UpdateAdsRequest when calling updateAds'
            );
        }


        $resourcePath = '/CampaignManagement/v13/Ads';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $multipart = false;

        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        return $this->setupAndSendRequest(
            'PUT',
            $resourcePath,
            $headers,
            $headerParams,
            $UpdateAdsRequest,
            $formParams,
            $multipart,
            true,
            true,
            false,
            'getHostSettingsForupdateAds',
            null,
            [],
            $queryParams
        );
    }

    /**
     * Operation updateAssetGroups
     *
     * @param  \Microsoft\MsAds\Rest\Model\CampaignManagementService\UpdateAssetGroupsRequest $UpdateAssetGroupsRequest UpdateAssetGroupsRequest (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['updateAssetGroups'] to see the possible values for this operation
     *
     * @throws \Microsoft\MsAds\Rest\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \Microsoft\MsAds\Rest\Model\CampaignManagementService\UpdateAssetGroupsResponse|\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault|\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault|\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault|\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault
     */
    public function updateAssetGroups($UpdateAssetGroupsRequest, string $contentType = self::contentTypes['updateAssetGroups'][0])
    {
        list($response) = $this->updateAssetGroupsWithHttpInfo($UpdateAssetGroupsRequest, $contentType);
        return $response;
    }

    /**
     * Operation updateAssetGroupsWithHttpInfo
     *
     * @param  \Microsoft\MsAds\Rest\Model\CampaignManagementService\UpdateAssetGroupsRequest $UpdateAssetGroupsRequest (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['updateAssetGroups'] to see the possible values for this operation
     *
     * @throws \Microsoft\MsAds\Rest\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \Microsoft\MsAds\Rest\Model\CampaignManagementService\UpdateAssetGroupsResponse|\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault|\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault|\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault|\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault, HTTP status code, HTTP response headers (array of strings)
     */
    public function updateAssetGroupsWithHttpInfo($UpdateAssetGroupsRequest, string $contentType = self::contentTypes['updateAssetGroups'][0])
    {
        $request = $this->updateAssetGroupsRequest($UpdateAssetGroupsRequest, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                $response = $e->getResponse();
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            switch($statusCode) {
                case 200:
                    return $this->getResponseContent($request, $response, '\Microsoft\MsAds\Rest\Model\CampaignManagementService\UpdateAssetGroupsResponse');
                case 400:
                    return $this->getResponseContent($request, $response, '\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault');
                case 500:
                    return $this->getResponseContent($request, $response, '\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault');
                case 401:
                    return $this->getResponseContent($request, $response, '\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault');
                case 403:
                    return $this->getResponseContent($request, $response, '\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault');
            }

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            $returnType = '\Microsoft\MsAds\Rest\Model\CampaignManagementService\UpdateAssetGroupsResponse';
            return $this->getResponseContent($request, $response, $returnType);

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Microsoft\MsAds\Rest\Model\CampaignManagementService\UpdateAssetGroupsResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 500:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 403:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation updateAssetGroupsAsync
     *
     * @param  \Microsoft\MsAds\Rest\Model\CampaignManagementService\UpdateAssetGroupsRequest $UpdateAssetGroupsRequest (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['updateAssetGroups'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function updateAssetGroupsAsync($UpdateAssetGroupsRequest, string $contentType = self::contentTypes['updateAssetGroups'][0])
    {
        return $this->updateAssetGroupsAsyncWithHttpInfo($UpdateAssetGroupsRequest, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation updateAssetGroupsAsyncWithHttpInfo
     *
     * @param  \Microsoft\MsAds\Rest\Model\CampaignManagementService\UpdateAssetGroupsRequest $UpdateAssetGroupsRequest (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['updateAssetGroups'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function updateAssetGroupsAsyncWithHttpInfo($UpdateAssetGroupsRequest, string $contentType = self::contentTypes['updateAssetGroups'][0])
    {
        $returnType = '\Microsoft\MsAds\Rest\Model\CampaignManagementService\UpdateAssetGroupsResponse';
        $request = $this->updateAssetGroupsRequest($UpdateAssetGroupsRequest, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return $this->onFulfilledResponse($response, $returnType);
                },
                function ($exception) {
                    $this->onRejectedResponse($exception);
                }
            );
    }

    /**
     * Create request for operation 'updateAssetGroups'
     *
     * @param  \Microsoft\MsAds\Rest\Model\CampaignManagementService\UpdateAssetGroupsRequest $UpdateAssetGroupsRequest (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['updateAssetGroups'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function updateAssetGroupsRequest($UpdateAssetGroupsRequest, string $contentType = self::contentTypes['updateAssetGroups'][0])
    {

        // verify the required parameter 'UpdateAssetGroupsRequest' is set
        if ($UpdateAssetGroupsRequest === null || (is_array($UpdateAssetGroupsRequest) && count($UpdateAssetGroupsRequest) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $UpdateAssetGroupsRequest when calling updateAssetGroups'
            );
        }


        $resourcePath = '/CampaignManagement/v13/AssetGroups';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $multipart = false;

        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        return $this->setupAndSendRequest(
            'PUT',
            $resourcePath,
            $headers,
            $headerParams,
            $UpdateAssetGroupsRequest,
            $formParams,
            $multipart,
            true,
            true,
            false,
            'getHostSettingsForupdateAssetGroups',
            null,
            [],
            $queryParams
        );
    }

    /**
     * Operation updateAudienceGroups
     *
     * @param  \Microsoft\MsAds\Rest\Model\CampaignManagementService\UpdateAudienceGroupsRequest $UpdateAudienceGroupsRequest UpdateAudienceGroupsRequest (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['updateAudienceGroups'] to see the possible values for this operation
     *
     * @throws \Microsoft\MsAds\Rest\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \Microsoft\MsAds\Rest\Model\CampaignManagementService\UpdateAudienceGroupsResponse|\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault|\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault|\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault|\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault
     */
    public function updateAudienceGroups($UpdateAudienceGroupsRequest, string $contentType = self::contentTypes['updateAudienceGroups'][0])
    {
        list($response) = $this->updateAudienceGroupsWithHttpInfo($UpdateAudienceGroupsRequest, $contentType);
        return $response;
    }

    /**
     * Operation updateAudienceGroupsWithHttpInfo
     *
     * @param  \Microsoft\MsAds\Rest\Model\CampaignManagementService\UpdateAudienceGroupsRequest $UpdateAudienceGroupsRequest (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['updateAudienceGroups'] to see the possible values for this operation
     *
     * @throws \Microsoft\MsAds\Rest\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \Microsoft\MsAds\Rest\Model\CampaignManagementService\UpdateAudienceGroupsResponse|\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault|\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault|\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault|\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault, HTTP status code, HTTP response headers (array of strings)
     */
    public function updateAudienceGroupsWithHttpInfo($UpdateAudienceGroupsRequest, string $contentType = self::contentTypes['updateAudienceGroups'][0])
    {
        $request = $this->updateAudienceGroupsRequest($UpdateAudienceGroupsRequest, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                $response = $e->getResponse();
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            switch($statusCode) {
                case 200:
                    return $this->getResponseContent($request, $response, '\Microsoft\MsAds\Rest\Model\CampaignManagementService\UpdateAudienceGroupsResponse');
                case 400:
                    return $this->getResponseContent($request, $response, '\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault');
                case 500:
                    return $this->getResponseContent($request, $response, '\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault');
                case 401:
                    return $this->getResponseContent($request, $response, '\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault');
                case 403:
                    return $this->getResponseContent($request, $response, '\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault');
            }

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            $returnType = '\Microsoft\MsAds\Rest\Model\CampaignManagementService\UpdateAudienceGroupsResponse';
            return $this->getResponseContent($request, $response, $returnType);

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Microsoft\MsAds\Rest\Model\CampaignManagementService\UpdateAudienceGroupsResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 500:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 403:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation updateAudienceGroupsAsync
     *
     * @param  \Microsoft\MsAds\Rest\Model\CampaignManagementService\UpdateAudienceGroupsRequest $UpdateAudienceGroupsRequest (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['updateAudienceGroups'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function updateAudienceGroupsAsync($UpdateAudienceGroupsRequest, string $contentType = self::contentTypes['updateAudienceGroups'][0])
    {
        return $this->updateAudienceGroupsAsyncWithHttpInfo($UpdateAudienceGroupsRequest, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation updateAudienceGroupsAsyncWithHttpInfo
     *
     * @param  \Microsoft\MsAds\Rest\Model\CampaignManagementService\UpdateAudienceGroupsRequest $UpdateAudienceGroupsRequest (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['updateAudienceGroups'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function updateAudienceGroupsAsyncWithHttpInfo($UpdateAudienceGroupsRequest, string $contentType = self::contentTypes['updateAudienceGroups'][0])
    {
        $returnType = '\Microsoft\MsAds\Rest\Model\CampaignManagementService\UpdateAudienceGroupsResponse';
        $request = $this->updateAudienceGroupsRequest($UpdateAudienceGroupsRequest, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return $this->onFulfilledResponse($response, $returnType);
                },
                function ($exception) {
                    $this->onRejectedResponse($exception);
                }
            );
    }

    /**
     * Create request for operation 'updateAudienceGroups'
     *
     * @param  \Microsoft\MsAds\Rest\Model\CampaignManagementService\UpdateAudienceGroupsRequest $UpdateAudienceGroupsRequest (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['updateAudienceGroups'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function updateAudienceGroupsRequest($UpdateAudienceGroupsRequest, string $contentType = self::contentTypes['updateAudienceGroups'][0])
    {

        // verify the required parameter 'UpdateAudienceGroupsRequest' is set
        if ($UpdateAudienceGroupsRequest === null || (is_array($UpdateAudienceGroupsRequest) && count($UpdateAudienceGroupsRequest) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $UpdateAudienceGroupsRequest when calling updateAudienceGroups'
            );
        }


        $resourcePath = '/CampaignManagement/v13/AudienceGroups';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $multipart = false;

        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        return $this->setupAndSendRequest(
            'PUT',
            $resourcePath,
            $headers,
            $headerParams,
            $UpdateAudienceGroupsRequest,
            $formParams,
            $multipart,
            true,
            true,
            false,
            'getHostSettingsForupdateAudienceGroups',
            null,
            [],
            $queryParams
        );
    }

    /**
     * Operation updateAudiences
     *
     * @param  \Microsoft\MsAds\Rest\Model\CampaignManagementService\UpdateAudiencesRequest $UpdateAudiencesRequest UpdateAudiencesRequest (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['updateAudiences'] to see the possible values for this operation
     *
     * @throws \Microsoft\MsAds\Rest\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \Microsoft\MsAds\Rest\Model\CampaignManagementService\UpdateAudiencesResponse|\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault|\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault|\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault|\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault
     */
    public function updateAudiences($UpdateAudiencesRequest, string $contentType = self::contentTypes['updateAudiences'][0])
    {
        list($response) = $this->updateAudiencesWithHttpInfo($UpdateAudiencesRequest, $contentType);
        return $response;
    }

    /**
     * Operation updateAudiencesWithHttpInfo
     *
     * @param  \Microsoft\MsAds\Rest\Model\CampaignManagementService\UpdateAudiencesRequest $UpdateAudiencesRequest (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['updateAudiences'] to see the possible values for this operation
     *
     * @throws \Microsoft\MsAds\Rest\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \Microsoft\MsAds\Rest\Model\CampaignManagementService\UpdateAudiencesResponse|\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault|\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault|\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault|\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault, HTTP status code, HTTP response headers (array of strings)
     */
    public function updateAudiencesWithHttpInfo($UpdateAudiencesRequest, string $contentType = self::contentTypes['updateAudiences'][0])
    {
        $request = $this->updateAudiencesRequest($UpdateAudiencesRequest, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                $response = $e->getResponse();
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            switch($statusCode) {
                case 200:
                    return $this->getResponseContent($request, $response, '\Microsoft\MsAds\Rest\Model\CampaignManagementService\UpdateAudiencesResponse');
                case 400:
                    return $this->getResponseContent($request, $response, '\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault');
                case 500:
                    return $this->getResponseContent($request, $response, '\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault');
                case 401:
                    return $this->getResponseContent($request, $response, '\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault');
                case 403:
                    return $this->getResponseContent($request, $response, '\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault');
            }

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            $returnType = '\Microsoft\MsAds\Rest\Model\CampaignManagementService\UpdateAudiencesResponse';
            return $this->getResponseContent($request, $response, $returnType);

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Microsoft\MsAds\Rest\Model\CampaignManagementService\UpdateAudiencesResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 500:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 403:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation updateAudiencesAsync
     *
     * @param  \Microsoft\MsAds\Rest\Model\CampaignManagementService\UpdateAudiencesRequest $UpdateAudiencesRequest (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['updateAudiences'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function updateAudiencesAsync($UpdateAudiencesRequest, string $contentType = self::contentTypes['updateAudiences'][0])
    {
        return $this->updateAudiencesAsyncWithHttpInfo($UpdateAudiencesRequest, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation updateAudiencesAsyncWithHttpInfo
     *
     * @param  \Microsoft\MsAds\Rest\Model\CampaignManagementService\UpdateAudiencesRequest $UpdateAudiencesRequest (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['updateAudiences'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function updateAudiencesAsyncWithHttpInfo($UpdateAudiencesRequest, string $contentType = self::contentTypes['updateAudiences'][0])
    {
        $returnType = '\Microsoft\MsAds\Rest\Model\CampaignManagementService\UpdateAudiencesResponse';
        $request = $this->updateAudiencesRequest($UpdateAudiencesRequest, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return $this->onFulfilledResponse($response, $returnType);
                },
                function ($exception) {
                    $this->onRejectedResponse($exception);
                }
            );
    }

    /**
     * Create request for operation 'updateAudiences'
     *
     * @param  \Microsoft\MsAds\Rest\Model\CampaignManagementService\UpdateAudiencesRequest $UpdateAudiencesRequest (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['updateAudiences'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function updateAudiencesRequest($UpdateAudiencesRequest, string $contentType = self::contentTypes['updateAudiences'][0])
    {

        // verify the required parameter 'UpdateAudiencesRequest' is set
        if ($UpdateAudiencesRequest === null || (is_array($UpdateAudiencesRequest) && count($UpdateAudiencesRequest) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $UpdateAudiencesRequest when calling updateAudiences'
            );
        }


        $resourcePath = '/CampaignManagement/v13/Audiences';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $multipart = false;

        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        return $this->setupAndSendRequest(
            'PUT',
            $resourcePath,
            $headers,
            $headerParams,
            $UpdateAudiencesRequest,
            $formParams,
            $multipart,
            true,
            true,
            false,
            'getHostSettingsForupdateAudiences',
            null,
            [],
            $queryParams
        );
    }

    /**
     * Operation updateBidStrategies
     *
     * @param  \Microsoft\MsAds\Rest\Model\CampaignManagementService\UpdateBidStrategiesRequest $UpdateBidStrategiesRequest UpdateBidStrategiesRequest (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['updateBidStrategies'] to see the possible values for this operation
     *
     * @throws \Microsoft\MsAds\Rest\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \Microsoft\MsAds\Rest\Model\CampaignManagementService\UpdateBidStrategiesResponse|\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault|\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault|\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault|\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault
     */
    public function updateBidStrategies($UpdateBidStrategiesRequest, string $contentType = self::contentTypes['updateBidStrategies'][0])
    {
        list($response) = $this->updateBidStrategiesWithHttpInfo($UpdateBidStrategiesRequest, $contentType);
        return $response;
    }

    /**
     * Operation updateBidStrategiesWithHttpInfo
     *
     * @param  \Microsoft\MsAds\Rest\Model\CampaignManagementService\UpdateBidStrategiesRequest $UpdateBidStrategiesRequest (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['updateBidStrategies'] to see the possible values for this operation
     *
     * @throws \Microsoft\MsAds\Rest\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \Microsoft\MsAds\Rest\Model\CampaignManagementService\UpdateBidStrategiesResponse|\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault|\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault|\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault|\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault, HTTP status code, HTTP response headers (array of strings)
     */
    public function updateBidStrategiesWithHttpInfo($UpdateBidStrategiesRequest, string $contentType = self::contentTypes['updateBidStrategies'][0])
    {
        $request = $this->updateBidStrategiesRequest($UpdateBidStrategiesRequest, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                $response = $e->getResponse();
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            switch($statusCode) {
                case 200:
                    return $this->getResponseContent($request, $response, '\Microsoft\MsAds\Rest\Model\CampaignManagementService\UpdateBidStrategiesResponse');
                case 400:
                    return $this->getResponseContent($request, $response, '\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault');
                case 500:
                    return $this->getResponseContent($request, $response, '\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault');
                case 401:
                    return $this->getResponseContent($request, $response, '\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault');
                case 403:
                    return $this->getResponseContent($request, $response, '\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault');
            }

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            $returnType = '\Microsoft\MsAds\Rest\Model\CampaignManagementService\UpdateBidStrategiesResponse';
            return $this->getResponseContent($request, $response, $returnType);

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Microsoft\MsAds\Rest\Model\CampaignManagementService\UpdateBidStrategiesResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 500:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 403:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation updateBidStrategiesAsync
     *
     * @param  \Microsoft\MsAds\Rest\Model\CampaignManagementService\UpdateBidStrategiesRequest $UpdateBidStrategiesRequest (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['updateBidStrategies'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function updateBidStrategiesAsync($UpdateBidStrategiesRequest, string $contentType = self::contentTypes['updateBidStrategies'][0])
    {
        return $this->updateBidStrategiesAsyncWithHttpInfo($UpdateBidStrategiesRequest, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation updateBidStrategiesAsyncWithHttpInfo
     *
     * @param  \Microsoft\MsAds\Rest\Model\CampaignManagementService\UpdateBidStrategiesRequest $UpdateBidStrategiesRequest (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['updateBidStrategies'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function updateBidStrategiesAsyncWithHttpInfo($UpdateBidStrategiesRequest, string $contentType = self::contentTypes['updateBidStrategies'][0])
    {
        $returnType = '\Microsoft\MsAds\Rest\Model\CampaignManagementService\UpdateBidStrategiesResponse';
        $request = $this->updateBidStrategiesRequest($UpdateBidStrategiesRequest, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return $this->onFulfilledResponse($response, $returnType);
                },
                function ($exception) {
                    $this->onRejectedResponse($exception);
                }
            );
    }

    /**
     * Create request for operation 'updateBidStrategies'
     *
     * @param  \Microsoft\MsAds\Rest\Model\CampaignManagementService\UpdateBidStrategiesRequest $UpdateBidStrategiesRequest (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['updateBidStrategies'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function updateBidStrategiesRequest($UpdateBidStrategiesRequest, string $contentType = self::contentTypes['updateBidStrategies'][0])
    {

        // verify the required parameter 'UpdateBidStrategiesRequest' is set
        if ($UpdateBidStrategiesRequest === null || (is_array($UpdateBidStrategiesRequest) && count($UpdateBidStrategiesRequest) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $UpdateBidStrategiesRequest when calling updateBidStrategies'
            );
        }


        $resourcePath = '/CampaignManagement/v13/BidStrategies';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $multipart = false;

        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        return $this->setupAndSendRequest(
            'PUT',
            $resourcePath,
            $headers,
            $headerParams,
            $UpdateBidStrategiesRequest,
            $formParams,
            $multipart,
            true,
            true,
            false,
            'getHostSettingsForupdateBidStrategies',
            null,
            [],
            $queryParams
        );
    }

    /**
     * Operation updateBrandKits
     *
     * @param  \Microsoft\MsAds\Rest\Model\CampaignManagementService\UpdateBrandKitsRequest $UpdateBrandKitsRequest UpdateBrandKitsRequest (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['updateBrandKits'] to see the possible values for this operation
     *
     * @throws \Microsoft\MsAds\Rest\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \Microsoft\MsAds\Rest\Model\CampaignManagementService\UpdateBrandKitsResponse|\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault|\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault|\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault|\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault
     */
    public function updateBrandKits($UpdateBrandKitsRequest, string $contentType = self::contentTypes['updateBrandKits'][0])
    {
        list($response) = $this->updateBrandKitsWithHttpInfo($UpdateBrandKitsRequest, $contentType);
        return $response;
    }

    /**
     * Operation updateBrandKitsWithHttpInfo
     *
     * @param  \Microsoft\MsAds\Rest\Model\CampaignManagementService\UpdateBrandKitsRequest $UpdateBrandKitsRequest (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['updateBrandKits'] to see the possible values for this operation
     *
     * @throws \Microsoft\MsAds\Rest\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \Microsoft\MsAds\Rest\Model\CampaignManagementService\UpdateBrandKitsResponse|\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault|\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault|\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault|\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault, HTTP status code, HTTP response headers (array of strings)
     */
    public function updateBrandKitsWithHttpInfo($UpdateBrandKitsRequest, string $contentType = self::contentTypes['updateBrandKits'][0])
    {
        $request = $this->updateBrandKitsRequest($UpdateBrandKitsRequest, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                $response = $e->getResponse();
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            switch($statusCode) {
                case 200:
                    return $this->getResponseContent($request, $response, '\Microsoft\MsAds\Rest\Model\CampaignManagementService\UpdateBrandKitsResponse');
                case 400:
                    return $this->getResponseContent($request, $response, '\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault');
                case 500:
                    return $this->getResponseContent($request, $response, '\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault');
                case 401:
                    return $this->getResponseContent($request, $response, '\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault');
                case 403:
                    return $this->getResponseContent($request, $response, '\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault');
            }

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            $returnType = '\Microsoft\MsAds\Rest\Model\CampaignManagementService\UpdateBrandKitsResponse';
            return $this->getResponseContent($request, $response, $returnType);

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Microsoft\MsAds\Rest\Model\CampaignManagementService\UpdateBrandKitsResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 500:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 403:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation updateBrandKitsAsync
     *
     * @param  \Microsoft\MsAds\Rest\Model\CampaignManagementService\UpdateBrandKitsRequest $UpdateBrandKitsRequest (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['updateBrandKits'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function updateBrandKitsAsync($UpdateBrandKitsRequest, string $contentType = self::contentTypes['updateBrandKits'][0])
    {
        return $this->updateBrandKitsAsyncWithHttpInfo($UpdateBrandKitsRequest, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation updateBrandKitsAsyncWithHttpInfo
     *
     * @param  \Microsoft\MsAds\Rest\Model\CampaignManagementService\UpdateBrandKitsRequest $UpdateBrandKitsRequest (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['updateBrandKits'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function updateBrandKitsAsyncWithHttpInfo($UpdateBrandKitsRequest, string $contentType = self::contentTypes['updateBrandKits'][0])
    {
        $returnType = '\Microsoft\MsAds\Rest\Model\CampaignManagementService\UpdateBrandKitsResponse';
        $request = $this->updateBrandKitsRequest($UpdateBrandKitsRequest, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return $this->onFulfilledResponse($response, $returnType);
                },
                function ($exception) {
                    $this->onRejectedResponse($exception);
                }
            );
    }

    /**
     * Create request for operation 'updateBrandKits'
     *
     * @param  \Microsoft\MsAds\Rest\Model\CampaignManagementService\UpdateBrandKitsRequest $UpdateBrandKitsRequest (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['updateBrandKits'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function updateBrandKitsRequest($UpdateBrandKitsRequest, string $contentType = self::contentTypes['updateBrandKits'][0])
    {

        // verify the required parameter 'UpdateBrandKitsRequest' is set
        if ($UpdateBrandKitsRequest === null || (is_array($UpdateBrandKitsRequest) && count($UpdateBrandKitsRequest) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $UpdateBrandKitsRequest when calling updateBrandKits'
            );
        }


        $resourcePath = '/CampaignManagement/v13/BrandKits';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $multipart = false;

        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        return $this->setupAndSendRequest(
            'PUT',
            $resourcePath,
            $headers,
            $headerParams,
            $UpdateBrandKitsRequest,
            $formParams,
            $multipart,
            true,
            true,
            false,
            'getHostSettingsForupdateBrandKits',
            null,
            [],
            $queryParams
        );
    }

    /**
     * Operation updateBudgets
     *
     * @param  \Microsoft\MsAds\Rest\Model\CampaignManagementService\UpdateBudgetsRequest $UpdateBudgetsRequest UpdateBudgetsRequest (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['updateBudgets'] to see the possible values for this operation
     *
     * @throws \Microsoft\MsAds\Rest\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \Microsoft\MsAds\Rest\Model\CampaignManagementService\UpdateBudgetsResponse|\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault|\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault|\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault|\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault
     */
    public function updateBudgets($UpdateBudgetsRequest, string $contentType = self::contentTypes['updateBudgets'][0])
    {
        list($response) = $this->updateBudgetsWithHttpInfo($UpdateBudgetsRequest, $contentType);
        return $response;
    }

    /**
     * Operation updateBudgetsWithHttpInfo
     *
     * @param  \Microsoft\MsAds\Rest\Model\CampaignManagementService\UpdateBudgetsRequest $UpdateBudgetsRequest (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['updateBudgets'] to see the possible values for this operation
     *
     * @throws \Microsoft\MsAds\Rest\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \Microsoft\MsAds\Rest\Model\CampaignManagementService\UpdateBudgetsResponse|\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault|\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault|\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault|\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault, HTTP status code, HTTP response headers (array of strings)
     */
    public function updateBudgetsWithHttpInfo($UpdateBudgetsRequest, string $contentType = self::contentTypes['updateBudgets'][0])
    {
        $request = $this->updateBudgetsRequest($UpdateBudgetsRequest, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                $response = $e->getResponse();
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            switch($statusCode) {
                case 200:
                    return $this->getResponseContent($request, $response, '\Microsoft\MsAds\Rest\Model\CampaignManagementService\UpdateBudgetsResponse');
                case 400:
                    return $this->getResponseContent($request, $response, '\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault');
                case 500:
                    return $this->getResponseContent($request, $response, '\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault');
                case 401:
                    return $this->getResponseContent($request, $response, '\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault');
                case 403:
                    return $this->getResponseContent($request, $response, '\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault');
            }

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            $returnType = '\Microsoft\MsAds\Rest\Model\CampaignManagementService\UpdateBudgetsResponse';
            return $this->getResponseContent($request, $response, $returnType);

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Microsoft\MsAds\Rest\Model\CampaignManagementService\UpdateBudgetsResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 500:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 403:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation updateBudgetsAsync
     *
     * @param  \Microsoft\MsAds\Rest\Model\CampaignManagementService\UpdateBudgetsRequest $UpdateBudgetsRequest (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['updateBudgets'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function updateBudgetsAsync($UpdateBudgetsRequest, string $contentType = self::contentTypes['updateBudgets'][0])
    {
        return $this->updateBudgetsAsyncWithHttpInfo($UpdateBudgetsRequest, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation updateBudgetsAsyncWithHttpInfo
     *
     * @param  \Microsoft\MsAds\Rest\Model\CampaignManagementService\UpdateBudgetsRequest $UpdateBudgetsRequest (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['updateBudgets'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function updateBudgetsAsyncWithHttpInfo($UpdateBudgetsRequest, string $contentType = self::contentTypes['updateBudgets'][0])
    {
        $returnType = '\Microsoft\MsAds\Rest\Model\CampaignManagementService\UpdateBudgetsResponse';
        $request = $this->updateBudgetsRequest($UpdateBudgetsRequest, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return $this->onFulfilledResponse($response, $returnType);
                },
                function ($exception) {
                    $this->onRejectedResponse($exception);
                }
            );
    }

    /**
     * Create request for operation 'updateBudgets'
     *
     * @param  \Microsoft\MsAds\Rest\Model\CampaignManagementService\UpdateBudgetsRequest $UpdateBudgetsRequest (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['updateBudgets'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function updateBudgetsRequest($UpdateBudgetsRequest, string $contentType = self::contentTypes['updateBudgets'][0])
    {

        // verify the required parameter 'UpdateBudgetsRequest' is set
        if ($UpdateBudgetsRequest === null || (is_array($UpdateBudgetsRequest) && count($UpdateBudgetsRequest) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $UpdateBudgetsRequest when calling updateBudgets'
            );
        }


        $resourcePath = '/CampaignManagement/v13/Budgets';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $multipart = false;

        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        return $this->setupAndSendRequest(
            'PUT',
            $resourcePath,
            $headers,
            $headerParams,
            $UpdateBudgetsRequest,
            $formParams,
            $multipart,
            true,
            true,
            false,
            'getHostSettingsForupdateBudgets',
            null,
            [],
            $queryParams
        );
    }

    /**
     * Operation updateCampaignCriterions
     *
     * @param  \Microsoft\MsAds\Rest\Model\CampaignManagementService\UpdateCampaignCriterionsRequest $UpdateCampaignCriterionsRequest UpdateCampaignCriterionsRequest (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['updateCampaignCriterions'] to see the possible values for this operation
     *
     * @throws \Microsoft\MsAds\Rest\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \Microsoft\MsAds\Rest\Model\CampaignManagementService\UpdateCampaignCriterionsResponse|\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault|\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault|\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault|\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault
     */
    public function updateCampaignCriterions($UpdateCampaignCriterionsRequest, string $contentType = self::contentTypes['updateCampaignCriterions'][0])
    {
        list($response) = $this->updateCampaignCriterionsWithHttpInfo($UpdateCampaignCriterionsRequest, $contentType);
        return $response;
    }

    /**
     * Operation updateCampaignCriterionsWithHttpInfo
     *
     * @param  \Microsoft\MsAds\Rest\Model\CampaignManagementService\UpdateCampaignCriterionsRequest $UpdateCampaignCriterionsRequest (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['updateCampaignCriterions'] to see the possible values for this operation
     *
     * @throws \Microsoft\MsAds\Rest\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \Microsoft\MsAds\Rest\Model\CampaignManagementService\UpdateCampaignCriterionsResponse|\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault|\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault|\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault|\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault, HTTP status code, HTTP response headers (array of strings)
     */
    public function updateCampaignCriterionsWithHttpInfo($UpdateCampaignCriterionsRequest, string $contentType = self::contentTypes['updateCampaignCriterions'][0])
    {
        $request = $this->updateCampaignCriterionsRequest($UpdateCampaignCriterionsRequest, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                $response = $e->getResponse();
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            switch($statusCode) {
                case 200:
                    return $this->getResponseContent($request, $response, '\Microsoft\MsAds\Rest\Model\CampaignManagementService\UpdateCampaignCriterionsResponse');
                case 400:
                    return $this->getResponseContent($request, $response, '\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault');
                case 500:
                    return $this->getResponseContent($request, $response, '\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault');
                case 401:
                    return $this->getResponseContent($request, $response, '\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault');
                case 403:
                    return $this->getResponseContent($request, $response, '\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault');
            }

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            $returnType = '\Microsoft\MsAds\Rest\Model\CampaignManagementService\UpdateCampaignCriterionsResponse';
            return $this->getResponseContent($request, $response, $returnType);

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Microsoft\MsAds\Rest\Model\CampaignManagementService\UpdateCampaignCriterionsResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 500:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 403:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation updateCampaignCriterionsAsync
     *
     * @param  \Microsoft\MsAds\Rest\Model\CampaignManagementService\UpdateCampaignCriterionsRequest $UpdateCampaignCriterionsRequest (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['updateCampaignCriterions'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function updateCampaignCriterionsAsync($UpdateCampaignCriterionsRequest, string $contentType = self::contentTypes['updateCampaignCriterions'][0])
    {
        return $this->updateCampaignCriterionsAsyncWithHttpInfo($UpdateCampaignCriterionsRequest, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation updateCampaignCriterionsAsyncWithHttpInfo
     *
     * @param  \Microsoft\MsAds\Rest\Model\CampaignManagementService\UpdateCampaignCriterionsRequest $UpdateCampaignCriterionsRequest (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['updateCampaignCriterions'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function updateCampaignCriterionsAsyncWithHttpInfo($UpdateCampaignCriterionsRequest, string $contentType = self::contentTypes['updateCampaignCriterions'][0])
    {
        $returnType = '\Microsoft\MsAds\Rest\Model\CampaignManagementService\UpdateCampaignCriterionsResponse';
        $request = $this->updateCampaignCriterionsRequest($UpdateCampaignCriterionsRequest, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return $this->onFulfilledResponse($response, $returnType);
                },
                function ($exception) {
                    $this->onRejectedResponse($exception);
                }
            );
    }

    /**
     * Create request for operation 'updateCampaignCriterions'
     *
     * @param  \Microsoft\MsAds\Rest\Model\CampaignManagementService\UpdateCampaignCriterionsRequest $UpdateCampaignCriterionsRequest (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['updateCampaignCriterions'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function updateCampaignCriterionsRequest($UpdateCampaignCriterionsRequest, string $contentType = self::contentTypes['updateCampaignCriterions'][0])
    {

        // verify the required parameter 'UpdateCampaignCriterionsRequest' is set
        if ($UpdateCampaignCriterionsRequest === null || (is_array($UpdateCampaignCriterionsRequest) && count($UpdateCampaignCriterionsRequest) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $UpdateCampaignCriterionsRequest when calling updateCampaignCriterions'
            );
        }


        $resourcePath = '/CampaignManagement/v13/CampaignCriterions';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $multipart = false;

        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        return $this->setupAndSendRequest(
            'PUT',
            $resourcePath,
            $headers,
            $headerParams,
            $UpdateCampaignCriterionsRequest,
            $formParams,
            $multipart,
            true,
            true,
            false,
            'getHostSettingsForupdateCampaignCriterions',
            null,
            [],
            $queryParams
        );
    }

    /**
     * Operation updateCampaigns
     *
     * @param  \Microsoft\MsAds\Rest\Model\CampaignManagementService\UpdateCampaignsRequest $UpdateCampaignsRequest UpdateCampaignsRequest (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['updateCampaigns'] to see the possible values for this operation
     *
     * @throws \Microsoft\MsAds\Rest\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \Microsoft\MsAds\Rest\Model\CampaignManagementService\UpdateCampaignsResponse|\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault|\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault|\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault|\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault
     */
    public function updateCampaigns($UpdateCampaignsRequest, string $contentType = self::contentTypes['updateCampaigns'][0])
    {
        list($response) = $this->updateCampaignsWithHttpInfo($UpdateCampaignsRequest, $contentType);
        return $response;
    }

    /**
     * Operation updateCampaignsWithHttpInfo
     *
     * @param  \Microsoft\MsAds\Rest\Model\CampaignManagementService\UpdateCampaignsRequest $UpdateCampaignsRequest (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['updateCampaigns'] to see the possible values for this operation
     *
     * @throws \Microsoft\MsAds\Rest\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \Microsoft\MsAds\Rest\Model\CampaignManagementService\UpdateCampaignsResponse|\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault|\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault|\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault|\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault, HTTP status code, HTTP response headers (array of strings)
     */
    public function updateCampaignsWithHttpInfo($UpdateCampaignsRequest, string $contentType = self::contentTypes['updateCampaigns'][0])
    {
        $request = $this->updateCampaignsRequest($UpdateCampaignsRequest, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                $response = $e->getResponse();
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            switch($statusCode) {
                case 200:
                    return $this->getResponseContent($request, $response, '\Microsoft\MsAds\Rest\Model\CampaignManagementService\UpdateCampaignsResponse');
                case 400:
                    return $this->getResponseContent($request, $response, '\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault');
                case 500:
                    return $this->getResponseContent($request, $response, '\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault');
                case 401:
                    return $this->getResponseContent($request, $response, '\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault');
                case 403:
                    return $this->getResponseContent($request, $response, '\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault');
            }

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            $returnType = '\Microsoft\MsAds\Rest\Model\CampaignManagementService\UpdateCampaignsResponse';
            return $this->getResponseContent($request, $response, $returnType);

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Microsoft\MsAds\Rest\Model\CampaignManagementService\UpdateCampaignsResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 500:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 403:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation updateCampaignsAsync
     *
     * @param  \Microsoft\MsAds\Rest\Model\CampaignManagementService\UpdateCampaignsRequest $UpdateCampaignsRequest (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['updateCampaigns'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function updateCampaignsAsync($UpdateCampaignsRequest, string $contentType = self::contentTypes['updateCampaigns'][0])
    {
        return $this->updateCampaignsAsyncWithHttpInfo($UpdateCampaignsRequest, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation updateCampaignsAsyncWithHttpInfo
     *
     * @param  \Microsoft\MsAds\Rest\Model\CampaignManagementService\UpdateCampaignsRequest $UpdateCampaignsRequest (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['updateCampaigns'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function updateCampaignsAsyncWithHttpInfo($UpdateCampaignsRequest, string $contentType = self::contentTypes['updateCampaigns'][0])
    {
        $returnType = '\Microsoft\MsAds\Rest\Model\CampaignManagementService\UpdateCampaignsResponse';
        $request = $this->updateCampaignsRequest($UpdateCampaignsRequest, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return $this->onFulfilledResponse($response, $returnType);
                },
                function ($exception) {
                    $this->onRejectedResponse($exception);
                }
            );
    }

    /**
     * Create request for operation 'updateCampaigns'
     *
     * @param  \Microsoft\MsAds\Rest\Model\CampaignManagementService\UpdateCampaignsRequest $UpdateCampaignsRequest (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['updateCampaigns'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function updateCampaignsRequest($UpdateCampaignsRequest, string $contentType = self::contentTypes['updateCampaigns'][0])
    {

        // verify the required parameter 'UpdateCampaignsRequest' is set
        if ($UpdateCampaignsRequest === null || (is_array($UpdateCampaignsRequest) && count($UpdateCampaignsRequest) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $UpdateCampaignsRequest when calling updateCampaigns'
            );
        }


        $resourcePath = '/CampaignManagement/v13/Campaigns';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $multipart = false;

        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        return $this->setupAndSendRequest(
            'PUT',
            $resourcePath,
            $headers,
            $headerParams,
            $UpdateCampaignsRequest,
            $formParams,
            $multipart,
            true,
            true,
            false,
            'getHostSettingsForupdateCampaigns',
            null,
            [],
            $queryParams
        );
    }

    /**
     * Operation updateConversionGoals
     *
     * @param  \Microsoft\MsAds\Rest\Model\CampaignManagementService\UpdateConversionGoalsRequest $UpdateConversionGoalsRequest UpdateConversionGoalsRequest (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['updateConversionGoals'] to see the possible values for this operation
     *
     * @throws \Microsoft\MsAds\Rest\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \Microsoft\MsAds\Rest\Model\CampaignManagementService\UpdateConversionGoalsResponse|\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault|\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault|\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault|\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault
     */
    public function updateConversionGoals($UpdateConversionGoalsRequest, string $contentType = self::contentTypes['updateConversionGoals'][0])
    {
        list($response) = $this->updateConversionGoalsWithHttpInfo($UpdateConversionGoalsRequest, $contentType);
        return $response;
    }

    /**
     * Operation updateConversionGoalsWithHttpInfo
     *
     * @param  \Microsoft\MsAds\Rest\Model\CampaignManagementService\UpdateConversionGoalsRequest $UpdateConversionGoalsRequest (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['updateConversionGoals'] to see the possible values for this operation
     *
     * @throws \Microsoft\MsAds\Rest\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \Microsoft\MsAds\Rest\Model\CampaignManagementService\UpdateConversionGoalsResponse|\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault|\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault|\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault|\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault, HTTP status code, HTTP response headers (array of strings)
     */
    public function updateConversionGoalsWithHttpInfo($UpdateConversionGoalsRequest, string $contentType = self::contentTypes['updateConversionGoals'][0])
    {
        $request = $this->updateConversionGoalsRequest($UpdateConversionGoalsRequest, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                $response = $e->getResponse();
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            switch($statusCode) {
                case 200:
                    return $this->getResponseContent($request, $response, '\Microsoft\MsAds\Rest\Model\CampaignManagementService\UpdateConversionGoalsResponse');
                case 400:
                    return $this->getResponseContent($request, $response, '\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault');
                case 500:
                    return $this->getResponseContent($request, $response, '\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault');
                case 401:
                    return $this->getResponseContent($request, $response, '\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault');
                case 403:
                    return $this->getResponseContent($request, $response, '\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault');
            }

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            $returnType = '\Microsoft\MsAds\Rest\Model\CampaignManagementService\UpdateConversionGoalsResponse';
            return $this->getResponseContent($request, $response, $returnType);

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Microsoft\MsAds\Rest\Model\CampaignManagementService\UpdateConversionGoalsResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 500:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 403:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation updateConversionGoalsAsync
     *
     * @param  \Microsoft\MsAds\Rest\Model\CampaignManagementService\UpdateConversionGoalsRequest $UpdateConversionGoalsRequest (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['updateConversionGoals'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function updateConversionGoalsAsync($UpdateConversionGoalsRequest, string $contentType = self::contentTypes['updateConversionGoals'][0])
    {
        return $this->updateConversionGoalsAsyncWithHttpInfo($UpdateConversionGoalsRequest, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation updateConversionGoalsAsyncWithHttpInfo
     *
     * @param  \Microsoft\MsAds\Rest\Model\CampaignManagementService\UpdateConversionGoalsRequest $UpdateConversionGoalsRequest (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['updateConversionGoals'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function updateConversionGoalsAsyncWithHttpInfo($UpdateConversionGoalsRequest, string $contentType = self::contentTypes['updateConversionGoals'][0])
    {
        $returnType = '\Microsoft\MsAds\Rest\Model\CampaignManagementService\UpdateConversionGoalsResponse';
        $request = $this->updateConversionGoalsRequest($UpdateConversionGoalsRequest, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return $this->onFulfilledResponse($response, $returnType);
                },
                function ($exception) {
                    $this->onRejectedResponse($exception);
                }
            );
    }

    /**
     * Create request for operation 'updateConversionGoals'
     *
     * @param  \Microsoft\MsAds\Rest\Model\CampaignManagementService\UpdateConversionGoalsRequest $UpdateConversionGoalsRequest (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['updateConversionGoals'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function updateConversionGoalsRequest($UpdateConversionGoalsRequest, string $contentType = self::contentTypes['updateConversionGoals'][0])
    {

        // verify the required parameter 'UpdateConversionGoalsRequest' is set
        if ($UpdateConversionGoalsRequest === null || (is_array($UpdateConversionGoalsRequest) && count($UpdateConversionGoalsRequest) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $UpdateConversionGoalsRequest when calling updateConversionGoals'
            );
        }


        $resourcePath = '/CampaignManagement/v13/ConversionGoals';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $multipart = false;

        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        return $this->setupAndSendRequest(
            'PUT',
            $resourcePath,
            $headers,
            $headerParams,
            $UpdateConversionGoalsRequest,
            $formParams,
            $multipart,
            true,
            true,
            false,
            'getHostSettingsForupdateConversionGoals',
            null,
            [],
            $queryParams
        );
    }

    /**
     * Operation updateConversionValueRules
     *
     * @param  \Microsoft\MsAds\Rest\Model\CampaignManagementService\UpdateConversionValueRulesRequest $UpdateConversionValueRulesRequest UpdateConversionValueRulesRequest (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['updateConversionValueRules'] to see the possible values for this operation
     *
     * @throws \Microsoft\MsAds\Rest\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \Microsoft\MsAds\Rest\Model\CampaignManagementService\UpdateConversionValueRulesResponse|\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault|\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault|\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault|\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault
     */
    public function updateConversionValueRules($UpdateConversionValueRulesRequest, string $contentType = self::contentTypes['updateConversionValueRules'][0])
    {
        list($response) = $this->updateConversionValueRulesWithHttpInfo($UpdateConversionValueRulesRequest, $contentType);
        return $response;
    }

    /**
     * Operation updateConversionValueRulesWithHttpInfo
     *
     * @param  \Microsoft\MsAds\Rest\Model\CampaignManagementService\UpdateConversionValueRulesRequest $UpdateConversionValueRulesRequest (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['updateConversionValueRules'] to see the possible values for this operation
     *
     * @throws \Microsoft\MsAds\Rest\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \Microsoft\MsAds\Rest\Model\CampaignManagementService\UpdateConversionValueRulesResponse|\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault|\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault|\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault|\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault, HTTP status code, HTTP response headers (array of strings)
     */
    public function updateConversionValueRulesWithHttpInfo($UpdateConversionValueRulesRequest, string $contentType = self::contentTypes['updateConversionValueRules'][0])
    {
        $request = $this->updateConversionValueRulesRequest($UpdateConversionValueRulesRequest, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                $response = $e->getResponse();
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            switch($statusCode) {
                case 200:
                    return $this->getResponseContent($request, $response, '\Microsoft\MsAds\Rest\Model\CampaignManagementService\UpdateConversionValueRulesResponse');
                case 400:
                    return $this->getResponseContent($request, $response, '\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault');
                case 500:
                    return $this->getResponseContent($request, $response, '\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault');
                case 401:
                    return $this->getResponseContent($request, $response, '\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault');
                case 403:
                    return $this->getResponseContent($request, $response, '\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault');
            }

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            $returnType = '\Microsoft\MsAds\Rest\Model\CampaignManagementService\UpdateConversionValueRulesResponse';
            return $this->getResponseContent($request, $response, $returnType);

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Microsoft\MsAds\Rest\Model\CampaignManagementService\UpdateConversionValueRulesResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 500:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 403:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation updateConversionValueRulesAsync
     *
     * @param  \Microsoft\MsAds\Rest\Model\CampaignManagementService\UpdateConversionValueRulesRequest $UpdateConversionValueRulesRequest (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['updateConversionValueRules'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function updateConversionValueRulesAsync($UpdateConversionValueRulesRequest, string $contentType = self::contentTypes['updateConversionValueRules'][0])
    {
        return $this->updateConversionValueRulesAsyncWithHttpInfo($UpdateConversionValueRulesRequest, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation updateConversionValueRulesAsyncWithHttpInfo
     *
     * @param  \Microsoft\MsAds\Rest\Model\CampaignManagementService\UpdateConversionValueRulesRequest $UpdateConversionValueRulesRequest (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['updateConversionValueRules'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function updateConversionValueRulesAsyncWithHttpInfo($UpdateConversionValueRulesRequest, string $contentType = self::contentTypes['updateConversionValueRules'][0])
    {
        $returnType = '\Microsoft\MsAds\Rest\Model\CampaignManagementService\UpdateConversionValueRulesResponse';
        $request = $this->updateConversionValueRulesRequest($UpdateConversionValueRulesRequest, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return $this->onFulfilledResponse($response, $returnType);
                },
                function ($exception) {
                    $this->onRejectedResponse($exception);
                }
            );
    }

    /**
     * Create request for operation 'updateConversionValueRules'
     *
     * @param  \Microsoft\MsAds\Rest\Model\CampaignManagementService\UpdateConversionValueRulesRequest $UpdateConversionValueRulesRequest (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['updateConversionValueRules'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function updateConversionValueRulesRequest($UpdateConversionValueRulesRequest, string $contentType = self::contentTypes['updateConversionValueRules'][0])
    {

        // verify the required parameter 'UpdateConversionValueRulesRequest' is set
        if ($UpdateConversionValueRulesRequest === null || (is_array($UpdateConversionValueRulesRequest) && count($UpdateConversionValueRulesRequest) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $UpdateConversionValueRulesRequest when calling updateConversionValueRules'
            );
        }


        $resourcePath = '/CampaignManagement/v13/ConversionValueRules';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $multipart = false;

        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        return $this->setupAndSendRequest(
            'PUT',
            $resourcePath,
            $headers,
            $headerParams,
            $UpdateConversionValueRulesRequest,
            $formParams,
            $multipart,
            true,
            true,
            false,
            'getHostSettingsForupdateConversionValueRules',
            null,
            [],
            $queryParams
        );
    }

    /**
     * Operation updateConversionValueRulesStatus
     *
     * @param  \Microsoft\MsAds\Rest\Model\CampaignManagementService\UpdateConversionValueRulesStatusRequest $UpdateConversionValueRulesStatusRequest UpdateConversionValueRulesStatusRequest (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['updateConversionValueRulesStatus'] to see the possible values for this operation
     *
     * @throws \Microsoft\MsAds\Rest\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \Microsoft\MsAds\Rest\Model\CampaignManagementService\UpdateConversionValueRulesStatusResponse|\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault|\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault|\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault|\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault
     */
    public function updateConversionValueRulesStatus($UpdateConversionValueRulesStatusRequest, string $contentType = self::contentTypes['updateConversionValueRulesStatus'][0])
    {
        list($response) = $this->updateConversionValueRulesStatusWithHttpInfo($UpdateConversionValueRulesStatusRequest, $contentType);
        return $response;
    }

    /**
     * Operation updateConversionValueRulesStatusWithHttpInfo
     *
     * @param  \Microsoft\MsAds\Rest\Model\CampaignManagementService\UpdateConversionValueRulesStatusRequest $UpdateConversionValueRulesStatusRequest (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['updateConversionValueRulesStatus'] to see the possible values for this operation
     *
     * @throws \Microsoft\MsAds\Rest\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \Microsoft\MsAds\Rest\Model\CampaignManagementService\UpdateConversionValueRulesStatusResponse|\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault|\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault|\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault|\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault, HTTP status code, HTTP response headers (array of strings)
     */
    public function updateConversionValueRulesStatusWithHttpInfo($UpdateConversionValueRulesStatusRequest, string $contentType = self::contentTypes['updateConversionValueRulesStatus'][0])
    {
        $request = $this->updateConversionValueRulesStatusRequest($UpdateConversionValueRulesStatusRequest, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                $response = $e->getResponse();
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            switch($statusCode) {
                case 200:
                    return $this->getResponseContent($request, $response, '\Microsoft\MsAds\Rest\Model\CampaignManagementService\UpdateConversionValueRulesStatusResponse');
                case 400:
                    return $this->getResponseContent($request, $response, '\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault');
                case 500:
                    return $this->getResponseContent($request, $response, '\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault');
                case 401:
                    return $this->getResponseContent($request, $response, '\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault');
                case 403:
                    return $this->getResponseContent($request, $response, '\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault');
            }

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            $returnType = '\Microsoft\MsAds\Rest\Model\CampaignManagementService\UpdateConversionValueRulesStatusResponse';
            return $this->getResponseContent($request, $response, $returnType);

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Microsoft\MsAds\Rest\Model\CampaignManagementService\UpdateConversionValueRulesStatusResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 500:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 403:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation updateConversionValueRulesStatusAsync
     *
     * @param  \Microsoft\MsAds\Rest\Model\CampaignManagementService\UpdateConversionValueRulesStatusRequest $UpdateConversionValueRulesStatusRequest (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['updateConversionValueRulesStatus'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function updateConversionValueRulesStatusAsync($UpdateConversionValueRulesStatusRequest, string $contentType = self::contentTypes['updateConversionValueRulesStatus'][0])
    {
        return $this->updateConversionValueRulesStatusAsyncWithHttpInfo($UpdateConversionValueRulesStatusRequest, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation updateConversionValueRulesStatusAsyncWithHttpInfo
     *
     * @param  \Microsoft\MsAds\Rest\Model\CampaignManagementService\UpdateConversionValueRulesStatusRequest $UpdateConversionValueRulesStatusRequest (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['updateConversionValueRulesStatus'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function updateConversionValueRulesStatusAsyncWithHttpInfo($UpdateConversionValueRulesStatusRequest, string $contentType = self::contentTypes['updateConversionValueRulesStatus'][0])
    {
        $returnType = '\Microsoft\MsAds\Rest\Model\CampaignManagementService\UpdateConversionValueRulesStatusResponse';
        $request = $this->updateConversionValueRulesStatusRequest($UpdateConversionValueRulesStatusRequest, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return $this->onFulfilledResponse($response, $returnType);
                },
                function ($exception) {
                    $this->onRejectedResponse($exception);
                }
            );
    }

    /**
     * Create request for operation 'updateConversionValueRulesStatus'
     *
     * @param  \Microsoft\MsAds\Rest\Model\CampaignManagementService\UpdateConversionValueRulesStatusRequest $UpdateConversionValueRulesStatusRequest (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['updateConversionValueRulesStatus'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function updateConversionValueRulesStatusRequest($UpdateConversionValueRulesStatusRequest, string $contentType = self::contentTypes['updateConversionValueRulesStatus'][0])
    {

        // verify the required parameter 'UpdateConversionValueRulesStatusRequest' is set
        if ($UpdateConversionValueRulesStatusRequest === null || (is_array($UpdateConversionValueRulesStatusRequest) && count($UpdateConversionValueRulesStatusRequest) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $UpdateConversionValueRulesStatusRequest when calling updateConversionValueRulesStatus'
            );
        }


        $resourcePath = '/CampaignManagement/v13/ConversionValueRulesStatus';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $multipart = false;

        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        return $this->setupAndSendRequest(
            'PUT',
            $resourcePath,
            $headers,
            $headerParams,
            $UpdateConversionValueRulesStatusRequest,
            $formParams,
            $multipart,
            true,
            true,
            false,
            'getHostSettingsForupdateConversionValueRulesStatus',
            null,
            [],
            $queryParams
        );
    }

    /**
     * Operation updateDataExclusions
     *
     * @param  \Microsoft\MsAds\Rest\Model\CampaignManagementService\UpdateDataExclusionsRequest $UpdateDataExclusionsRequest UpdateDataExclusionsRequest (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['updateDataExclusions'] to see the possible values for this operation
     *
     * @throws \Microsoft\MsAds\Rest\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \Microsoft\MsAds\Rest\Model\CampaignManagementService\UpdateDataExclusionsResponse|\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault|\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault|\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault|\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault
     */
    public function updateDataExclusions($UpdateDataExclusionsRequest, string $contentType = self::contentTypes['updateDataExclusions'][0])
    {
        list($response) = $this->updateDataExclusionsWithHttpInfo($UpdateDataExclusionsRequest, $contentType);
        return $response;
    }

    /**
     * Operation updateDataExclusionsWithHttpInfo
     *
     * @param  \Microsoft\MsAds\Rest\Model\CampaignManagementService\UpdateDataExclusionsRequest $UpdateDataExclusionsRequest (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['updateDataExclusions'] to see the possible values for this operation
     *
     * @throws \Microsoft\MsAds\Rest\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \Microsoft\MsAds\Rest\Model\CampaignManagementService\UpdateDataExclusionsResponse|\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault|\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault|\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault|\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault, HTTP status code, HTTP response headers (array of strings)
     */
    public function updateDataExclusionsWithHttpInfo($UpdateDataExclusionsRequest, string $contentType = self::contentTypes['updateDataExclusions'][0])
    {
        $request = $this->updateDataExclusionsRequest($UpdateDataExclusionsRequest, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                $response = $e->getResponse();
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            switch($statusCode) {
                case 200:
                    return $this->getResponseContent($request, $response, '\Microsoft\MsAds\Rest\Model\CampaignManagementService\UpdateDataExclusionsResponse');
                case 400:
                    return $this->getResponseContent($request, $response, '\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault');
                case 500:
                    return $this->getResponseContent($request, $response, '\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault');
                case 401:
                    return $this->getResponseContent($request, $response, '\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault');
                case 403:
                    return $this->getResponseContent($request, $response, '\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault');
            }

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            $returnType = '\Microsoft\MsAds\Rest\Model\CampaignManagementService\UpdateDataExclusionsResponse';
            return $this->getResponseContent($request, $response, $returnType);

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Microsoft\MsAds\Rest\Model\CampaignManagementService\UpdateDataExclusionsResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 500:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 403:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation updateDataExclusionsAsync
     *
     * @param  \Microsoft\MsAds\Rest\Model\CampaignManagementService\UpdateDataExclusionsRequest $UpdateDataExclusionsRequest (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['updateDataExclusions'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function updateDataExclusionsAsync($UpdateDataExclusionsRequest, string $contentType = self::contentTypes['updateDataExclusions'][0])
    {
        return $this->updateDataExclusionsAsyncWithHttpInfo($UpdateDataExclusionsRequest, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation updateDataExclusionsAsyncWithHttpInfo
     *
     * @param  \Microsoft\MsAds\Rest\Model\CampaignManagementService\UpdateDataExclusionsRequest $UpdateDataExclusionsRequest (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['updateDataExclusions'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function updateDataExclusionsAsyncWithHttpInfo($UpdateDataExclusionsRequest, string $contentType = self::contentTypes['updateDataExclusions'][0])
    {
        $returnType = '\Microsoft\MsAds\Rest\Model\CampaignManagementService\UpdateDataExclusionsResponse';
        $request = $this->updateDataExclusionsRequest($UpdateDataExclusionsRequest, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return $this->onFulfilledResponse($response, $returnType);
                },
                function ($exception) {
                    $this->onRejectedResponse($exception);
                }
            );
    }

    /**
     * Create request for operation 'updateDataExclusions'
     *
     * @param  \Microsoft\MsAds\Rest\Model\CampaignManagementService\UpdateDataExclusionsRequest $UpdateDataExclusionsRequest (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['updateDataExclusions'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function updateDataExclusionsRequest($UpdateDataExclusionsRequest, string $contentType = self::contentTypes['updateDataExclusions'][0])
    {

        // verify the required parameter 'UpdateDataExclusionsRequest' is set
        if ($UpdateDataExclusionsRequest === null || (is_array($UpdateDataExclusionsRequest) && count($UpdateDataExclusionsRequest) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $UpdateDataExclusionsRequest when calling updateDataExclusions'
            );
        }


        $resourcePath = '/CampaignManagement/v13/DataExclusions';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $multipart = false;

        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        return $this->setupAndSendRequest(
            'PUT',
            $resourcePath,
            $headers,
            $headerParams,
            $UpdateDataExclusionsRequest,
            $formParams,
            $multipart,
            true,
            true,
            false,
            'getHostSettingsForupdateDataExclusions',
            null,
            [],
            $queryParams
        );
    }

    /**
     * Operation updateExperiments
     *
     * @param  \Microsoft\MsAds\Rest\Model\CampaignManagementService\UpdateExperimentsRequest $UpdateExperimentsRequest UpdateExperimentsRequest (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['updateExperiments'] to see the possible values for this operation
     *
     * @throws \Microsoft\MsAds\Rest\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \Microsoft\MsAds\Rest\Model\CampaignManagementService\UpdateExperimentsResponse|\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault|\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault|\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault|\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault
     */
    public function updateExperiments($UpdateExperimentsRequest, string $contentType = self::contentTypes['updateExperiments'][0])
    {
        list($response) = $this->updateExperimentsWithHttpInfo($UpdateExperimentsRequest, $contentType);
        return $response;
    }

    /**
     * Operation updateExperimentsWithHttpInfo
     *
     * @param  \Microsoft\MsAds\Rest\Model\CampaignManagementService\UpdateExperimentsRequest $UpdateExperimentsRequest (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['updateExperiments'] to see the possible values for this operation
     *
     * @throws \Microsoft\MsAds\Rest\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \Microsoft\MsAds\Rest\Model\CampaignManagementService\UpdateExperimentsResponse|\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault|\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault|\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault|\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault, HTTP status code, HTTP response headers (array of strings)
     */
    public function updateExperimentsWithHttpInfo($UpdateExperimentsRequest, string $contentType = self::contentTypes['updateExperiments'][0])
    {
        $request = $this->updateExperimentsRequest($UpdateExperimentsRequest, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                $response = $e->getResponse();
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            switch($statusCode) {
                case 200:
                    return $this->getResponseContent($request, $response, '\Microsoft\MsAds\Rest\Model\CampaignManagementService\UpdateExperimentsResponse');
                case 400:
                    return $this->getResponseContent($request, $response, '\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault');
                case 500:
                    return $this->getResponseContent($request, $response, '\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault');
                case 401:
                    return $this->getResponseContent($request, $response, '\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault');
                case 403:
                    return $this->getResponseContent($request, $response, '\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault');
            }

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            $returnType = '\Microsoft\MsAds\Rest\Model\CampaignManagementService\UpdateExperimentsResponse';
            return $this->getResponseContent($request, $response, $returnType);

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Microsoft\MsAds\Rest\Model\CampaignManagementService\UpdateExperimentsResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 500:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 403:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation updateExperimentsAsync
     *
     * @param  \Microsoft\MsAds\Rest\Model\CampaignManagementService\UpdateExperimentsRequest $UpdateExperimentsRequest (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['updateExperiments'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function updateExperimentsAsync($UpdateExperimentsRequest, string $contentType = self::contentTypes['updateExperiments'][0])
    {
        return $this->updateExperimentsAsyncWithHttpInfo($UpdateExperimentsRequest, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation updateExperimentsAsyncWithHttpInfo
     *
     * @param  \Microsoft\MsAds\Rest\Model\CampaignManagementService\UpdateExperimentsRequest $UpdateExperimentsRequest (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['updateExperiments'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function updateExperimentsAsyncWithHttpInfo($UpdateExperimentsRequest, string $contentType = self::contentTypes['updateExperiments'][0])
    {
        $returnType = '\Microsoft\MsAds\Rest\Model\CampaignManagementService\UpdateExperimentsResponse';
        $request = $this->updateExperimentsRequest($UpdateExperimentsRequest, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return $this->onFulfilledResponse($response, $returnType);
                },
                function ($exception) {
                    $this->onRejectedResponse($exception);
                }
            );
    }

    /**
     * Create request for operation 'updateExperiments'
     *
     * @param  \Microsoft\MsAds\Rest\Model\CampaignManagementService\UpdateExperimentsRequest $UpdateExperimentsRequest (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['updateExperiments'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function updateExperimentsRequest($UpdateExperimentsRequest, string $contentType = self::contentTypes['updateExperiments'][0])
    {

        // verify the required parameter 'UpdateExperimentsRequest' is set
        if ($UpdateExperimentsRequest === null || (is_array($UpdateExperimentsRequest) && count($UpdateExperimentsRequest) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $UpdateExperimentsRequest when calling updateExperiments'
            );
        }


        $resourcePath = '/CampaignManagement/v13/Experiments';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $multipart = false;

        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        return $this->setupAndSendRequest(
            'PUT',
            $resourcePath,
            $headers,
            $headerParams,
            $UpdateExperimentsRequest,
            $formParams,
            $multipart,
            true,
            true,
            false,
            'getHostSettingsForupdateExperiments',
            null,
            [],
            $queryParams
        );
    }

    /**
     * Operation updateImportJobs
     *
     * @param  \Microsoft\MsAds\Rest\Model\CampaignManagementService\UpdateImportJobsRequest $UpdateImportJobsRequest UpdateImportJobsRequest (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['updateImportJobs'] to see the possible values for this operation
     *
     * @throws \Microsoft\MsAds\Rest\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \Microsoft\MsAds\Rest\Model\CampaignManagementService\UpdateImportJobsResponse|\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault|\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault|\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault|\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault
     */
    public function updateImportJobs($UpdateImportJobsRequest, string $contentType = self::contentTypes['updateImportJobs'][0])
    {
        list($response) = $this->updateImportJobsWithHttpInfo($UpdateImportJobsRequest, $contentType);
        return $response;
    }

    /**
     * Operation updateImportJobsWithHttpInfo
     *
     * @param  \Microsoft\MsAds\Rest\Model\CampaignManagementService\UpdateImportJobsRequest $UpdateImportJobsRequest (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['updateImportJobs'] to see the possible values for this operation
     *
     * @throws \Microsoft\MsAds\Rest\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \Microsoft\MsAds\Rest\Model\CampaignManagementService\UpdateImportJobsResponse|\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault|\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault|\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault|\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault, HTTP status code, HTTP response headers (array of strings)
     */
    public function updateImportJobsWithHttpInfo($UpdateImportJobsRequest, string $contentType = self::contentTypes['updateImportJobs'][0])
    {
        $request = $this->updateImportJobsRequest($UpdateImportJobsRequest, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                $response = $e->getResponse();
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            switch($statusCode) {
                case 200:
                    return $this->getResponseContent($request, $response, '\Microsoft\MsAds\Rest\Model\CampaignManagementService\UpdateImportJobsResponse');
                case 400:
                    return $this->getResponseContent($request, $response, '\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault');
                case 500:
                    return $this->getResponseContent($request, $response, '\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault');
                case 401:
                    return $this->getResponseContent($request, $response, '\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault');
                case 403:
                    return $this->getResponseContent($request, $response, '\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault');
            }

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            $returnType = '\Microsoft\MsAds\Rest\Model\CampaignManagementService\UpdateImportJobsResponse';
            return $this->getResponseContent($request, $response, $returnType);

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Microsoft\MsAds\Rest\Model\CampaignManagementService\UpdateImportJobsResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 500:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 403:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation updateImportJobsAsync
     *
     * @param  \Microsoft\MsAds\Rest\Model\CampaignManagementService\UpdateImportJobsRequest $UpdateImportJobsRequest (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['updateImportJobs'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function updateImportJobsAsync($UpdateImportJobsRequest, string $contentType = self::contentTypes['updateImportJobs'][0])
    {
        return $this->updateImportJobsAsyncWithHttpInfo($UpdateImportJobsRequest, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation updateImportJobsAsyncWithHttpInfo
     *
     * @param  \Microsoft\MsAds\Rest\Model\CampaignManagementService\UpdateImportJobsRequest $UpdateImportJobsRequest (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['updateImportJobs'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function updateImportJobsAsyncWithHttpInfo($UpdateImportJobsRequest, string $contentType = self::contentTypes['updateImportJobs'][0])
    {
        $returnType = '\Microsoft\MsAds\Rest\Model\CampaignManagementService\UpdateImportJobsResponse';
        $request = $this->updateImportJobsRequest($UpdateImportJobsRequest, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return $this->onFulfilledResponse($response, $returnType);
                },
                function ($exception) {
                    $this->onRejectedResponse($exception);
                }
            );
    }

    /**
     * Create request for operation 'updateImportJobs'
     *
     * @param  \Microsoft\MsAds\Rest\Model\CampaignManagementService\UpdateImportJobsRequest $UpdateImportJobsRequest (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['updateImportJobs'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function updateImportJobsRequest($UpdateImportJobsRequest, string $contentType = self::contentTypes['updateImportJobs'][0])
    {

        // verify the required parameter 'UpdateImportJobsRequest' is set
        if ($UpdateImportJobsRequest === null || (is_array($UpdateImportJobsRequest) && count($UpdateImportJobsRequest) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $UpdateImportJobsRequest when calling updateImportJobs'
            );
        }


        $resourcePath = '/CampaignManagement/v13/ImportJobs';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $multipart = false;

        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        return $this->setupAndSendRequest(
            'PUT',
            $resourcePath,
            $headers,
            $headerParams,
            $UpdateImportJobsRequest,
            $formParams,
            $multipart,
            true,
            true,
            false,
            'getHostSettingsForupdateImportJobs',
            null,
            [],
            $queryParams
        );
    }

    /**
     * Operation updateKeywords
     *
     * @param  \Microsoft\MsAds\Rest\Model\CampaignManagementService\UpdateKeywordsRequest $UpdateKeywordsRequest UpdateKeywordsRequest (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['updateKeywords'] to see the possible values for this operation
     *
     * @throws \Microsoft\MsAds\Rest\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \Microsoft\MsAds\Rest\Model\CampaignManagementService\UpdateKeywordsResponse|\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault|\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault|\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault|\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault
     */
    public function updateKeywords($UpdateKeywordsRequest, string $contentType = self::contentTypes['updateKeywords'][0])
    {
        list($response) = $this->updateKeywordsWithHttpInfo($UpdateKeywordsRequest, $contentType);
        return $response;
    }

    /**
     * Operation updateKeywordsWithHttpInfo
     *
     * @param  \Microsoft\MsAds\Rest\Model\CampaignManagementService\UpdateKeywordsRequest $UpdateKeywordsRequest (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['updateKeywords'] to see the possible values for this operation
     *
     * @throws \Microsoft\MsAds\Rest\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \Microsoft\MsAds\Rest\Model\CampaignManagementService\UpdateKeywordsResponse|\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault|\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault|\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault|\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault, HTTP status code, HTTP response headers (array of strings)
     */
    public function updateKeywordsWithHttpInfo($UpdateKeywordsRequest, string $contentType = self::contentTypes['updateKeywords'][0])
    {
        $request = $this->updateKeywordsRequest($UpdateKeywordsRequest, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                $response = $e->getResponse();
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            switch($statusCode) {
                case 200:
                    return $this->getResponseContent($request, $response, '\Microsoft\MsAds\Rest\Model\CampaignManagementService\UpdateKeywordsResponse');
                case 400:
                    return $this->getResponseContent($request, $response, '\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault');
                case 500:
                    return $this->getResponseContent($request, $response, '\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault');
                case 401:
                    return $this->getResponseContent($request, $response, '\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault');
                case 403:
                    return $this->getResponseContent($request, $response, '\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault');
            }

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            $returnType = '\Microsoft\MsAds\Rest\Model\CampaignManagementService\UpdateKeywordsResponse';
            return $this->getResponseContent($request, $response, $returnType);

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Microsoft\MsAds\Rest\Model\CampaignManagementService\UpdateKeywordsResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 500:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 403:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation updateKeywordsAsync
     *
     * @param  \Microsoft\MsAds\Rest\Model\CampaignManagementService\UpdateKeywordsRequest $UpdateKeywordsRequest (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['updateKeywords'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function updateKeywordsAsync($UpdateKeywordsRequest, string $contentType = self::contentTypes['updateKeywords'][0])
    {
        return $this->updateKeywordsAsyncWithHttpInfo($UpdateKeywordsRequest, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation updateKeywordsAsyncWithHttpInfo
     *
     * @param  \Microsoft\MsAds\Rest\Model\CampaignManagementService\UpdateKeywordsRequest $UpdateKeywordsRequest (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['updateKeywords'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function updateKeywordsAsyncWithHttpInfo($UpdateKeywordsRequest, string $contentType = self::contentTypes['updateKeywords'][0])
    {
        $returnType = '\Microsoft\MsAds\Rest\Model\CampaignManagementService\UpdateKeywordsResponse';
        $request = $this->updateKeywordsRequest($UpdateKeywordsRequest, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return $this->onFulfilledResponse($response, $returnType);
                },
                function ($exception) {
                    $this->onRejectedResponse($exception);
                }
            );
    }

    /**
     * Create request for operation 'updateKeywords'
     *
     * @param  \Microsoft\MsAds\Rest\Model\CampaignManagementService\UpdateKeywordsRequest $UpdateKeywordsRequest (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['updateKeywords'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function updateKeywordsRequest($UpdateKeywordsRequest, string $contentType = self::contentTypes['updateKeywords'][0])
    {

        // verify the required parameter 'UpdateKeywordsRequest' is set
        if ($UpdateKeywordsRequest === null || (is_array($UpdateKeywordsRequest) && count($UpdateKeywordsRequest) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $UpdateKeywordsRequest when calling updateKeywords'
            );
        }


        $resourcePath = '/CampaignManagement/v13/Keywords';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $multipart = false;

        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        return $this->setupAndSendRequest(
            'PUT',
            $resourcePath,
            $headers,
            $headerParams,
            $UpdateKeywordsRequest,
            $formParams,
            $multipart,
            true,
            true,
            false,
            'getHostSettingsForupdateKeywords',
            null,
            [],
            $queryParams
        );
    }

    /**
     * Operation updateLabels
     *
     * @param  \Microsoft\MsAds\Rest\Model\CampaignManagementService\UpdateLabelsRequest $UpdateLabelsRequest UpdateLabelsRequest (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['updateLabels'] to see the possible values for this operation
     *
     * @throws \Microsoft\MsAds\Rest\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \Microsoft\MsAds\Rest\Model\CampaignManagementService\UpdateLabelsResponse|\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault|\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault|\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault|\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault
     */
    public function updateLabels($UpdateLabelsRequest, string $contentType = self::contentTypes['updateLabels'][0])
    {
        list($response) = $this->updateLabelsWithHttpInfo($UpdateLabelsRequest, $contentType);
        return $response;
    }

    /**
     * Operation updateLabelsWithHttpInfo
     *
     * @param  \Microsoft\MsAds\Rest\Model\CampaignManagementService\UpdateLabelsRequest $UpdateLabelsRequest (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['updateLabels'] to see the possible values for this operation
     *
     * @throws \Microsoft\MsAds\Rest\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \Microsoft\MsAds\Rest\Model\CampaignManagementService\UpdateLabelsResponse|\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault|\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault|\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault|\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault, HTTP status code, HTTP response headers (array of strings)
     */
    public function updateLabelsWithHttpInfo($UpdateLabelsRequest, string $contentType = self::contentTypes['updateLabels'][0])
    {
        $request = $this->updateLabelsRequest($UpdateLabelsRequest, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                $response = $e->getResponse();
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            switch($statusCode) {
                case 200:
                    return $this->getResponseContent($request, $response, '\Microsoft\MsAds\Rest\Model\CampaignManagementService\UpdateLabelsResponse');
                case 400:
                    return $this->getResponseContent($request, $response, '\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault');
                case 500:
                    return $this->getResponseContent($request, $response, '\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault');
                case 401:
                    return $this->getResponseContent($request, $response, '\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault');
                case 403:
                    return $this->getResponseContent($request, $response, '\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault');
            }

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            $returnType = '\Microsoft\MsAds\Rest\Model\CampaignManagementService\UpdateLabelsResponse';
            return $this->getResponseContent($request, $response, $returnType);

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Microsoft\MsAds\Rest\Model\CampaignManagementService\UpdateLabelsResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 500:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 403:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation updateLabelsAsync
     *
     * @param  \Microsoft\MsAds\Rest\Model\CampaignManagementService\UpdateLabelsRequest $UpdateLabelsRequest (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['updateLabels'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function updateLabelsAsync($UpdateLabelsRequest, string $contentType = self::contentTypes['updateLabels'][0])
    {
        return $this->updateLabelsAsyncWithHttpInfo($UpdateLabelsRequest, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation updateLabelsAsyncWithHttpInfo
     *
     * @param  \Microsoft\MsAds\Rest\Model\CampaignManagementService\UpdateLabelsRequest $UpdateLabelsRequest (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['updateLabels'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function updateLabelsAsyncWithHttpInfo($UpdateLabelsRequest, string $contentType = self::contentTypes['updateLabels'][0])
    {
        $returnType = '\Microsoft\MsAds\Rest\Model\CampaignManagementService\UpdateLabelsResponse';
        $request = $this->updateLabelsRequest($UpdateLabelsRequest, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return $this->onFulfilledResponse($response, $returnType);
                },
                function ($exception) {
                    $this->onRejectedResponse($exception);
                }
            );
    }

    /**
     * Create request for operation 'updateLabels'
     *
     * @param  \Microsoft\MsAds\Rest\Model\CampaignManagementService\UpdateLabelsRequest $UpdateLabelsRequest (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['updateLabels'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function updateLabelsRequest($UpdateLabelsRequest, string $contentType = self::contentTypes['updateLabels'][0])
    {

        // verify the required parameter 'UpdateLabelsRequest' is set
        if ($UpdateLabelsRequest === null || (is_array($UpdateLabelsRequest) && count($UpdateLabelsRequest) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $UpdateLabelsRequest when calling updateLabels'
            );
        }


        $resourcePath = '/CampaignManagement/v13/Labels';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $multipart = false;

        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        return $this->setupAndSendRequest(
            'PUT',
            $resourcePath,
            $headers,
            $headerParams,
            $UpdateLabelsRequest,
            $formParams,
            $multipart,
            true,
            true,
            false,
            'getHostSettingsForupdateLabels',
            null,
            [],
            $queryParams
        );
    }

    /**
     * Operation updateNewCustomerAcquisitionGoals
     *
     * @param  \Microsoft\MsAds\Rest\Model\CampaignManagementService\UpdateNewCustomerAcquisitionGoalsRequest $UpdateNewCustomerAcquisitionGoalsRequest UpdateNewCustomerAcquisitionGoalsRequest (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['updateNewCustomerAcquisitionGoals'] to see the possible values for this operation
     *
     * @throws \Microsoft\MsAds\Rest\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \Microsoft\MsAds\Rest\Model\CampaignManagementService\UpdateNewCustomerAcquisitionGoalsResponse|\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault|\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault|\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault|\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault
     */
    public function updateNewCustomerAcquisitionGoals($UpdateNewCustomerAcquisitionGoalsRequest, string $contentType = self::contentTypes['updateNewCustomerAcquisitionGoals'][0])
    {
        list($response) = $this->updateNewCustomerAcquisitionGoalsWithHttpInfo($UpdateNewCustomerAcquisitionGoalsRequest, $contentType);
        return $response;
    }

    /**
     * Operation updateNewCustomerAcquisitionGoalsWithHttpInfo
     *
     * @param  \Microsoft\MsAds\Rest\Model\CampaignManagementService\UpdateNewCustomerAcquisitionGoalsRequest $UpdateNewCustomerAcquisitionGoalsRequest (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['updateNewCustomerAcquisitionGoals'] to see the possible values for this operation
     *
     * @throws \Microsoft\MsAds\Rest\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \Microsoft\MsAds\Rest\Model\CampaignManagementService\UpdateNewCustomerAcquisitionGoalsResponse|\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault|\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault|\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault|\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault, HTTP status code, HTTP response headers (array of strings)
     */
    public function updateNewCustomerAcquisitionGoalsWithHttpInfo($UpdateNewCustomerAcquisitionGoalsRequest, string $contentType = self::contentTypes['updateNewCustomerAcquisitionGoals'][0])
    {
        $request = $this->updateNewCustomerAcquisitionGoalsRequest($UpdateNewCustomerAcquisitionGoalsRequest, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                $response = $e->getResponse();
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            switch($statusCode) {
                case 200:
                    return $this->getResponseContent($request, $response, '\Microsoft\MsAds\Rest\Model\CampaignManagementService\UpdateNewCustomerAcquisitionGoalsResponse');
                case 400:
                    return $this->getResponseContent($request, $response, '\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault');
                case 500:
                    return $this->getResponseContent($request, $response, '\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault');
                case 401:
                    return $this->getResponseContent($request, $response, '\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault');
                case 403:
                    return $this->getResponseContent($request, $response, '\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault');
            }

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            $returnType = '\Microsoft\MsAds\Rest\Model\CampaignManagementService\UpdateNewCustomerAcquisitionGoalsResponse';
            return $this->getResponseContent($request, $response, $returnType);

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Microsoft\MsAds\Rest\Model\CampaignManagementService\UpdateNewCustomerAcquisitionGoalsResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 500:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 403:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation updateNewCustomerAcquisitionGoalsAsync
     *
     * @param  \Microsoft\MsAds\Rest\Model\CampaignManagementService\UpdateNewCustomerAcquisitionGoalsRequest $UpdateNewCustomerAcquisitionGoalsRequest (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['updateNewCustomerAcquisitionGoals'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function updateNewCustomerAcquisitionGoalsAsync($UpdateNewCustomerAcquisitionGoalsRequest, string $contentType = self::contentTypes['updateNewCustomerAcquisitionGoals'][0])
    {
        return $this->updateNewCustomerAcquisitionGoalsAsyncWithHttpInfo($UpdateNewCustomerAcquisitionGoalsRequest, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation updateNewCustomerAcquisitionGoalsAsyncWithHttpInfo
     *
     * @param  \Microsoft\MsAds\Rest\Model\CampaignManagementService\UpdateNewCustomerAcquisitionGoalsRequest $UpdateNewCustomerAcquisitionGoalsRequest (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['updateNewCustomerAcquisitionGoals'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function updateNewCustomerAcquisitionGoalsAsyncWithHttpInfo($UpdateNewCustomerAcquisitionGoalsRequest, string $contentType = self::contentTypes['updateNewCustomerAcquisitionGoals'][0])
    {
        $returnType = '\Microsoft\MsAds\Rest\Model\CampaignManagementService\UpdateNewCustomerAcquisitionGoalsResponse';
        $request = $this->updateNewCustomerAcquisitionGoalsRequest($UpdateNewCustomerAcquisitionGoalsRequest, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return $this->onFulfilledResponse($response, $returnType);
                },
                function ($exception) {
                    $this->onRejectedResponse($exception);
                }
            );
    }

    /**
     * Create request for operation 'updateNewCustomerAcquisitionGoals'
     *
     * @param  \Microsoft\MsAds\Rest\Model\CampaignManagementService\UpdateNewCustomerAcquisitionGoalsRequest $UpdateNewCustomerAcquisitionGoalsRequest (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['updateNewCustomerAcquisitionGoals'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function updateNewCustomerAcquisitionGoalsRequest($UpdateNewCustomerAcquisitionGoalsRequest, string $contentType = self::contentTypes['updateNewCustomerAcquisitionGoals'][0])
    {

        // verify the required parameter 'UpdateNewCustomerAcquisitionGoalsRequest' is set
        if ($UpdateNewCustomerAcquisitionGoalsRequest === null || (is_array($UpdateNewCustomerAcquisitionGoalsRequest) && count($UpdateNewCustomerAcquisitionGoalsRequest) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $UpdateNewCustomerAcquisitionGoalsRequest when calling updateNewCustomerAcquisitionGoals'
            );
        }


        $resourcePath = '/CampaignManagement/v13/NewCustomerAcquisitionGoals';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $multipart = false;

        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        return $this->setupAndSendRequest(
            'PUT',
            $resourcePath,
            $headers,
            $headerParams,
            $UpdateNewCustomerAcquisitionGoalsRequest,
            $formParams,
            $multipart,
            true,
            true,
            false,
            'getHostSettingsForupdateNewCustomerAcquisitionGoals',
            null,
            [],
            $queryParams
        );
    }

    /**
     * Operation updateSeasonalityAdjustments
     *
     * @param  \Microsoft\MsAds\Rest\Model\CampaignManagementService\UpdateSeasonalityAdjustmentsRequest $UpdateSeasonalityAdjustmentsRequest UpdateSeasonalityAdjustmentsRequest (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['updateSeasonalityAdjustments'] to see the possible values for this operation
     *
     * @throws \Microsoft\MsAds\Rest\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \Microsoft\MsAds\Rest\Model\CampaignManagementService\UpdateSeasonalityAdjustmentsResponse|\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault|\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault|\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault|\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault
     */
    public function updateSeasonalityAdjustments($UpdateSeasonalityAdjustmentsRequest, string $contentType = self::contentTypes['updateSeasonalityAdjustments'][0])
    {
        list($response) = $this->updateSeasonalityAdjustmentsWithHttpInfo($UpdateSeasonalityAdjustmentsRequest, $contentType);
        return $response;
    }

    /**
     * Operation updateSeasonalityAdjustmentsWithHttpInfo
     *
     * @param  \Microsoft\MsAds\Rest\Model\CampaignManagementService\UpdateSeasonalityAdjustmentsRequest $UpdateSeasonalityAdjustmentsRequest (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['updateSeasonalityAdjustments'] to see the possible values for this operation
     *
     * @throws \Microsoft\MsAds\Rest\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \Microsoft\MsAds\Rest\Model\CampaignManagementService\UpdateSeasonalityAdjustmentsResponse|\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault|\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault|\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault|\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault, HTTP status code, HTTP response headers (array of strings)
     */
    public function updateSeasonalityAdjustmentsWithHttpInfo($UpdateSeasonalityAdjustmentsRequest, string $contentType = self::contentTypes['updateSeasonalityAdjustments'][0])
    {
        $request = $this->updateSeasonalityAdjustmentsRequest($UpdateSeasonalityAdjustmentsRequest, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                $response = $e->getResponse();
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            switch($statusCode) {
                case 200:
                    return $this->getResponseContent($request, $response, '\Microsoft\MsAds\Rest\Model\CampaignManagementService\UpdateSeasonalityAdjustmentsResponse');
                case 400:
                    return $this->getResponseContent($request, $response, '\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault');
                case 500:
                    return $this->getResponseContent($request, $response, '\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault');
                case 401:
                    return $this->getResponseContent($request, $response, '\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault');
                case 403:
                    return $this->getResponseContent($request, $response, '\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault');
            }

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            $returnType = '\Microsoft\MsAds\Rest\Model\CampaignManagementService\UpdateSeasonalityAdjustmentsResponse';
            return $this->getResponseContent($request, $response, $returnType);

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Microsoft\MsAds\Rest\Model\CampaignManagementService\UpdateSeasonalityAdjustmentsResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 500:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 403:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation updateSeasonalityAdjustmentsAsync
     *
     * @param  \Microsoft\MsAds\Rest\Model\CampaignManagementService\UpdateSeasonalityAdjustmentsRequest $UpdateSeasonalityAdjustmentsRequest (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['updateSeasonalityAdjustments'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function updateSeasonalityAdjustmentsAsync($UpdateSeasonalityAdjustmentsRequest, string $contentType = self::contentTypes['updateSeasonalityAdjustments'][0])
    {
        return $this->updateSeasonalityAdjustmentsAsyncWithHttpInfo($UpdateSeasonalityAdjustmentsRequest, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation updateSeasonalityAdjustmentsAsyncWithHttpInfo
     *
     * @param  \Microsoft\MsAds\Rest\Model\CampaignManagementService\UpdateSeasonalityAdjustmentsRequest $UpdateSeasonalityAdjustmentsRequest (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['updateSeasonalityAdjustments'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function updateSeasonalityAdjustmentsAsyncWithHttpInfo($UpdateSeasonalityAdjustmentsRequest, string $contentType = self::contentTypes['updateSeasonalityAdjustments'][0])
    {
        $returnType = '\Microsoft\MsAds\Rest\Model\CampaignManagementService\UpdateSeasonalityAdjustmentsResponse';
        $request = $this->updateSeasonalityAdjustmentsRequest($UpdateSeasonalityAdjustmentsRequest, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return $this->onFulfilledResponse($response, $returnType);
                },
                function ($exception) {
                    $this->onRejectedResponse($exception);
                }
            );
    }

    /**
     * Create request for operation 'updateSeasonalityAdjustments'
     *
     * @param  \Microsoft\MsAds\Rest\Model\CampaignManagementService\UpdateSeasonalityAdjustmentsRequest $UpdateSeasonalityAdjustmentsRequest (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['updateSeasonalityAdjustments'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function updateSeasonalityAdjustmentsRequest($UpdateSeasonalityAdjustmentsRequest, string $contentType = self::contentTypes['updateSeasonalityAdjustments'][0])
    {

        // verify the required parameter 'UpdateSeasonalityAdjustmentsRequest' is set
        if ($UpdateSeasonalityAdjustmentsRequest === null || (is_array($UpdateSeasonalityAdjustmentsRequest) && count($UpdateSeasonalityAdjustmentsRequest) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $UpdateSeasonalityAdjustmentsRequest when calling updateSeasonalityAdjustments'
            );
        }


        $resourcePath = '/CampaignManagement/v13/SeasonalityAdjustments';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $multipart = false;

        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        return $this->setupAndSendRequest(
            'PUT',
            $resourcePath,
            $headers,
            $headerParams,
            $UpdateSeasonalityAdjustmentsRequest,
            $formParams,
            $multipart,
            true,
            true,
            false,
            'getHostSettingsForupdateSeasonalityAdjustments',
            null,
            [],
            $queryParams
        );
    }

    /**
     * Operation updateSharedEntities
     *
     * @param  \Microsoft\MsAds\Rest\Model\CampaignManagementService\UpdateSharedEntitiesRequest $UpdateSharedEntitiesRequest UpdateSharedEntitiesRequest (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['updateSharedEntities'] to see the possible values for this operation
     *
     * @throws \Microsoft\MsAds\Rest\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \Microsoft\MsAds\Rest\Model\CampaignManagementService\UpdateSharedEntitiesResponse|\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault|\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault|\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault|\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault
     */
    public function updateSharedEntities($UpdateSharedEntitiesRequest, string $contentType = self::contentTypes['updateSharedEntities'][0])
    {
        list($response) = $this->updateSharedEntitiesWithHttpInfo($UpdateSharedEntitiesRequest, $contentType);
        return $response;
    }

    /**
     * Operation updateSharedEntitiesWithHttpInfo
     *
     * @param  \Microsoft\MsAds\Rest\Model\CampaignManagementService\UpdateSharedEntitiesRequest $UpdateSharedEntitiesRequest (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['updateSharedEntities'] to see the possible values for this operation
     *
     * @throws \Microsoft\MsAds\Rest\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \Microsoft\MsAds\Rest\Model\CampaignManagementService\UpdateSharedEntitiesResponse|\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault|\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault|\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault|\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault, HTTP status code, HTTP response headers (array of strings)
     */
    public function updateSharedEntitiesWithHttpInfo($UpdateSharedEntitiesRequest, string $contentType = self::contentTypes['updateSharedEntities'][0])
    {
        $request = $this->updateSharedEntitiesRequest($UpdateSharedEntitiesRequest, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                $response = $e->getResponse();
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            switch($statusCode) {
                case 200:
                    return $this->getResponseContent($request, $response, '\Microsoft\MsAds\Rest\Model\CampaignManagementService\UpdateSharedEntitiesResponse');
                case 400:
                    return $this->getResponseContent($request, $response, '\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault');
                case 500:
                    return $this->getResponseContent($request, $response, '\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault');
                case 401:
                    return $this->getResponseContent($request, $response, '\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault');
                case 403:
                    return $this->getResponseContent($request, $response, '\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault');
            }

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            $returnType = '\Microsoft\MsAds\Rest\Model\CampaignManagementService\UpdateSharedEntitiesResponse';
            return $this->getResponseContent($request, $response, $returnType);

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Microsoft\MsAds\Rest\Model\CampaignManagementService\UpdateSharedEntitiesResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 500:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 403:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation updateSharedEntitiesAsync
     *
     * @param  \Microsoft\MsAds\Rest\Model\CampaignManagementService\UpdateSharedEntitiesRequest $UpdateSharedEntitiesRequest (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['updateSharedEntities'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function updateSharedEntitiesAsync($UpdateSharedEntitiesRequest, string $contentType = self::contentTypes['updateSharedEntities'][0])
    {
        return $this->updateSharedEntitiesAsyncWithHttpInfo($UpdateSharedEntitiesRequest, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation updateSharedEntitiesAsyncWithHttpInfo
     *
     * @param  \Microsoft\MsAds\Rest\Model\CampaignManagementService\UpdateSharedEntitiesRequest $UpdateSharedEntitiesRequest (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['updateSharedEntities'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function updateSharedEntitiesAsyncWithHttpInfo($UpdateSharedEntitiesRequest, string $contentType = self::contentTypes['updateSharedEntities'][0])
    {
        $returnType = '\Microsoft\MsAds\Rest\Model\CampaignManagementService\UpdateSharedEntitiesResponse';
        $request = $this->updateSharedEntitiesRequest($UpdateSharedEntitiesRequest, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return $this->onFulfilledResponse($response, $returnType);
                },
                function ($exception) {
                    $this->onRejectedResponse($exception);
                }
            );
    }

    /**
     * Create request for operation 'updateSharedEntities'
     *
     * @param  \Microsoft\MsAds\Rest\Model\CampaignManagementService\UpdateSharedEntitiesRequest $UpdateSharedEntitiesRequest (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['updateSharedEntities'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function updateSharedEntitiesRequest($UpdateSharedEntitiesRequest, string $contentType = self::contentTypes['updateSharedEntities'][0])
    {

        // verify the required parameter 'UpdateSharedEntitiesRequest' is set
        if ($UpdateSharedEntitiesRequest === null || (is_array($UpdateSharedEntitiesRequest) && count($UpdateSharedEntitiesRequest) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $UpdateSharedEntitiesRequest when calling updateSharedEntities'
            );
        }


        $resourcePath = '/CampaignManagement/v13/SharedEntities';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $multipart = false;

        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        return $this->setupAndSendRequest(
            'PUT',
            $resourcePath,
            $headers,
            $headerParams,
            $UpdateSharedEntitiesRequest,
            $formParams,
            $multipart,
            true,
            true,
            false,
            'getHostSettingsForupdateSharedEntities',
            null,
            [],
            $queryParams
        );
    }

    /**
     * Operation updateUetTags
     *
     * @param  \Microsoft\MsAds\Rest\Model\CampaignManagementService\UpdateUetTagsRequest $UpdateUetTagsRequest UpdateUetTagsRequest (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['updateUetTags'] to see the possible values for this operation
     *
     * @throws \Microsoft\MsAds\Rest\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \Microsoft\MsAds\Rest\Model\CampaignManagementService\UpdateUetTagsResponse|\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault|\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault|\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault|\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault
     */
    public function updateUetTags($UpdateUetTagsRequest, string $contentType = self::contentTypes['updateUetTags'][0])
    {
        list($response) = $this->updateUetTagsWithHttpInfo($UpdateUetTagsRequest, $contentType);
        return $response;
    }

    /**
     * Operation updateUetTagsWithHttpInfo
     *
     * @param  \Microsoft\MsAds\Rest\Model\CampaignManagementService\UpdateUetTagsRequest $UpdateUetTagsRequest (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['updateUetTags'] to see the possible values for this operation
     *
     * @throws \Microsoft\MsAds\Rest\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \Microsoft\MsAds\Rest\Model\CampaignManagementService\UpdateUetTagsResponse|\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault|\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault|\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault|\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault, HTTP status code, HTTP response headers (array of strings)
     */
    public function updateUetTagsWithHttpInfo($UpdateUetTagsRequest, string $contentType = self::contentTypes['updateUetTags'][0])
    {
        $request = $this->updateUetTagsRequest($UpdateUetTagsRequest, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                $response = $e->getResponse();
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            switch($statusCode) {
                case 200:
                    return $this->getResponseContent($request, $response, '\Microsoft\MsAds\Rest\Model\CampaignManagementService\UpdateUetTagsResponse');
                case 400:
                    return $this->getResponseContent($request, $response, '\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault');
                case 500:
                    return $this->getResponseContent($request, $response, '\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault');
                case 401:
                    return $this->getResponseContent($request, $response, '\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault');
                case 403:
                    return $this->getResponseContent($request, $response, '\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault');
            }

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            $returnType = '\Microsoft\MsAds\Rest\Model\CampaignManagementService\UpdateUetTagsResponse';
            return $this->getResponseContent($request, $response, $returnType);

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Microsoft\MsAds\Rest\Model\CampaignManagementService\UpdateUetTagsResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 500:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 403:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation updateUetTagsAsync
     *
     * @param  \Microsoft\MsAds\Rest\Model\CampaignManagementService\UpdateUetTagsRequest $UpdateUetTagsRequest (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['updateUetTags'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function updateUetTagsAsync($UpdateUetTagsRequest, string $contentType = self::contentTypes['updateUetTags'][0])
    {
        return $this->updateUetTagsAsyncWithHttpInfo($UpdateUetTagsRequest, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation updateUetTagsAsyncWithHttpInfo
     *
     * @param  \Microsoft\MsAds\Rest\Model\CampaignManagementService\UpdateUetTagsRequest $UpdateUetTagsRequest (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['updateUetTags'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function updateUetTagsAsyncWithHttpInfo($UpdateUetTagsRequest, string $contentType = self::contentTypes['updateUetTags'][0])
    {
        $returnType = '\Microsoft\MsAds\Rest\Model\CampaignManagementService\UpdateUetTagsResponse';
        $request = $this->updateUetTagsRequest($UpdateUetTagsRequest, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return $this->onFulfilledResponse($response, $returnType);
                },
                function ($exception) {
                    $this->onRejectedResponse($exception);
                }
            );
    }

    /**
     * Create request for operation 'updateUetTags'
     *
     * @param  \Microsoft\MsAds\Rest\Model\CampaignManagementService\UpdateUetTagsRequest $UpdateUetTagsRequest (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['updateUetTags'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function updateUetTagsRequest($UpdateUetTagsRequest, string $contentType = self::contentTypes['updateUetTags'][0])
    {

        // verify the required parameter 'UpdateUetTagsRequest' is set
        if ($UpdateUetTagsRequest === null || (is_array($UpdateUetTagsRequest) && count($UpdateUetTagsRequest) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $UpdateUetTagsRequest when calling updateUetTags'
            );
        }


        $resourcePath = '/CampaignManagement/v13/UetTags';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $multipart = false;

        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        return $this->setupAndSendRequest(
            'PUT',
            $resourcePath,
            $headers,
            $headerParams,
            $UpdateUetTagsRequest,
            $formParams,
            $multipart,
            true,
            true,
            false,
            'getHostSettingsForupdateUetTags',
            null,
            [],
            $queryParams
        );
    }

    /**
     * Operation updateVideos
     *
     * @param  \Microsoft\MsAds\Rest\Model\CampaignManagementService\UpdateVideosRequest $UpdateVideosRequest UpdateVideosRequest (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['updateVideos'] to see the possible values for this operation
     *
     * @throws \Microsoft\MsAds\Rest\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \Microsoft\MsAds\Rest\Model\CampaignManagementService\UpdateVideosResponse|\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault|\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault|\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault|\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault
     */
    public function updateVideos($UpdateVideosRequest, string $contentType = self::contentTypes['updateVideos'][0])
    {
        list($response) = $this->updateVideosWithHttpInfo($UpdateVideosRequest, $contentType);
        return $response;
    }

    /**
     * Operation updateVideosWithHttpInfo
     *
     * @param  \Microsoft\MsAds\Rest\Model\CampaignManagementService\UpdateVideosRequest $UpdateVideosRequest (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['updateVideos'] to see the possible values for this operation
     *
     * @throws \Microsoft\MsAds\Rest\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \Microsoft\MsAds\Rest\Model\CampaignManagementService\UpdateVideosResponse|\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault|\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault|\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault|\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault, HTTP status code, HTTP response headers (array of strings)
     */
    public function updateVideosWithHttpInfo($UpdateVideosRequest, string $contentType = self::contentTypes['updateVideos'][0])
    {
        $request = $this->updateVideosRequest($UpdateVideosRequest, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                $response = $e->getResponse();
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            switch($statusCode) {
                case 200:
                    return $this->getResponseContent($request, $response, '\Microsoft\MsAds\Rest\Model\CampaignManagementService\UpdateVideosResponse');
                case 400:
                    return $this->getResponseContent($request, $response, '\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault');
                case 500:
                    return $this->getResponseContent($request, $response, '\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault');
                case 401:
                    return $this->getResponseContent($request, $response, '\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault');
                case 403:
                    return $this->getResponseContent($request, $response, '\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault');
            }

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            $returnType = '\Microsoft\MsAds\Rest\Model\CampaignManagementService\UpdateVideosResponse';
            return $this->getResponseContent($request, $response, $returnType);

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Microsoft\MsAds\Rest\Model\CampaignManagementService\UpdateVideosResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 500:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 403:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Microsoft\MsAds\Rest\Model\CampaignManagementService\ApplicationFault',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation updateVideosAsync
     *
     * @param  \Microsoft\MsAds\Rest\Model\CampaignManagementService\UpdateVideosRequest $UpdateVideosRequest (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['updateVideos'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function updateVideosAsync($UpdateVideosRequest, string $contentType = self::contentTypes['updateVideos'][0])
    {
        return $this->updateVideosAsyncWithHttpInfo($UpdateVideosRequest, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation updateVideosAsyncWithHttpInfo
     *
     * @param  \Microsoft\MsAds\Rest\Model\CampaignManagementService\UpdateVideosRequest $UpdateVideosRequest (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['updateVideos'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function updateVideosAsyncWithHttpInfo($UpdateVideosRequest, string $contentType = self::contentTypes['updateVideos'][0])
    {
        $returnType = '\Microsoft\MsAds\Rest\Model\CampaignManagementService\UpdateVideosResponse';
        $request = $this->updateVideosRequest($UpdateVideosRequest, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return $this->onFulfilledResponse($response, $returnType);
                },
                function ($exception) {
                    $this->onRejectedResponse($exception);
                }
            );
    }

    /**
     * Create request for operation 'updateVideos'
     *
     * @param  \Microsoft\MsAds\Rest\Model\CampaignManagementService\UpdateVideosRequest $UpdateVideosRequest (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['updateVideos'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function updateVideosRequest($UpdateVideosRequest, string $contentType = self::contentTypes['updateVideos'][0])
    {

        // verify the required parameter 'UpdateVideosRequest' is set
        if ($UpdateVideosRequest === null || (is_array($UpdateVideosRequest) && count($UpdateVideosRequest) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $UpdateVideosRequest when calling updateVideos'
            );
        }


        $resourcePath = '/CampaignManagement/v13/Videos';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $multipart = false;

        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        return $this->setupAndSendRequest(
            'PUT',
            $resourcePath,
            $headers,
            $headerParams,
            $UpdateVideosRequest,
            $formParams,
            $multipart,
            true,
            true,
            false,
            'getHostSettingsForupdateVideos',
            null,
            [],
            $queryParams
        );
    }

}
