<?php
/**
 * Setting
 * CampaignManagementService
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  Microsoft\MsAds\Rest\Model\CampaignManagementService
 * @author   Microsoft Advertising
 */

namespace Microsoft\MsAds\Rest\Model\CampaignManagementService;

use ArrayAccess;
use Microsoft\MsAds\Rest\ObjectSerializer;
use Microsoft\MsAds\Rest\ModelInterface;

class Setting implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = 'Type';

    /**
     * Associative array for mapping discriminator values to model class names
     *
     * @var string[]
     */
    public const MAPPINGS = [
        'AppSetting' => 'Microsoft\MsAds\Rest\Model\CampaignManagementService\AppSetting',
        'CallToActionSetting' => 'Microsoft\MsAds\Rest\Model\CampaignManagementService\CallToActionSetting',
        'CoOpSetting' => 'Microsoft\MsAds\Rest\Model\CampaignManagementService\CoOpSetting',
        'DisclaimerSetting' => 'Microsoft\MsAds\Rest\Model\CampaignManagementService\DisclaimerSetting',
        'DynamicFeedSetting' => 'Microsoft\MsAds\Rest\Model\CampaignManagementService\DynamicFeedSetting',
        'DynamicSearchAdsSetting' => 'Microsoft\MsAds\Rest\Model\CampaignManagementService\DynamicSearchAdsSetting',
        'HotelSetting' => 'Microsoft\MsAds\Rest\Model\CampaignManagementService\HotelSetting',
        'NewCustomerAcquisitionGoalSetting' => 'Microsoft\MsAds\Rest\Model\CampaignManagementService\NewCustomerAcquisitionGoalSetting',
        'PerformanceMaxSetting' => 'Microsoft\MsAds\Rest\Model\CampaignManagementService\PerformanceMaxSetting',
        'ResponsiveSearchAdsSetting' => 'Microsoft\MsAds\Rest\Model\CampaignManagementService\ResponsiveSearchAdsSetting',
        'ShoppingSetting' => 'Microsoft\MsAds\Rest\Model\CampaignManagementService\ShoppingSetting',
        'TargetSetting' => 'Microsoft\MsAds\Rest\Model\CampaignManagementService\TargetSetting',
        'ThirdPartyMeasurementSetting' => 'Microsoft\MsAds\Rest\Model\CampaignManagementService\ThirdPartyMeasurementSetting',
        'VanityPharmaSetting' => 'Microsoft\MsAds\Rest\Model\CampaignManagementService\VanityPharmaSetting',
        'VerifiedTrackingSetting' => 'Microsoft\MsAds\Rest\Model\CampaignManagementService\VerifiedTrackingSetting',
    ];

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static string $openAPIModelName = 'Setting';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static array $openAPITypes = [
        'Priority' => 'int',
        'SalesCountryCode' => 'string',
        'StoreId' => 'string',
        'LocalInventoryAdsEnabled' => 'bool',
        'ShoppableAdsEnabled' => 'bool',
        'FeedLabel' => 'string',
        'Type' => 'string',
        'FeedId' => 'string',
        'DomainName' => 'string',
        'Language' => 'string',
        'Source' => '\Microsoft\MsAds\Rest\Model\CampaignManagementService\DynamicSearchAdsSource',
        'PageFeedIds' => 'string[]',
        'DynamicDescriptionEnabled' => 'bool',
        'Details' => '\Microsoft\MsAds\Rest\Model\CampaignManagementService\KeyValuePairOfstringAndstring[][]',
        'BidOption' => '\Microsoft\MsAds\Rest\Model\CampaignManagementService\BidOption',
        'BidBoostValue' => 'float',
        'BidMaxValue' => 'float',
        'DisclaimerAdsEnabled' => 'bool',
        'HotelAdGroupType' => '\Microsoft\MsAds\Rest\Model\CampaignManagementService\HotelAdGroupType',
        'AutoGeneratedAssetsEnabled' => 'bool',
        'FinalUrlExpansionOptOut' => 'bool',
        'AutoGeneratedTextOptOut' => 'bool',
        'AutoGeneratedImageOptOut' => 'bool',
        'CostPerSaleOptOut' => 'bool',
        'AutomatedCallToActionOptOut' => 'bool',
        'CallToActionOptOut' => 'bool',
        'DisplayUrlMode' => '\Microsoft\MsAds\Rest\Model\CampaignManagementService\VanityPharmaDisplayUrlMode',
        'WebsiteDescription' => '\Microsoft\MsAds\Rest\Model\CampaignManagementService\VanityPharmaWebsiteDescription',
        'AppStore' => '\Microsoft\MsAds\Rest\Model\CampaignManagementService\AppStore',
        'AppId' => 'string',
        'NewCustomerAcquisitionGoalId' => 'string',
        'NewCustomerAcquisitionBidOnlyMode' => 'bool',
        'AdditionalConversionValue' => 'float'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static array $openAPIFormats = [
        'Priority' => 'int32',
        'SalesCountryCode' => null,
        'StoreId' => 'int64',
        'LocalInventoryAdsEnabled' => null,
        'ShoppableAdsEnabled' => null,
        'FeedLabel' => null,
        'Type' => null,
        'FeedId' => 'int64',
        'DomainName' => null,
        'Language' => null,
        'Source' => null,
        'PageFeedIds' => 'int64',
        'DynamicDescriptionEnabled' => null,
        'Details' => null,
        'BidOption' => null,
        'BidBoostValue' => 'double',
        'BidMaxValue' => 'double',
        'DisclaimerAdsEnabled' => null,
        'HotelAdGroupType' => null,
        'AutoGeneratedAssetsEnabled' => null,
        'FinalUrlExpansionOptOut' => null,
        'AutoGeneratedTextOptOut' => null,
        'AutoGeneratedImageOptOut' => null,
        'CostPerSaleOptOut' => null,
        'AutomatedCallToActionOptOut' => null,
        'CallToActionOptOut' => null,
        'DisplayUrlMode' => null,
        'WebsiteDescription' => null,
        'AppStore' => null,
        'AppId' => null,
        'NewCustomerAcquisitionGoalId' => 'int64',
        'NewCustomerAcquisitionBidOnlyMode' => null,
        'AdditionalConversionValue' => 'double'
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'Priority' => true,
        'SalesCountryCode' => true,
        'StoreId' => true,
        'LocalInventoryAdsEnabled' => true,
        'ShoppableAdsEnabled' => true,
        'FeedLabel' => true,
        'Type' => true,
        'FeedId' => true,
        'DomainName' => true,
        'Language' => true,
        'Source' => false,
        'PageFeedIds' => true,
        'DynamicDescriptionEnabled' => true,
        'Details' => true,
        'BidOption' => false,
        'BidBoostValue' => true,
        'BidMaxValue' => true,
        'DisclaimerAdsEnabled' => false,
        'HotelAdGroupType' => false,
        'AutoGeneratedAssetsEnabled' => true,
        'FinalUrlExpansionOptOut' => false,
        'AutoGeneratedTextOptOut' => true,
        'AutoGeneratedImageOptOut' => true,
        'CostPerSaleOptOut' => true,
        'AutomatedCallToActionOptOut' => true,
        'CallToActionOptOut' => true,
        'DisplayUrlMode' => false,
        'WebsiteDescription' => false,
        'AppStore' => false,
        'AppId' => true,
        'NewCustomerAcquisitionGoalId' => true,
        'NewCustomerAcquisitionBidOnlyMode' => true,
        'AdditionalConversionValue' => true
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes(): array
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats(): array
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static array $attributeMap = [
        'Priority' => 'Priority',
        'SalesCountryCode' => 'SalesCountryCode',
        'StoreId' => 'StoreId',
        'LocalInventoryAdsEnabled' => 'LocalInventoryAdsEnabled',
        'ShoppableAdsEnabled' => 'ShoppableAdsEnabled',
        'FeedLabel' => 'FeedLabel',
        'Type' => 'Type',
        'FeedId' => 'FeedId',
        'DomainName' => 'DomainName',
        'Language' => 'Language',
        'Source' => 'Source',
        'PageFeedIds' => 'PageFeedIds',
        'DynamicDescriptionEnabled' => 'DynamicDescriptionEnabled',
        'Details' => 'Details',
        'BidOption' => 'BidOption',
        'BidBoostValue' => 'BidBoostValue',
        'BidMaxValue' => 'BidMaxValue',
        'DisclaimerAdsEnabled' => 'DisclaimerAdsEnabled',
        'HotelAdGroupType' => 'HotelAdGroupType',
        'AutoGeneratedAssetsEnabled' => 'AutoGeneratedAssetsEnabled',
        'FinalUrlExpansionOptOut' => 'FinalUrlExpansionOptOut',
        'AutoGeneratedTextOptOut' => 'AutoGeneratedTextOptOut',
        'AutoGeneratedImageOptOut' => 'AutoGeneratedImageOptOut',
        'CostPerSaleOptOut' => 'CostPerSaleOptOut',
        'AutomatedCallToActionOptOut' => 'AutomatedCallToActionOptOut',
        'CallToActionOptOut' => 'CallToActionOptOut',
        'DisplayUrlMode' => 'DisplayUrlMode',
        'WebsiteDescription' => 'WebsiteDescription',
        'AppStore' => 'AppStore',
        'AppId' => 'AppId',
        'NewCustomerAcquisitionGoalId' => 'NewCustomerAcquisitionGoalId',
        'NewCustomerAcquisitionBidOnlyMode' => 'NewCustomerAcquisitionBidOnlyMode',
        'AdditionalConversionValue' => 'AdditionalConversionValue'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static array $setters = [
        'Priority' => 'setPriority',
        'SalesCountryCode' => 'setSalesCountryCode',
        'StoreId' => 'setStoreId',
        'LocalInventoryAdsEnabled' => 'setLocalInventoryAdsEnabled',
        'ShoppableAdsEnabled' => 'setShoppableAdsEnabled',
        'FeedLabel' => 'setFeedLabel',
        'Type' => 'setType',
        'FeedId' => 'setFeedId',
        'DomainName' => 'setDomainName',
        'Language' => 'setLanguage',
        'Source' => 'setSource',
        'PageFeedIds' => 'setPageFeedIds',
        'DynamicDescriptionEnabled' => 'setDynamicDescriptionEnabled',
        'Details' => 'setDetails',
        'BidOption' => 'setBidOption',
        'BidBoostValue' => 'setBidBoostValue',
        'BidMaxValue' => 'setBidMaxValue',
        'DisclaimerAdsEnabled' => 'setDisclaimerAdsEnabled',
        'HotelAdGroupType' => 'setHotelAdGroupType',
        'AutoGeneratedAssetsEnabled' => 'setAutoGeneratedAssetsEnabled',
        'FinalUrlExpansionOptOut' => 'setFinalUrlExpansionOptOut',
        'AutoGeneratedTextOptOut' => 'setAutoGeneratedTextOptOut',
        'AutoGeneratedImageOptOut' => 'setAutoGeneratedImageOptOut',
        'CostPerSaleOptOut' => 'setCostPerSaleOptOut',
        'AutomatedCallToActionOptOut' => 'setAutomatedCallToActionOptOut',
        'CallToActionOptOut' => 'setCallToActionOptOut',
        'DisplayUrlMode' => 'setDisplayUrlMode',
        'WebsiteDescription' => 'setWebsiteDescription',
        'AppStore' => 'setAppStore',
        'AppId' => 'setAppId',
        'NewCustomerAcquisitionGoalId' => 'setNewCustomerAcquisitionGoalId',
        'NewCustomerAcquisitionBidOnlyMode' => 'setNewCustomerAcquisitionBidOnlyMode',
        'AdditionalConversionValue' => 'setAdditionalConversionValue'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static array $getters = [
        'Priority' => 'getPriority',
        'SalesCountryCode' => 'getSalesCountryCode',
        'StoreId' => 'getStoreId',
        'LocalInventoryAdsEnabled' => 'getLocalInventoryAdsEnabled',
        'ShoppableAdsEnabled' => 'getShoppableAdsEnabled',
        'FeedLabel' => 'getFeedLabel',
        'Type' => 'getType',
        'FeedId' => 'getFeedId',
        'DomainName' => 'getDomainName',
        'Language' => 'getLanguage',
        'Source' => 'getSource',
        'PageFeedIds' => 'getPageFeedIds',
        'DynamicDescriptionEnabled' => 'getDynamicDescriptionEnabled',
        'Details' => 'getDetails',
        'BidOption' => 'getBidOption',
        'BidBoostValue' => 'getBidBoostValue',
        'BidMaxValue' => 'getBidMaxValue',
        'DisclaimerAdsEnabled' => 'getDisclaimerAdsEnabled',
        'HotelAdGroupType' => 'getHotelAdGroupType',
        'AutoGeneratedAssetsEnabled' => 'getAutoGeneratedAssetsEnabled',
        'FinalUrlExpansionOptOut' => 'getFinalUrlExpansionOptOut',
        'AutoGeneratedTextOptOut' => 'getAutoGeneratedTextOptOut',
        'AutoGeneratedImageOptOut' => 'getAutoGeneratedImageOptOut',
        'CostPerSaleOptOut' => 'getCostPerSaleOptOut',
        'AutomatedCallToActionOptOut' => 'getAutomatedCallToActionOptOut',
        'CallToActionOptOut' => 'getCallToActionOptOut',
        'DisplayUrlMode' => 'getDisplayUrlMode',
        'WebsiteDescription' => 'getWebsiteDescription',
        'AppStore' => 'getAppStore',
        'AppId' => 'getAppId',
        'NewCustomerAcquisitionGoalId' => 'getNewCustomerAcquisitionGoalId',
        'NewCustomerAcquisitionBidOnlyMode' => 'getNewCustomerAcquisitionBidOnlyMode',
        'AdditionalConversionValue' => 'getAdditionalConversionValue'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap(): array
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters(): array
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters(): array
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName(): string
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var array
     */
    protected array $container = [];

    /**
     * Constructor
     *
     * @param array|null $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(?array $data = null)
    {
        $this->setIfExists('Priority', $data ?? [], null);
        $this->setIfExists('SalesCountryCode', $data ?? [], null);
        $this->setIfExists('StoreId', $data ?? [], null);
        $this->setIfExists('LocalInventoryAdsEnabled', $data ?? [], null);
        $this->setIfExists('ShoppableAdsEnabled', $data ?? [], null);
        $this->setIfExists('FeedLabel', $data ?? [], null);
        $this->setIfExists('Type', $data ?? [], 'NewCustomerAcquisitionGoalSetting');
        $this->setIfExists('FeedId', $data ?? [], null);
        $this->setIfExists('DomainName', $data ?? [], null);
        $this->setIfExists('Language', $data ?? [], null);
        $this->setIfExists('Source', $data ?? [], null);
        $this->setIfExists('PageFeedIds', $data ?? [], null);
        $this->setIfExists('DynamicDescriptionEnabled', $data ?? [], null);
        $this->setIfExists('Details', $data ?? [], null);
        $this->setIfExists('BidOption', $data ?? [], null);
        $this->setIfExists('BidBoostValue', $data ?? [], null);
        $this->setIfExists('BidMaxValue', $data ?? [], null);
        $this->setIfExists('DisclaimerAdsEnabled', $data ?? [], null);
        $this->setIfExists('HotelAdGroupType', $data ?? [], null);
        $this->setIfExists('AutoGeneratedAssetsEnabled', $data ?? [], null);
        $this->setIfExists('FinalUrlExpansionOptOut', $data ?? [], null);
        $this->setIfExists('AutoGeneratedTextOptOut', $data ?? [], null);
        $this->setIfExists('AutoGeneratedImageOptOut', $data ?? [], null);
        $this->setIfExists('CostPerSaleOptOut', $data ?? [], null);
        $this->setIfExists('AutomatedCallToActionOptOut', $data ?? [], null);
        $this->setIfExists('CallToActionOptOut', $data ?? [], null);
        $this->setIfExists('DisplayUrlMode', $data ?? [], null);
        $this->setIfExists('WebsiteDescription', $data ?? [], null);
        $this->setIfExists('AppStore', $data ?? [], null);
        $this->setIfExists('AppId', $data ?? [], null);
        $this->setIfExists('NewCustomerAcquisitionGoalId', $data ?? [], null);
        $this->setIfExists('NewCustomerAcquisitionBidOnlyMode', $data ?? [], null);
        $this->setIfExists('AdditionalConversionValue', $data ?? [], null);

        // Initialize discriminator property with the model name.
        $this->container['Type'] = static::$openAPIModelName;
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties(): array
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid(): bool
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets Priority
     *
     * @return int|null
     */
    public function getPriority()
    {
        if (!isset($this->container['Priority']) || is_null($this->container['Priority'])) {
            return null;
        }
        return $this->container['Priority'];
    }

    /**
     * Sets Priority
     *
     * @param int|null $Priority Priority
     *
     * @return self
     */
    public function setPriority($Priority)
    {
        if (is_null($Priority)) {
            array_push($this->openAPINullablesSetToNull, 'Priority');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('Priority', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['Priority'] = $Priority;

        return $this;
    }

    /**
     * Gets SalesCountryCode
     *
     * @return string|null
     */
    public function getSalesCountryCode()
    {
        if (!isset($this->container['SalesCountryCode']) || is_null($this->container['SalesCountryCode'])) {
            return null;
        }
        return $this->container['SalesCountryCode'];
    }

    /**
     * Sets SalesCountryCode
     *
     * @param string|null $SalesCountryCode SalesCountryCode
     *
     * @return self
     */
    public function setSalesCountryCode($SalesCountryCode)
    {
        if (is_null($SalesCountryCode)) {
            array_push($this->openAPINullablesSetToNull, 'SalesCountryCode');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('SalesCountryCode', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['SalesCountryCode'] = $SalesCountryCode;

        return $this;
    }

    /**
     * Gets StoreId
     *
     * @return string|null
     */
    public function getStoreId()
    {
        if (!isset($this->container['StoreId']) || is_null($this->container['StoreId'])) {
            return null;
        }
        return $this->container['StoreId'];
    }

    /**
     * Sets StoreId
     *
     * @param string|null $StoreId StoreId
     *
     * @return self
     */
    public function setStoreId($StoreId)
    {
        if (is_null($StoreId)) {
            array_push($this->openAPINullablesSetToNull, 'StoreId');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('StoreId', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['StoreId'] = $StoreId;

        return $this;
    }

    /**
     * Gets LocalInventoryAdsEnabled
     *
     * @return bool|null
     */
    public function getLocalInventoryAdsEnabled()
    {
        if (!isset($this->container['LocalInventoryAdsEnabled']) || is_null($this->container['LocalInventoryAdsEnabled'])) {
            return null;
        }
        return $this->container['LocalInventoryAdsEnabled'];
    }

    /**
     * Sets LocalInventoryAdsEnabled
     *
     * @param bool|null $LocalInventoryAdsEnabled LocalInventoryAdsEnabled
     *
     * @return self
     */
    public function setLocalInventoryAdsEnabled($LocalInventoryAdsEnabled)
    {
        if (is_null($LocalInventoryAdsEnabled)) {
            array_push($this->openAPINullablesSetToNull, 'LocalInventoryAdsEnabled');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('LocalInventoryAdsEnabled', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['LocalInventoryAdsEnabled'] = $LocalInventoryAdsEnabled;

        return $this;
    }

    /**
     * Gets ShoppableAdsEnabled
     *
     * @return bool|null
     */
    public function getShoppableAdsEnabled()
    {
        if (!isset($this->container['ShoppableAdsEnabled']) || is_null($this->container['ShoppableAdsEnabled'])) {
            return null;
        }
        return $this->container['ShoppableAdsEnabled'];
    }

    /**
     * Sets ShoppableAdsEnabled
     *
     * @param bool|null $ShoppableAdsEnabled ShoppableAdsEnabled
     *
     * @return self
     */
    public function setShoppableAdsEnabled($ShoppableAdsEnabled)
    {
        if (is_null($ShoppableAdsEnabled)) {
            array_push($this->openAPINullablesSetToNull, 'ShoppableAdsEnabled');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('ShoppableAdsEnabled', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['ShoppableAdsEnabled'] = $ShoppableAdsEnabled;

        return $this;
    }

    /**
     * Gets FeedLabel
     *
     * @return string|null
     */
    public function getFeedLabel()
    {
        if (!isset($this->container['FeedLabel']) || is_null($this->container['FeedLabel'])) {
            return null;
        }
        return $this->container['FeedLabel'];
    }

    /**
     * Sets FeedLabel
     *
     * @param string|null $FeedLabel FeedLabel
     *
     * @return self
     */
    public function setFeedLabel($FeedLabel)
    {
        if (is_null($FeedLabel)) {
            array_push($this->openAPINullablesSetToNull, 'FeedLabel');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('FeedLabel', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['FeedLabel'] = $FeedLabel;

        return $this;
    }

    /**
     * Gets Type
     *
     * @return string|null
     */
    public function getType()
    {
        if (!isset($this->container['Type']) || is_null($this->container['Type'])) {
            return null;
        }
        return $this->container['Type'];
    }

    /**
     * Sets Type
     *
     * @param string|null $Type Type
     *
     * @return self
     */
    public function setType($Type)
    {
        if (is_null($Type)) {
            array_push($this->openAPINullablesSetToNull, 'Type');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('Type', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['Type'] = $Type;

        return $this;
    }

    /**
     * Gets FeedId
     *
     * @return string|null
     */
    public function getFeedId()
    {
        if (!isset($this->container['FeedId']) || is_null($this->container['FeedId'])) {
            return null;
        }
        return $this->container['FeedId'];
    }

    /**
     * Sets FeedId
     *
     * @param string|null $FeedId FeedId
     *
     * @return self
     */
    public function setFeedId($FeedId)
    {
        if (is_null($FeedId)) {
            array_push($this->openAPINullablesSetToNull, 'FeedId');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('FeedId', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['FeedId'] = $FeedId;

        return $this;
    }

    /**
     * Gets DomainName
     *
     * @return string|null
     */
    public function getDomainName()
    {
        if (!isset($this->container['DomainName']) || is_null($this->container['DomainName'])) {
            return null;
        }
        return $this->container['DomainName'];
    }

    /**
     * Sets DomainName
     *
     * @param string|null $DomainName DomainName
     *
     * @return self
     */
    public function setDomainName($DomainName)
    {
        if (is_null($DomainName)) {
            array_push($this->openAPINullablesSetToNull, 'DomainName');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('DomainName', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['DomainName'] = $DomainName;

        return $this;
    }

    /**
     * Gets Language
     *
     * @return string|null
     */
    public function getLanguage()
    {
        if (!isset($this->container['Language']) || is_null($this->container['Language'])) {
            return null;
        }
        return $this->container['Language'];
    }

    /**
     * Sets Language
     *
     * @param string|null $Language Language
     *
     * @return self
     */
    public function setLanguage($Language)
    {
        if (is_null($Language)) {
            array_push($this->openAPINullablesSetToNull, 'Language');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('Language', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['Language'] = $Language;

        return $this;
    }

    /**
     * Gets Source
     *
     * @return \Microsoft\MsAds\Rest\Model\CampaignManagementService\DynamicSearchAdsSource|mixed|null
     */
    public function getSource()
    {
        if (!isset($this->container['Source']) || is_null($this->container['Source'])) {
            return null;
        }
        if ((is_object($this->container['Source']) || is_string($this->container['Source'])) && method_exists($this->container['Source'], 'getValue')) {
            return $this->container['Source']->getValue();
        }
        return $this->container['Source'];
    }

    /**
     * Sets Source
     *
     * @param \Microsoft\MsAds\Rest\Model\CampaignManagementService\DynamicSearchAdsSource|mixed|null $Source Source
     *
     * @return self
     */
    public function setSource($Source)
    {
        if (is_null($Source)) {
            throw new \InvalidArgumentException('non-nullable Source cannot be null');
        }
        if (!$Source instanceof \Microsoft\MsAds\Rest\Model\CampaignManagementService\DynamicSearchAdsSource) {
            $Source = new \Microsoft\MsAds\Rest\Model\CampaignManagementService\DynamicSearchAdsSource($Source);
        }
        $this->container['Source'] = $Source;

        return $this;
    }

    /**
     * Gets PageFeedIds
     *
     * @return string[]|null
     */
    public function getPageFeedIds()
    {
        if (!isset($this->container['PageFeedIds']) || is_null($this->container['PageFeedIds'])) {
            return null;
        }
        return $this->container['PageFeedIds'];
    }

    /**
     * Sets PageFeedIds
     *
     * @param string[]|null $PageFeedIds PageFeedIds
     *
     * @return self
     */
    public function setPageFeedIds($PageFeedIds)
    {
        if (is_null($PageFeedIds)) {
            array_push($this->openAPINullablesSetToNull, 'PageFeedIds');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('PageFeedIds', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['PageFeedIds'] = $PageFeedIds;

        return $this;
    }

    /**
     * Gets DynamicDescriptionEnabled
     *
     * @return bool|null
     */
    public function getDynamicDescriptionEnabled()
    {
        if (!isset($this->container['DynamicDescriptionEnabled']) || is_null($this->container['DynamicDescriptionEnabled'])) {
            return null;
        }
        return $this->container['DynamicDescriptionEnabled'];
    }

    /**
     * Sets DynamicDescriptionEnabled
     *
     * @param bool|null $DynamicDescriptionEnabled DynamicDescriptionEnabled
     *
     * @return self
     */
    public function setDynamicDescriptionEnabled($DynamicDescriptionEnabled)
    {
        if (is_null($DynamicDescriptionEnabled)) {
            array_push($this->openAPINullablesSetToNull, 'DynamicDescriptionEnabled');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('DynamicDescriptionEnabled', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['DynamicDescriptionEnabled'] = $DynamicDescriptionEnabled;

        return $this;
    }

    /**
     * Gets Details
     *
     * @return \Microsoft\MsAds\Rest\Model\CampaignManagementService\KeyValuePairOfstringAndstring[][]|null
     */
    public function getDetails()
    {
        if (!isset($this->container['Details']) || is_null($this->container['Details'])) {
            return null;
        }
        return $this->container['Details'];
    }

    /**
     * Sets Details
     *
     * @param \Microsoft\MsAds\Rest\Model\CampaignManagementService\KeyValuePairOfstringAndstring[][]|null $Details Details
     *
     * @return self
     */
    public function setDetails($Details)
    {
        if (is_null($Details)) {
            array_push($this->openAPINullablesSetToNull, 'Details');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('Details', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['Details'] = $Details;

        return $this;
    }

    /**
     * Gets BidOption
     *
     * @return \Microsoft\MsAds\Rest\Model\CampaignManagementService\BidOption|mixed|null
     */
    public function getBidOption()
    {
        if (!isset($this->container['BidOption']) || is_null($this->container['BidOption'])) {
            return null;
        }
        if ((is_object($this->container['BidOption']) || is_string($this->container['BidOption'])) && method_exists($this->container['BidOption'], 'getValue')) {
            return $this->container['BidOption']->getValue();
        }
        return $this->container['BidOption'];
    }

    /**
     * Sets BidOption
     *
     * @param \Microsoft\MsAds\Rest\Model\CampaignManagementService\BidOption|mixed|null $BidOption BidOption
     *
     * @return self
     */
    public function setBidOption($BidOption)
    {
        if (is_null($BidOption)) {
            throw new \InvalidArgumentException('non-nullable BidOption cannot be null');
        }
        if (!$BidOption instanceof \Microsoft\MsAds\Rest\Model\CampaignManagementService\BidOption) {
            $BidOption = new \Microsoft\MsAds\Rest\Model\CampaignManagementService\BidOption($BidOption);
        }
        $this->container['BidOption'] = $BidOption;

        return $this;
    }

    /**
     * Gets BidBoostValue
     *
     * @return float|null
     */
    public function getBidBoostValue()
    {
        if (!isset($this->container['BidBoostValue']) || is_null($this->container['BidBoostValue'])) {
            return null;
        }
        return $this->container['BidBoostValue'];
    }

    /**
     * Sets BidBoostValue
     *
     * @param float|null $BidBoostValue BidBoostValue
     *
     * @return self
     */
    public function setBidBoostValue($BidBoostValue)
    {
        if (is_null($BidBoostValue)) {
            array_push($this->openAPINullablesSetToNull, 'BidBoostValue');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('BidBoostValue', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['BidBoostValue'] = $BidBoostValue;

        return $this;
    }

    /**
     * Gets BidMaxValue
     *
     * @return float|null
     */
    public function getBidMaxValue()
    {
        if (!isset($this->container['BidMaxValue']) || is_null($this->container['BidMaxValue'])) {
            return null;
        }
        return $this->container['BidMaxValue'];
    }

    /**
     * Sets BidMaxValue
     *
     * @param float|null $BidMaxValue BidMaxValue
     *
     * @return self
     */
    public function setBidMaxValue($BidMaxValue)
    {
        if (is_null($BidMaxValue)) {
            array_push($this->openAPINullablesSetToNull, 'BidMaxValue');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('BidMaxValue', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['BidMaxValue'] = $BidMaxValue;

        return $this;
    }

    /**
     * Gets DisclaimerAdsEnabled
     *
     * @return bool|null
     */
    public function getDisclaimerAdsEnabled()
    {
        if (!isset($this->container['DisclaimerAdsEnabled']) || is_null($this->container['DisclaimerAdsEnabled'])) {
            return null;
        }
        return $this->container['DisclaimerAdsEnabled'];
    }

    /**
     * Sets DisclaimerAdsEnabled
     *
     * @param bool|null $DisclaimerAdsEnabled DisclaimerAdsEnabled
     *
     * @return self
     */
    public function setDisclaimerAdsEnabled($DisclaimerAdsEnabled)
    {
        if (is_null($DisclaimerAdsEnabled)) {
            throw new \InvalidArgumentException('non-nullable DisclaimerAdsEnabled cannot be null');
        }
        $this->container['DisclaimerAdsEnabled'] = $DisclaimerAdsEnabled;

        return $this;
    }

    /**
     * Gets HotelAdGroupType
     *
     * @return \Microsoft\MsAds\Rest\Model\CampaignManagementService\HotelAdGroupType|mixed|null
     */
    public function getHotelAdGroupType()
    {
        if (!isset($this->container['HotelAdGroupType']) || is_null($this->container['HotelAdGroupType'])) {
            return null;
        }
        if ((is_object($this->container['HotelAdGroupType']) || is_string($this->container['HotelAdGroupType'])) && method_exists($this->container['HotelAdGroupType'], 'getValue')) {
            return $this->container['HotelAdGroupType']->getValue();
        }
        return $this->container['HotelAdGroupType'];
    }

    /**
     * Sets HotelAdGroupType
     *
     * @param \Microsoft\MsAds\Rest\Model\CampaignManagementService\HotelAdGroupType|mixed|null $HotelAdGroupType HotelAdGroupType
     *
     * @return self
     */
    public function setHotelAdGroupType($HotelAdGroupType)
    {
        if (is_null($HotelAdGroupType)) {
            throw new \InvalidArgumentException('non-nullable HotelAdGroupType cannot be null');
        }
        if (!$HotelAdGroupType instanceof \Microsoft\MsAds\Rest\Model\CampaignManagementService\HotelAdGroupType) {
            $HotelAdGroupType = new \Microsoft\MsAds\Rest\Model\CampaignManagementService\HotelAdGroupType($HotelAdGroupType);
        }
        $this->container['HotelAdGroupType'] = $HotelAdGroupType;

        return $this;
    }

    /**
     * Gets AutoGeneratedAssetsEnabled
     *
     * @return bool|null
     */
    public function getAutoGeneratedAssetsEnabled()
    {
        if (!isset($this->container['AutoGeneratedAssetsEnabled']) || is_null($this->container['AutoGeneratedAssetsEnabled'])) {
            return null;
        }
        return $this->container['AutoGeneratedAssetsEnabled'];
    }

    /**
     * Sets AutoGeneratedAssetsEnabled
     *
     * @param bool|null $AutoGeneratedAssetsEnabled AutoGeneratedAssetsEnabled
     *
     * @return self
     */
    public function setAutoGeneratedAssetsEnabled($AutoGeneratedAssetsEnabled)
    {
        if (is_null($AutoGeneratedAssetsEnabled)) {
            array_push($this->openAPINullablesSetToNull, 'AutoGeneratedAssetsEnabled');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('AutoGeneratedAssetsEnabled', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['AutoGeneratedAssetsEnabled'] = $AutoGeneratedAssetsEnabled;

        return $this;
    }

    /**
     * Gets FinalUrlExpansionOptOut
     *
     * @return bool|null
     */
    public function getFinalUrlExpansionOptOut()
    {
        if (!isset($this->container['FinalUrlExpansionOptOut']) || is_null($this->container['FinalUrlExpansionOptOut'])) {
            return null;
        }
        return $this->container['FinalUrlExpansionOptOut'];
    }

    /**
     * Sets FinalUrlExpansionOptOut
     *
     * @param bool|null $FinalUrlExpansionOptOut FinalUrlExpansionOptOut
     *
     * @return self
     */
    public function setFinalUrlExpansionOptOut($FinalUrlExpansionOptOut)
    {
        if (is_null($FinalUrlExpansionOptOut)) {
            throw new \InvalidArgumentException('non-nullable FinalUrlExpansionOptOut cannot be null');
        }
        $this->container['FinalUrlExpansionOptOut'] = $FinalUrlExpansionOptOut;

        return $this;
    }

    /**
     * Gets AutoGeneratedTextOptOut
     *
     * @return bool|null
     */
    public function getAutoGeneratedTextOptOut()
    {
        if (!isset($this->container['AutoGeneratedTextOptOut']) || is_null($this->container['AutoGeneratedTextOptOut'])) {
            return null;
        }
        return $this->container['AutoGeneratedTextOptOut'];
    }

    /**
     * Sets AutoGeneratedTextOptOut
     *
     * @param bool|null $AutoGeneratedTextOptOut AutoGeneratedTextOptOut
     *
     * @return self
     */
    public function setAutoGeneratedTextOptOut($AutoGeneratedTextOptOut)
    {
        if (is_null($AutoGeneratedTextOptOut)) {
            array_push($this->openAPINullablesSetToNull, 'AutoGeneratedTextOptOut');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('AutoGeneratedTextOptOut', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['AutoGeneratedTextOptOut'] = $AutoGeneratedTextOptOut;

        return $this;
    }

    /**
     * Gets AutoGeneratedImageOptOut
     *
     * @return bool|null
     */
    public function getAutoGeneratedImageOptOut()
    {
        if (!isset($this->container['AutoGeneratedImageOptOut']) || is_null($this->container['AutoGeneratedImageOptOut'])) {
            return null;
        }
        return $this->container['AutoGeneratedImageOptOut'];
    }

    /**
     * Sets AutoGeneratedImageOptOut
     *
     * @param bool|null $AutoGeneratedImageOptOut AutoGeneratedImageOptOut
     *
     * @return self
     */
    public function setAutoGeneratedImageOptOut($AutoGeneratedImageOptOut)
    {
        if (is_null($AutoGeneratedImageOptOut)) {
            array_push($this->openAPINullablesSetToNull, 'AutoGeneratedImageOptOut');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('AutoGeneratedImageOptOut', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['AutoGeneratedImageOptOut'] = $AutoGeneratedImageOptOut;

        return $this;
    }

    /**
     * Gets CostPerSaleOptOut
     *
     * @return bool|null
     */
    public function getCostPerSaleOptOut()
    {
        if (!isset($this->container['CostPerSaleOptOut']) || is_null($this->container['CostPerSaleOptOut'])) {
            return null;
        }
        return $this->container['CostPerSaleOptOut'];
    }

    /**
     * Sets CostPerSaleOptOut
     *
     * @param bool|null $CostPerSaleOptOut CostPerSaleOptOut
     *
     * @return self
     */
    public function setCostPerSaleOptOut($CostPerSaleOptOut)
    {
        if (is_null($CostPerSaleOptOut)) {
            array_push($this->openAPINullablesSetToNull, 'CostPerSaleOptOut');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('CostPerSaleOptOut', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['CostPerSaleOptOut'] = $CostPerSaleOptOut;

        return $this;
    }

    /**
     * Gets AutomatedCallToActionOptOut
     *
     * @return bool|null
     */
    public function getAutomatedCallToActionOptOut()
    {
        if (!isset($this->container['AutomatedCallToActionOptOut']) || is_null($this->container['AutomatedCallToActionOptOut'])) {
            return null;
        }
        return $this->container['AutomatedCallToActionOptOut'];
    }

    /**
     * Sets AutomatedCallToActionOptOut
     *
     * @param bool|null $AutomatedCallToActionOptOut AutomatedCallToActionOptOut
     *
     * @return self
     */
    public function setAutomatedCallToActionOptOut($AutomatedCallToActionOptOut)
    {
        if (is_null($AutomatedCallToActionOptOut)) {
            array_push($this->openAPINullablesSetToNull, 'AutomatedCallToActionOptOut');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('AutomatedCallToActionOptOut', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['AutomatedCallToActionOptOut'] = $AutomatedCallToActionOptOut;

        return $this;
    }

    /**
     * Gets CallToActionOptOut
     *
     * @return bool|null
     */
    public function getCallToActionOptOut()
    {
        if (!isset($this->container['CallToActionOptOut']) || is_null($this->container['CallToActionOptOut'])) {
            return null;
        }
        return $this->container['CallToActionOptOut'];
    }

    /**
     * Sets CallToActionOptOut
     *
     * @param bool|null $CallToActionOptOut CallToActionOptOut
     *
     * @return self
     */
    public function setCallToActionOptOut($CallToActionOptOut)
    {
        if (is_null($CallToActionOptOut)) {
            array_push($this->openAPINullablesSetToNull, 'CallToActionOptOut');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('CallToActionOptOut', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['CallToActionOptOut'] = $CallToActionOptOut;

        return $this;
    }

    /**
     * Gets DisplayUrlMode
     *
     * @return \Microsoft\MsAds\Rest\Model\CampaignManagementService\VanityPharmaDisplayUrlMode|mixed|null
     */
    public function getDisplayUrlMode()
    {
        if (!isset($this->container['DisplayUrlMode']) || is_null($this->container['DisplayUrlMode'])) {
            return null;
        }
        if ((is_object($this->container['DisplayUrlMode']) || is_string($this->container['DisplayUrlMode'])) && method_exists($this->container['DisplayUrlMode'], 'getValue')) {
            return $this->container['DisplayUrlMode']->getValue();
        }
        return $this->container['DisplayUrlMode'];
    }

    /**
     * Sets DisplayUrlMode
     *
     * @param \Microsoft\MsAds\Rest\Model\CampaignManagementService\VanityPharmaDisplayUrlMode|mixed|null $DisplayUrlMode DisplayUrlMode
     *
     * @return self
     */
    public function setDisplayUrlMode($DisplayUrlMode)
    {
        if (is_null($DisplayUrlMode)) {
            throw new \InvalidArgumentException('non-nullable DisplayUrlMode cannot be null');
        }
        if (!$DisplayUrlMode instanceof \Microsoft\MsAds\Rest\Model\CampaignManagementService\VanityPharmaDisplayUrlMode) {
            $DisplayUrlMode = new \Microsoft\MsAds\Rest\Model\CampaignManagementService\VanityPharmaDisplayUrlMode($DisplayUrlMode);
        }
        $this->container['DisplayUrlMode'] = $DisplayUrlMode;

        return $this;
    }

    /**
     * Gets WebsiteDescription
     *
     * @return \Microsoft\MsAds\Rest\Model\CampaignManagementService\VanityPharmaWebsiteDescription|mixed|null
     */
    public function getWebsiteDescription()
    {
        if (!isset($this->container['WebsiteDescription']) || is_null($this->container['WebsiteDescription'])) {
            return null;
        }
        if ((is_object($this->container['WebsiteDescription']) || is_string($this->container['WebsiteDescription'])) && method_exists($this->container['WebsiteDescription'], 'getValue')) {
            return $this->container['WebsiteDescription']->getValue();
        }
        return $this->container['WebsiteDescription'];
    }

    /**
     * Sets WebsiteDescription
     *
     * @param \Microsoft\MsAds\Rest\Model\CampaignManagementService\VanityPharmaWebsiteDescription|mixed|null $WebsiteDescription WebsiteDescription
     *
     * @return self
     */
    public function setWebsiteDescription($WebsiteDescription)
    {
        if (is_null($WebsiteDescription)) {
            throw new \InvalidArgumentException('non-nullable WebsiteDescription cannot be null');
        }
        if (!$WebsiteDescription instanceof \Microsoft\MsAds\Rest\Model\CampaignManagementService\VanityPharmaWebsiteDescription) {
            $WebsiteDescription = new \Microsoft\MsAds\Rest\Model\CampaignManagementService\VanityPharmaWebsiteDescription($WebsiteDescription);
        }
        $this->container['WebsiteDescription'] = $WebsiteDescription;

        return $this;
    }

    /**
     * Gets AppStore
     *
     * @return \Microsoft\MsAds\Rest\Model\CampaignManagementService\AppStore|mixed|null
     */
    public function getAppStore()
    {
        if (!isset($this->container['AppStore']) || is_null($this->container['AppStore'])) {
            return null;
        }
        if ((is_object($this->container['AppStore']) || is_string($this->container['AppStore'])) && method_exists($this->container['AppStore'], 'getValue')) {
            return $this->container['AppStore']->getValue();
        }
        return $this->container['AppStore'];
    }

    /**
     * Sets AppStore
     *
     * @param \Microsoft\MsAds\Rest\Model\CampaignManagementService\AppStore|mixed|null $AppStore AppStore
     *
     * @return self
     */
    public function setAppStore($AppStore)
    {
        if (is_null($AppStore)) {
            throw new \InvalidArgumentException('non-nullable AppStore cannot be null');
        }
        if (!$AppStore instanceof \Microsoft\MsAds\Rest\Model\CampaignManagementService\AppStore) {
            $AppStore = new \Microsoft\MsAds\Rest\Model\CampaignManagementService\AppStore($AppStore);
        }
        $this->container['AppStore'] = $AppStore;

        return $this;
    }

    /**
     * Gets AppId
     *
     * @return string|null
     */
    public function getAppId()
    {
        if (!isset($this->container['AppId']) || is_null($this->container['AppId'])) {
            return null;
        }
        return $this->container['AppId'];
    }

    /**
     * Sets AppId
     *
     * @param string|null $AppId AppId
     *
     * @return self
     */
    public function setAppId($AppId)
    {
        if (is_null($AppId)) {
            array_push($this->openAPINullablesSetToNull, 'AppId');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('AppId', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['AppId'] = $AppId;

        return $this;
    }

    /**
     * Gets NewCustomerAcquisitionGoalId
     *
     * @return string|null
     */
    public function getNewCustomerAcquisitionGoalId()
    {
        if (!isset($this->container['NewCustomerAcquisitionGoalId']) || is_null($this->container['NewCustomerAcquisitionGoalId'])) {
            return null;
        }
        return $this->container['NewCustomerAcquisitionGoalId'];
    }

    /**
     * Sets NewCustomerAcquisitionGoalId
     *
     * @param string|null $NewCustomerAcquisitionGoalId NewCustomerAcquisitionGoalId
     *
     * @return self
     */
    public function setNewCustomerAcquisitionGoalId($NewCustomerAcquisitionGoalId)
    {
        if (is_null($NewCustomerAcquisitionGoalId)) {
            array_push($this->openAPINullablesSetToNull, 'NewCustomerAcquisitionGoalId');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('NewCustomerAcquisitionGoalId', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['NewCustomerAcquisitionGoalId'] = $NewCustomerAcquisitionGoalId;

        return $this;
    }

    /**
     * Gets NewCustomerAcquisitionBidOnlyMode
     *
     * @return bool|null
     */
    public function getNewCustomerAcquisitionBidOnlyMode()
    {
        if (!isset($this->container['NewCustomerAcquisitionBidOnlyMode']) || is_null($this->container['NewCustomerAcquisitionBidOnlyMode'])) {
            return null;
        }
        return $this->container['NewCustomerAcquisitionBidOnlyMode'];
    }

    /**
     * Sets NewCustomerAcquisitionBidOnlyMode
     *
     * @param bool|null $NewCustomerAcquisitionBidOnlyMode NewCustomerAcquisitionBidOnlyMode
     *
     * @return self
     */
    public function setNewCustomerAcquisitionBidOnlyMode($NewCustomerAcquisitionBidOnlyMode)
    {
        if (is_null($NewCustomerAcquisitionBidOnlyMode)) {
            array_push($this->openAPINullablesSetToNull, 'NewCustomerAcquisitionBidOnlyMode');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('NewCustomerAcquisitionBidOnlyMode', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['NewCustomerAcquisitionBidOnlyMode'] = $NewCustomerAcquisitionBidOnlyMode;

        return $this;
    }

    /**
     * Gets AdditionalConversionValue
     *
     * @return float|null
     */
    public function getAdditionalConversionValue()
    {
        if (!isset($this->container['AdditionalConversionValue']) || is_null($this->container['AdditionalConversionValue'])) {
            return null;
        }
        return $this->container['AdditionalConversionValue'];
    }

    /**
     * Sets AdditionalConversionValue
     *
     * @param float|null $AdditionalConversionValue AdditionalConversionValue
     *
     * @return self
     */
    public function setAdditionalConversionValue($AdditionalConversionValue)
    {
        if (is_null($AdditionalConversionValue)) {
            array_push($this->openAPINullablesSetToNull, 'AdditionalConversionValue');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('AdditionalConversionValue', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['AdditionalConversionValue'] = $AdditionalConversionValue;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}
